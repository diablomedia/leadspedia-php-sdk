<?php
/**
 * AdvertiserscreditcardsApi
 * PHP version 5
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LeadspediaApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LeadspediaApi\ApiException;
use LeadspediaApi\Configuration;
use LeadspediaApi\HeaderSelector;
use LeadspediaApi\ObjectSerializer;

/**
 * AdvertiserscreditcardsApi Class Doc Comment
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdvertiserscreditcardsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation advertisersCreditCardsadddo
     *
     * Add
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $card_number card_number (required)
     * @param  string $name_on_card name_on_card (required)
     * @param  string $exp_month exp_month (required)
     * @param  string $exp_year exp_year (required)
     * @param  string $cvv cvv (required)
     * @param  string $address address (required)
     * @param  string $city city (required)
     * @param  string $state state (required)
     * @param  string $zip_code zip_code (required)
     * @param  string $country country (required)
     * @param  string $address2 address2 (optional)
     * @param  string $default_card default_card (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersCreditCardsadddo($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2 = null, $default_card = null)
    {
        $this->advertisersCreditCardsadddoWithHttpInfo($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2, $default_card);
    }

    /**
     * Operation advertisersCreditCardsadddoWithHttpInfo
     *
     * Add
     *
     * @param  int $advertiser_id (required)
     * @param  string $card_number (required)
     * @param  string $name_on_card (required)
     * @param  string $exp_month (required)
     * @param  string $exp_year (required)
     * @param  string $cvv (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zip_code (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     * @param  string $default_card (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsadddoWithHttpInfo($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2 = null, $default_card = null)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsadddoRequest($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2, $default_card);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsadddoAsync
     *
     * Add
     *
     * @param  int $advertiser_id (required)
     * @param  string $card_number (required)
     * @param  string $name_on_card (required)
     * @param  string $exp_month (required)
     * @param  string $exp_year (required)
     * @param  string $cvv (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zip_code (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     * @param  string $default_card (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsadddoAsync($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2 = null, $default_card = null)
    {
        return $this->advertisersCreditCardsadddoAsyncWithHttpInfo($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2, $default_card)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsadddoAsyncWithHttpInfo
     *
     * Add
     *
     * @param  int $advertiser_id (required)
     * @param  string $card_number (required)
     * @param  string $name_on_card (required)
     * @param  string $exp_month (required)
     * @param  string $exp_year (required)
     * @param  string $cvv (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zip_code (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     * @param  string $default_card (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsadddoAsyncWithHttpInfo($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2 = null, $default_card = null)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsadddoRequest($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2, $default_card);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsadddo'
     *
     * @param  int $advertiser_id (required)
     * @param  string $card_number (required)
     * @param  string $name_on_card (required)
     * @param  string $exp_month (required)
     * @param  string $exp_year (required)
     * @param  string $cvv (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zip_code (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     * @param  string $default_card (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsadddoRequest($advertiser_id, $card_number, $name_on_card, $exp_month, $exp_year, $cvv, $address, $city, $state, $zip_code, $country, $address2 = null, $default_card = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'card_number' is set
        if ($card_number === null || (is_array($card_number) && count($card_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_number when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'name_on_card' is set
        if ($name_on_card === null || (is_array($name_on_card) && count($name_on_card) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_on_card when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'exp_month' is set
        if ($exp_month === null || (is_array($exp_month) && count($exp_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exp_month when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'exp_year' is set
        if ($exp_year === null || (is_array($exp_year) && count($exp_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exp_year when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'cvv' is set
        if ($cvv === null || (is_array($cvv) && count($cvv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvv when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'zip_code' is set
        if ($zip_code === null || (is_array($zip_code) && count($zip_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zip_code when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling advertisersCreditCardsadddo'
            );
        }

        $resourcePath = '/advertisersCreditCards/add.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($card_number !== null) {
            $queryParams['cardNumber'] = ObjectSerializer::toQueryValue($card_number);
        }
        // query params
        if ($name_on_card !== null) {
            $queryParams['nameOnCard'] = ObjectSerializer::toQueryValue($name_on_card);
        }
        // query params
        if ($exp_month !== null) {
            $queryParams['expMonth'] = ObjectSerializer::toQueryValue($exp_month);
        }
        // query params
        if ($exp_year !== null) {
            $queryParams['expYear'] = ObjectSerializer::toQueryValue($exp_year);
        }
        // query params
        if ($cvv !== null) {
            $queryParams['cvv'] = ObjectSerializer::toQueryValue($cvv);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($zip_code !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zip_code);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($default_card !== null) {
            $queryParams['defaultCard'] = ObjectSerializer::toQueryValue($default_card);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsdeletedo
     *
     * Delete
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  int $credit_card_id credit_card_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersCreditCardsdeletedo($advertiser_id, $credit_card_id)
    {
        $this->advertisersCreditCardsdeletedoWithHttpInfo($advertiser_id, $credit_card_id);
    }

    /**
     * Operation advertisersCreditCardsdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsdeletedoWithHttpInfo($advertiser_id, $credit_card_id)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsdeletedoRequest($advertiser_id, $credit_card_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsdeletedoAsync
     *
     * Delete
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsdeletedoAsync($advertiser_id, $credit_card_id)
    {
        return $this->advertisersCreditCardsdeletedoAsyncWithHttpInfo($advertiser_id, $credit_card_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsdeletedoAsyncWithHttpInfo($advertiser_id, $credit_card_id)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsdeletedoRequest($advertiser_id, $credit_card_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsdeletedo'
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsdeletedoRequest($advertiser_id, $credit_card_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersCreditCardsdeletedo'
            );
        }
        // verify the required parameter 'credit_card_id' is set
        if ($credit_card_id === null || (is_array($credit_card_id) && count($credit_card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_card_id when calling advertisersCreditCardsdeletedo'
            );
        }

        $resourcePath = '/advertisersCreditCards/delete.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($credit_card_id !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($credit_card_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsgetAlldo
     *
     * Get All
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersCreditCardsgetAlldo($advertiser_id, $start = null, $limit = null)
    {
        $this->advertisersCreditCardsgetAlldoWithHttpInfo($advertiser_id, $start, $limit);
    }

    /**
     * Operation advertisersCreditCardsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiser_id (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsgetAlldoWithHttpInfo($advertiser_id, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsgetAlldoRequest($advertiser_id, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsgetAlldoAsync
     *
     * Get All
     *
     * @param  int $advertiser_id (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetAlldoAsync($advertiser_id, $start = null, $limit = null)
    {
        return $this->advertisersCreditCardsgetAlldoAsyncWithHttpInfo($advertiser_id, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiser_id (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetAlldoAsyncWithHttpInfo($advertiser_id, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsgetAlldoRequest($advertiser_id, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsgetAlldo'
     *
     * @param  int $advertiser_id (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsgetAlldoRequest($advertiser_id, $start = null, $limit = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersCreditCardsgetAlldo'
            );
        }

        $resourcePath = '/advertisersCreditCards/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsgetDefaultdo
     *
     * Get Default
     *
     * @param  int $advertiser_id advertiser_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersCreditCardsgetDefaultdo($advertiser_id)
    {
        $this->advertisersCreditCardsgetDefaultdoWithHttpInfo($advertiser_id);
    }

    /**
     * Operation advertisersCreditCardsgetDefaultdoWithHttpInfo
     *
     * Get Default
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsgetDefaultdoWithHttpInfo($advertiser_id)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsgetDefaultdoRequest($advertiser_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsgetDefaultdoAsync
     *
     * Get Default
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetDefaultdoAsync($advertiser_id)
    {
        return $this->advertisersCreditCardsgetDefaultdoAsyncWithHttpInfo($advertiser_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsgetDefaultdoAsyncWithHttpInfo
     *
     * Get Default
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetDefaultdoAsyncWithHttpInfo($advertiser_id)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsgetDefaultdoRequest($advertiser_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsgetDefaultdo'
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsgetDefaultdoRequest($advertiser_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersCreditCardsgetDefaultdo'
            );
        }

        $resourcePath = '/advertisersCreditCards/getDefault.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsgetInfodo
     *
     * Get Info
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  int $credit_card_id credit_card_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersCreditCardsgetInfodo($advertiser_id, $credit_card_id)
    {
        $this->advertisersCreditCardsgetInfodoWithHttpInfo($advertiser_id, $credit_card_id);
    }

    /**
     * Operation advertisersCreditCardsgetInfodoWithHttpInfo
     *
     * Get Info
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsgetInfodoWithHttpInfo($advertiser_id, $credit_card_id)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsgetInfodoRequest($advertiser_id, $credit_card_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsgetInfodoAsync
     *
     * Get Info
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetInfodoAsync($advertiser_id, $credit_card_id)
    {
        return $this->advertisersCreditCardsgetInfodoAsyncWithHttpInfo($advertiser_id, $credit_card_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsgetInfodoAsyncWithHttpInfo
     *
     * Get Info
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetInfodoAsyncWithHttpInfo($advertiser_id, $credit_card_id)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsgetInfodoRequest($advertiser_id, $credit_card_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsgetInfodo'
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsgetInfodoRequest($advertiser_id, $credit_card_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersCreditCardsgetInfodo'
            );
        }
        // verify the required parameter 'credit_card_id' is set
        if ($credit_card_id === null || (is_array($credit_card_id) && count($credit_card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_card_id when calling advertisersCreditCardsgetInfodo'
            );
        }

        $resourcePath = '/advertisersCreditCards/getInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($credit_card_id !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($credit_card_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardssetDefaultdo
     *
     * Set Default
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  int $credit_card_id credit_card_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersCreditCardssetDefaultdo($advertiser_id, $credit_card_id)
    {
        $this->advertisersCreditCardssetDefaultdoWithHttpInfo($advertiser_id, $credit_card_id);
    }

    /**
     * Operation advertisersCreditCardssetDefaultdoWithHttpInfo
     *
     * Set Default
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardssetDefaultdoWithHttpInfo($advertiser_id, $credit_card_id)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardssetDefaultdoRequest($advertiser_id, $credit_card_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardssetDefaultdoAsync
     *
     * Set Default
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardssetDefaultdoAsync($advertiser_id, $credit_card_id)
    {
        return $this->advertisersCreditCardssetDefaultdoAsyncWithHttpInfo($advertiser_id, $credit_card_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardssetDefaultdoAsyncWithHttpInfo
     *
     * Set Default
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardssetDefaultdoAsyncWithHttpInfo($advertiser_id, $credit_card_id)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardssetDefaultdoRequest($advertiser_id, $credit_card_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardssetDefaultdo'
     *
     * @param  int $advertiser_id (required)
     * @param  int $credit_card_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardssetDefaultdoRequest($advertiser_id, $credit_card_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersCreditCardssetDefaultdo'
            );
        }
        // verify the required parameter 'credit_card_id' is set
        if ($credit_card_id === null || (is_array($credit_card_id) && count($credit_card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_card_id when calling advertisersCreditCardssetDefaultdo'
            );
        }

        $resourcePath = '/advertisersCreditCards/setDefault.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($credit_card_id !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($credit_card_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsupdatePaymentProfileIDdo
     *
     * Update Payment Profile ID
     *
     * @param  int $credit_card_id credit_card_id (required)
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $payment_profile_id payment_profile_id (optional)
     * @param  string $exp_month exp_month (optional)
     * @param  string $exp_year exp_year (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $city city (optional)
     * @param  string $state state (optional)
     * @param  string $zip_code zip_code (optional)
     * @param  string $country country (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersCreditCardsupdatePaymentProfileIDdo($credit_card_id, $advertiser_id, $payment_profile_id = null, $exp_month = null, $exp_year = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null)
    {
        $this->advertisersCreditCardsupdatePaymentProfileIDdoWithHttpInfo($credit_card_id, $advertiser_id, $payment_profile_id, $exp_month, $exp_year, $address, $address2, $city, $state, $zip_code, $country);
    }

    /**
     * Operation advertisersCreditCardsupdatePaymentProfileIDdoWithHttpInfo
     *
     * Update Payment Profile ID
     *
     * @param  int $credit_card_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $payment_profile_id (optional)
     * @param  string $exp_month (optional)
     * @param  string $exp_year (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsupdatePaymentProfileIDdoWithHttpInfo($credit_card_id, $advertiser_id, $payment_profile_id = null, $exp_month = null, $exp_year = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsupdatePaymentProfileIDdoRequest($credit_card_id, $advertiser_id, $payment_profile_id, $exp_month, $exp_year, $address, $address2, $city, $state, $zip_code, $country);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsupdatePaymentProfileIDdoAsync
     *
     * Update Payment Profile ID
     *
     * @param  int $credit_card_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $payment_profile_id (optional)
     * @param  string $exp_month (optional)
     * @param  string $exp_year (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsupdatePaymentProfileIDdoAsync($credit_card_id, $advertiser_id, $payment_profile_id = null, $exp_month = null, $exp_year = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null)
    {
        return $this->advertisersCreditCardsupdatePaymentProfileIDdoAsyncWithHttpInfo($credit_card_id, $advertiser_id, $payment_profile_id, $exp_month, $exp_year, $address, $address2, $city, $state, $zip_code, $country)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsupdatePaymentProfileIDdoAsyncWithHttpInfo
     *
     * Update Payment Profile ID
     *
     * @param  int $credit_card_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $payment_profile_id (optional)
     * @param  string $exp_month (optional)
     * @param  string $exp_year (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsupdatePaymentProfileIDdoAsyncWithHttpInfo($credit_card_id, $advertiser_id, $payment_profile_id = null, $exp_month = null, $exp_year = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsupdatePaymentProfileIDdoRequest($credit_card_id, $advertiser_id, $payment_profile_id, $exp_month, $exp_year, $address, $address2, $city, $state, $zip_code, $country);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsupdatePaymentProfileIDdo'
     *
     * @param  int $credit_card_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $payment_profile_id (optional)
     * @param  string $exp_month (optional)
     * @param  string $exp_year (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsupdatePaymentProfileIDdoRequest($credit_card_id, $advertiser_id, $payment_profile_id = null, $exp_month = null, $exp_year = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null)
    {
        // verify the required parameter 'credit_card_id' is set
        if ($credit_card_id === null || (is_array($credit_card_id) && count($credit_card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_card_id when calling advertisersCreditCardsupdatePaymentProfileIDdo'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersCreditCardsupdatePaymentProfileIDdo'
            );
        }

        $resourcePath = '/advertisersCreditCards/updatePaymentProfileID.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($credit_card_id !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($credit_card_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($payment_profile_id !== null) {
            $queryParams['paymentProfileID'] = ObjectSerializer::toQueryValue($payment_profile_id);
        }
        // query params
        if ($exp_month !== null) {
            $queryParams['expMonth'] = ObjectSerializer::toQueryValue($exp_month);
        }
        // query params
        if ($exp_year !== null) {
            $queryParams['expYear'] = ObjectSerializer::toQueryValue($exp_year);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($zip_code !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zip_code);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsupdatedo
     *
     * Update
     *
     * @param  int $credit_card_id credit_card_id (required)
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $name_on_card name_on_card (required)
     * @param  string $exp_month exp_month (required)
     * @param  string $exp_year exp_year (required)
     * @param  string $address address (required)
     * @param  string $city city (required)
     * @param  string $state state (required)
     * @param  string $zip_code zip_code (required)
     * @param  string $country country (required)
     * @param  string $address2 address2 (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersCreditCardsupdatedo($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2 = null)
    {
        $this->advertisersCreditCardsupdatedoWithHttpInfo($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2);
    }

    /**
     * Operation advertisersCreditCardsupdatedoWithHttpInfo
     *
     * Update
     *
     * @param  int $credit_card_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $name_on_card (required)
     * @param  string $exp_month (required)
     * @param  string $exp_year (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zip_code (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsupdatedoWithHttpInfo($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2 = null)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsupdatedoRequest($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsupdatedoAsync
     *
     * Update
     *
     * @param  int $credit_card_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $name_on_card (required)
     * @param  string $exp_month (required)
     * @param  string $exp_year (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zip_code (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsupdatedoAsync($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2 = null)
    {
        return $this->advertisersCreditCardsupdatedoAsyncWithHttpInfo($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsupdatedoAsyncWithHttpInfo
     *
     * Update
     *
     * @param  int $credit_card_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $name_on_card (required)
     * @param  string $exp_month (required)
     * @param  string $exp_year (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zip_code (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsupdatedoAsyncWithHttpInfo($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2 = null)
    {
        $returnType = '';
        $request = $this->advertisersCreditCardsupdatedoRequest($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsupdatedo'
     *
     * @param  int $credit_card_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $name_on_card (required)
     * @param  string $exp_month (required)
     * @param  string $exp_year (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zip_code (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsupdatedoRequest($credit_card_id, $advertiser_id, $name_on_card, $exp_month, $exp_year, $address, $city, $state, $zip_code, $country, $address2 = null)
    {
        // verify the required parameter 'credit_card_id' is set
        if ($credit_card_id === null || (is_array($credit_card_id) && count($credit_card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_card_id when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'name_on_card' is set
        if ($name_on_card === null || (is_array($name_on_card) && count($name_on_card) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_on_card when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'exp_month' is set
        if ($exp_month === null || (is_array($exp_month) && count($exp_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exp_month when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'exp_year' is set
        if ($exp_year === null || (is_array($exp_year) && count($exp_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exp_year when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'zip_code' is set
        if ($zip_code === null || (is_array($zip_code) && count($zip_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zip_code when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling advertisersCreditCardsupdatedo'
            );
        }

        $resourcePath = '/advertisersCreditCards/update.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($credit_card_id !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($credit_card_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($name_on_card !== null) {
            $queryParams['nameOnCard'] = ObjectSerializer::toQueryValue($name_on_card);
        }
        // query params
        if ($exp_month !== null) {
            $queryParams['expMonth'] = ObjectSerializer::toQueryValue($exp_month);
        }
        // query params
        if ($exp_year !== null) {
            $queryParams['expYear'] = ObjectSerializer::toQueryValue($exp_year);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($zip_code !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zip_code);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
