<?php
/**
 * AffiliatescontactsApi
 * PHP version 5
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LeadspediaApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LeadspediaApi\ApiException;
use LeadspediaApi\Configuration;
use LeadspediaApi\HeaderSelector;
use LeadspediaApi\ObjectSerializer;

/**
 * AffiliatescontactsApi Class Doc Comment
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AffiliatescontactsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation affiliatesContactschangePassworddo
     *
     * Change Password
     *
     * @param  int $contact_id contact_id (required)
     * @param  string $old_password old_password (required)
     * @param  string $new_password new_password (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesContactschangePassworddo($contact_id, $old_password, $new_password)
    {
        $this->affiliatesContactschangePassworddoWithHttpInfo($contact_id, $old_password, $new_password);
    }

    /**
     * Operation affiliatesContactschangePassworddoWithHttpInfo
     *
     * Change Password
     *
     * @param  int $contact_id (required)
     * @param  string $old_password (required)
     * @param  string $new_password (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesContactschangePassworddoWithHttpInfo($contact_id, $old_password, $new_password)
    {
        $returnType = '';
        $request = $this->affiliatesContactschangePassworddoRequest($contact_id, $old_password, $new_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesContactschangePassworddoAsync
     *
     * Change Password
     *
     * @param  int $contact_id (required)
     * @param  string $old_password (required)
     * @param  string $new_password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactschangePassworddoAsync($contact_id, $old_password, $new_password)
    {
        return $this->affiliatesContactschangePassworddoAsyncWithHttpInfo($contact_id, $old_password, $new_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesContactschangePassworddoAsyncWithHttpInfo
     *
     * Change Password
     *
     * @param  int $contact_id (required)
     * @param  string $old_password (required)
     * @param  string $new_password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactschangePassworddoAsyncWithHttpInfo($contact_id, $old_password, $new_password)
    {
        $returnType = '';
        $request = $this->affiliatesContactschangePassworddoRequest($contact_id, $old_password, $new_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesContactschangePassworddo'
     *
     * @param  int $contact_id (required)
     * @param  string $old_password (required)
     * @param  string $new_password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesContactschangePassworddoRequest($contact_id, $old_password, $new_password)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling affiliatesContactschangePassworddo'
            );
        }
        // verify the required parameter 'old_password' is set
        if ($old_password === null || (is_array($old_password) && count($old_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $old_password when calling affiliatesContactschangePassworddo'
            );
        }
        // verify the required parameter 'new_password' is set
        if ($new_password === null || (is_array($new_password) && count($new_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_password when calling affiliatesContactschangePassworddo'
            );
        }

        $resourcePath = '/affiliatesContacts/changePassword.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contact_id);
        }
        // query params
        if ($old_password !== null) {
            $queryParams['oldPassword'] = ObjectSerializer::toQueryValue($old_password);
        }
        // query params
        if ($new_password !== null) {
            $queryParams['newPassword'] = ObjectSerializer::toQueryValue($new_password);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesContactschangeStatusdo
     *
     * Change Status
     *
     * @param  int $contact_id contact_id (required)
     * @param  string $status status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesContactschangeStatusdo($contact_id, $status)
    {
        $this->affiliatesContactschangeStatusdoWithHttpInfo($contact_id, $status);
    }

    /**
     * Operation affiliatesContactschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contact_id (required)
     * @param  string $status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesContactschangeStatusdoWithHttpInfo($contact_id, $status)
    {
        $returnType = '';
        $request = $this->affiliatesContactschangeStatusdoRequest($contact_id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesContactschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $contact_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactschangeStatusdoAsync($contact_id, $status)
    {
        return $this->affiliatesContactschangeStatusdoAsyncWithHttpInfo($contact_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesContactschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contact_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactschangeStatusdoAsyncWithHttpInfo($contact_id, $status)
    {
        $returnType = '';
        $request = $this->affiliatesContactschangeStatusdoRequest($contact_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesContactschangeStatusdo'
     *
     * @param  int $contact_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesContactschangeStatusdoRequest($contact_id, $status)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling affiliatesContactschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling affiliatesContactschangeStatusdo'
            );
        }

        $resourcePath = '/affiliatesContacts/changeStatus.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contact_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesContactscreatedo
     *
     * Create
     *
     * @param  int $affiliate_id affiliate_id (required)
     * @param  string $first_name first_name (required)
     * @param  string $last_name last_name (required)
     * @param  string $email_address email_address (required)
     * @param  string $password password (required)
     * @param  string $job_title job_title (optional)
     * @param  string $phone_number phone_number (optional)
     * @param  string $portal_access portal_access (optional)
     * @param  string $status status (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesContactscreatedo($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title = null, $phone_number = null, $portal_access = null, $status = null)
    {
        $this->affiliatesContactscreatedoWithHttpInfo($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title, $phone_number, $portal_access, $status);
    }

    /**
     * Operation affiliatesContactscreatedoWithHttpInfo
     *
     * Create
     *
     * @param  int $affiliate_id (required)
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $email_address (required)
     * @param  string $password (required)
     * @param  string $job_title (optional)
     * @param  string $phone_number (optional)
     * @param  string $portal_access (optional)
     * @param  string $status (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesContactscreatedoWithHttpInfo($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title = null, $phone_number = null, $portal_access = null, $status = null)
    {
        $returnType = '';
        $request = $this->affiliatesContactscreatedoRequest($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title, $phone_number, $portal_access, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesContactscreatedoAsync
     *
     * Create
     *
     * @param  int $affiliate_id (required)
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $email_address (required)
     * @param  string $password (required)
     * @param  string $job_title (optional)
     * @param  string $phone_number (optional)
     * @param  string $portal_access (optional)
     * @param  string $status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactscreatedoAsync($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title = null, $phone_number = null, $portal_access = null, $status = null)
    {
        return $this->affiliatesContactscreatedoAsyncWithHttpInfo($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title, $phone_number, $portal_access, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesContactscreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  int $affiliate_id (required)
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $email_address (required)
     * @param  string $password (required)
     * @param  string $job_title (optional)
     * @param  string $phone_number (optional)
     * @param  string $portal_access (optional)
     * @param  string $status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactscreatedoAsyncWithHttpInfo($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title = null, $phone_number = null, $portal_access = null, $status = null)
    {
        $returnType = '';
        $request = $this->affiliatesContactscreatedoRequest($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title, $phone_number, $portal_access, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesContactscreatedo'
     *
     * @param  int $affiliate_id (required)
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $email_address (required)
     * @param  string $password (required)
     * @param  string $job_title (optional)
     * @param  string $phone_number (optional)
     * @param  string $portal_access (optional)
     * @param  string $status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesContactscreatedoRequest($affiliate_id, $first_name, $last_name, $email_address, $password, $job_title = null, $phone_number = null, $portal_access = null, $status = null)
    {
        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling affiliatesContactscreatedo'
            );
        }
        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling affiliatesContactscreatedo'
            );
        }
        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling affiliatesContactscreatedo'
            );
        }
        // verify the required parameter 'email_address' is set
        if ($email_address === null || (is_array($email_address) && count($email_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address when calling affiliatesContactscreatedo'
            );
        }
        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling affiliatesContactscreatedo'
            );
        }

        $resourcePath = '/affiliatesContacts/create.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($first_name);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($last_name);
        }
        // query params
        if ($email_address !== null) {
            $queryParams['emailAddress'] = ObjectSerializer::toQueryValue($email_address);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($job_title !== null) {
            $queryParams['jobTitle'] = ObjectSerializer::toQueryValue($job_title);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['phoneNumber'] = ObjectSerializer::toQueryValue($phone_number);
        }
        // query params
        if ($portal_access !== null) {
            $queryParams['portalAccess'] = ObjectSerializer::toQueryValue($portal_access);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesContactsdeletedo
     *
     * Delete
     *
     * @param  int $contact_id contact_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesContactsdeletedo($contact_id)
    {
        $this->affiliatesContactsdeletedoWithHttpInfo($contact_id);
    }

    /**
     * Operation affiliatesContactsdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $contact_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesContactsdeletedoWithHttpInfo($contact_id)
    {
        $returnType = '';
        $request = $this->affiliatesContactsdeletedoRequest($contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesContactsdeletedoAsync
     *
     * Delete
     *
     * @param  int $contact_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsdeletedoAsync($contact_id)
    {
        return $this->affiliatesContactsdeletedoAsyncWithHttpInfo($contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesContactsdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $contact_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsdeletedoAsyncWithHttpInfo($contact_id)
    {
        $returnType = '';
        $request = $this->affiliatesContactsdeletedoRequest($contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesContactsdeletedo'
     *
     * @param  int $contact_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesContactsdeletedoRequest($contact_id)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling affiliatesContactsdeletedo'
            );
        }

        $resourcePath = '/affiliatesContacts/delete.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contact_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesContactsgetAlldo
     *
     * Get All
     *
     * @param  int $contact_id contact_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  string $portal_access portal_access (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesContactsgetAlldo($contact_id = null, $affiliate_id = null, $portal_access = null, $start = null, $limit = null)
    {
        $this->affiliatesContactsgetAlldoWithHttpInfo($contact_id, $affiliate_id, $portal_access, $start, $limit);
    }

    /**
     * Operation affiliatesContactsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $contact_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  string $portal_access (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesContactsgetAlldoWithHttpInfo($contact_id = null, $affiliate_id = null, $portal_access = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->affiliatesContactsgetAlldoRequest($contact_id, $affiliate_id, $portal_access, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesContactsgetAlldoAsync
     *
     * Get All
     *
     * @param  int $contact_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  string $portal_access (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsgetAlldoAsync($contact_id = null, $affiliate_id = null, $portal_access = null, $start = null, $limit = null)
    {
        return $this->affiliatesContactsgetAlldoAsyncWithHttpInfo($contact_id, $affiliate_id, $portal_access, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesContactsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $contact_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  string $portal_access (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsgetAlldoAsyncWithHttpInfo($contact_id = null, $affiliate_id = null, $portal_access = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->affiliatesContactsgetAlldoRequest($contact_id, $affiliate_id, $portal_access, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesContactsgetAlldo'
     *
     * @param  int $contact_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  string $portal_access (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesContactsgetAlldoRequest($contact_id = null, $affiliate_id = null, $portal_access = null, $start = null, $limit = null)
    {

        $resourcePath = '/affiliatesContacts/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contact_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($portal_access !== null) {
            $queryParams['portalAccess'] = ObjectSerializer::toQueryValue($portal_access);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesContactsgetInfodo
     *
     * Get Info
     *
     * @param  int $contact_id contact_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesContactsgetInfodo($contact_id)
    {
        $this->affiliatesContactsgetInfodoWithHttpInfo($contact_id);
    }

    /**
     * Operation affiliatesContactsgetInfodoWithHttpInfo
     *
     * Get Info
     *
     * @param  int $contact_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesContactsgetInfodoWithHttpInfo($contact_id)
    {
        $returnType = '';
        $request = $this->affiliatesContactsgetInfodoRequest($contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesContactsgetInfodoAsync
     *
     * Get Info
     *
     * @param  int $contact_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsgetInfodoAsync($contact_id)
    {
        return $this->affiliatesContactsgetInfodoAsyncWithHttpInfo($contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesContactsgetInfodoAsyncWithHttpInfo
     *
     * Get Info
     *
     * @param  int $contact_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsgetInfodoAsyncWithHttpInfo($contact_id)
    {
        $returnType = '';
        $request = $this->affiliatesContactsgetInfodoRequest($contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesContactsgetInfodo'
     *
     * @param  int $contact_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesContactsgetInfodoRequest($contact_id)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling affiliatesContactsgetInfodo'
            );
        }

        $resourcePath = '/affiliatesContacts/getInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contact_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesContactsupdatedo
     *
     * Update
     *
     * @param  int $contact_id contact_id (required)
     * @param  string $first_name first_name (optional)
     * @param  string $last_name last_name (optional)
     * @param  string $job_title job_title (optional)
     * @param  string $email_address email_address (optional)
     * @param  string $phone_number phone_number (optional)
     * @param  string $office_phone office_phone (optional)
     * @param  string $ext ext (optional)
     * @param  string $portal_access portal_access (optional)
     * @param  string $role role (optional)
     * @param  string $mass_email mass_email (optional)
     * @param  string $permission_account permission_account (optional)
     * @param  string $permission_billing permission_billing (optional)
     * @param  string $permission_offers permission_offers (optional)
     * @param  string $permission_reports permission_reports (optional)
     * @param  string $permission_users permission_users (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesContactsupdatedo($contact_id, $first_name = null, $last_name = null, $job_title = null, $email_address = null, $phone_number = null, $office_phone = null, $ext = null, $portal_access = null, $role = null, $mass_email = null, $permission_account = null, $permission_billing = null, $permission_offers = null, $permission_reports = null, $permission_users = null)
    {
        $this->affiliatesContactsupdatedoWithHttpInfo($contact_id, $first_name, $last_name, $job_title, $email_address, $phone_number, $office_phone, $ext, $portal_access, $role, $mass_email, $permission_account, $permission_billing, $permission_offers, $permission_reports, $permission_users);
    }

    /**
     * Operation affiliatesContactsupdatedoWithHttpInfo
     *
     * Update
     *
     * @param  int $contact_id (required)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $job_title (optional)
     * @param  string $email_address (optional)
     * @param  string $phone_number (optional)
     * @param  string $office_phone (optional)
     * @param  string $ext (optional)
     * @param  string $portal_access (optional)
     * @param  string $role (optional)
     * @param  string $mass_email (optional)
     * @param  string $permission_account (optional)
     * @param  string $permission_billing (optional)
     * @param  string $permission_offers (optional)
     * @param  string $permission_reports (optional)
     * @param  string $permission_users (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesContactsupdatedoWithHttpInfo($contact_id, $first_name = null, $last_name = null, $job_title = null, $email_address = null, $phone_number = null, $office_phone = null, $ext = null, $portal_access = null, $role = null, $mass_email = null, $permission_account = null, $permission_billing = null, $permission_offers = null, $permission_reports = null, $permission_users = null)
    {
        $returnType = '';
        $request = $this->affiliatesContactsupdatedoRequest($contact_id, $first_name, $last_name, $job_title, $email_address, $phone_number, $office_phone, $ext, $portal_access, $role, $mass_email, $permission_account, $permission_billing, $permission_offers, $permission_reports, $permission_users);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesContactsupdatedoAsync
     *
     * Update
     *
     * @param  int $contact_id (required)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $job_title (optional)
     * @param  string $email_address (optional)
     * @param  string $phone_number (optional)
     * @param  string $office_phone (optional)
     * @param  string $ext (optional)
     * @param  string $portal_access (optional)
     * @param  string $role (optional)
     * @param  string $mass_email (optional)
     * @param  string $permission_account (optional)
     * @param  string $permission_billing (optional)
     * @param  string $permission_offers (optional)
     * @param  string $permission_reports (optional)
     * @param  string $permission_users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsupdatedoAsync($contact_id, $first_name = null, $last_name = null, $job_title = null, $email_address = null, $phone_number = null, $office_phone = null, $ext = null, $portal_access = null, $role = null, $mass_email = null, $permission_account = null, $permission_billing = null, $permission_offers = null, $permission_reports = null, $permission_users = null)
    {
        return $this->affiliatesContactsupdatedoAsyncWithHttpInfo($contact_id, $first_name, $last_name, $job_title, $email_address, $phone_number, $office_phone, $ext, $portal_access, $role, $mass_email, $permission_account, $permission_billing, $permission_offers, $permission_reports, $permission_users)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesContactsupdatedoAsyncWithHttpInfo
     *
     * Update
     *
     * @param  int $contact_id (required)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $job_title (optional)
     * @param  string $email_address (optional)
     * @param  string $phone_number (optional)
     * @param  string $office_phone (optional)
     * @param  string $ext (optional)
     * @param  string $portal_access (optional)
     * @param  string $role (optional)
     * @param  string $mass_email (optional)
     * @param  string $permission_account (optional)
     * @param  string $permission_billing (optional)
     * @param  string $permission_offers (optional)
     * @param  string $permission_reports (optional)
     * @param  string $permission_users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsupdatedoAsyncWithHttpInfo($contact_id, $first_name = null, $last_name = null, $job_title = null, $email_address = null, $phone_number = null, $office_phone = null, $ext = null, $portal_access = null, $role = null, $mass_email = null, $permission_account = null, $permission_billing = null, $permission_offers = null, $permission_reports = null, $permission_users = null)
    {
        $returnType = '';
        $request = $this->affiliatesContactsupdatedoRequest($contact_id, $first_name, $last_name, $job_title, $email_address, $phone_number, $office_phone, $ext, $portal_access, $role, $mass_email, $permission_account, $permission_billing, $permission_offers, $permission_reports, $permission_users);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesContactsupdatedo'
     *
     * @param  int $contact_id (required)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $job_title (optional)
     * @param  string $email_address (optional)
     * @param  string $phone_number (optional)
     * @param  string $office_phone (optional)
     * @param  string $ext (optional)
     * @param  string $portal_access (optional)
     * @param  string $role (optional)
     * @param  string $mass_email (optional)
     * @param  string $permission_account (optional)
     * @param  string $permission_billing (optional)
     * @param  string $permission_offers (optional)
     * @param  string $permission_reports (optional)
     * @param  string $permission_users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesContactsupdatedoRequest($contact_id, $first_name = null, $last_name = null, $job_title = null, $email_address = null, $phone_number = null, $office_phone = null, $ext = null, $portal_access = null, $role = null, $mass_email = null, $permission_account = null, $permission_billing = null, $permission_offers = null, $permission_reports = null, $permission_users = null)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling affiliatesContactsupdatedo'
            );
        }

        $resourcePath = '/affiliatesContacts/update.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contact_id);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($first_name);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($last_name);
        }
        // query params
        if ($job_title !== null) {
            $queryParams['jobTitle'] = ObjectSerializer::toQueryValue($job_title);
        }
        // query params
        if ($email_address !== null) {
            $queryParams['emailAddress'] = ObjectSerializer::toQueryValue($email_address);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['phoneNumber'] = ObjectSerializer::toQueryValue($phone_number);
        }
        // query params
        if ($office_phone !== null) {
            $queryParams['officePhone'] = ObjectSerializer::toQueryValue($office_phone);
        }
        // query params
        if ($ext !== null) {
            $queryParams['ext'] = ObjectSerializer::toQueryValue($ext);
        }
        // query params
        if ($portal_access !== null) {
            $queryParams['portalAccess'] = ObjectSerializer::toQueryValue($portal_access);
        }
        // query params
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if ($mass_email !== null) {
            $queryParams['massEmail'] = ObjectSerializer::toQueryValue($mass_email);
        }
        // query params
        if ($permission_account !== null) {
            $queryParams['permission_account'] = ObjectSerializer::toQueryValue($permission_account);
        }
        // query params
        if ($permission_billing !== null) {
            $queryParams['permission_billing'] = ObjectSerializer::toQueryValue($permission_billing);
        }
        // query params
        if ($permission_offers !== null) {
            $queryParams['permission_offers'] = ObjectSerializer::toQueryValue($permission_offers);
        }
        // query params
        if ($permission_reports !== null) {
            $queryParams['permission_reports'] = ObjectSerializer::toQueryValue($permission_reports);
        }
        // query params
        if ($permission_users !== null) {
            $queryParams['permission_users'] = ObjectSerializer::toQueryValue($permission_users);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesContactsverifyCredentialsdo
     *
     * Verify Credentials
     *
     * @param  string $email_address email_address (required)
     * @param  string $password password (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesContactsverifyCredentialsdo($email_address, $password)
    {
        $this->affiliatesContactsverifyCredentialsdoWithHttpInfo($email_address, $password);
    }

    /**
     * Operation affiliatesContactsverifyCredentialsdoWithHttpInfo
     *
     * Verify Credentials
     *
     * @param  string $email_address (required)
     * @param  string $password (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesContactsverifyCredentialsdoWithHttpInfo($email_address, $password)
    {
        $returnType = '';
        $request = $this->affiliatesContactsverifyCredentialsdoRequest($email_address, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesContactsverifyCredentialsdoAsync
     *
     * Verify Credentials
     *
     * @param  string $email_address (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsverifyCredentialsdoAsync($email_address, $password)
    {
        return $this->affiliatesContactsverifyCredentialsdoAsyncWithHttpInfo($email_address, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesContactsverifyCredentialsdoAsyncWithHttpInfo
     *
     * Verify Credentials
     *
     * @param  string $email_address (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesContactsverifyCredentialsdoAsyncWithHttpInfo($email_address, $password)
    {
        $returnType = '';
        $request = $this->affiliatesContactsverifyCredentialsdoRequest($email_address, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesContactsverifyCredentialsdo'
     *
     * @param  string $email_address (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesContactsverifyCredentialsdoRequest($email_address, $password)
    {
        // verify the required parameter 'email_address' is set
        if ($email_address === null || (is_array($email_address) && count($email_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address when calling affiliatesContactsverifyCredentialsdo'
            );
        }
        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling affiliatesContactsverifyCredentialsdo'
            );
        }

        $resourcePath = '/affiliatesContacts/verifyCredentials.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email_address !== null) {
            $queryParams['emailAddress'] = ObjectSerializer::toQueryValue($email_address);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
