<?php
/**
 * LeaddistributioncontractsApi
 * PHP version 5
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LeadspediaApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LeadspediaApi\ApiException;
use LeadspediaApi\Configuration;
use LeadspediaApi\HeaderSelector;
use LeadspediaApi\ObjectSerializer;

/**
 * LeaddistributioncontractsApi Class Doc Comment
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeaddistributioncontractsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation leadDistributionContractsaddFilterdo
     *
     * Add Filter
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $field_id field_id (required)
     * @param  string $operator operator (required)
     * @param  string $value value (optional)
     * @param  \DateTime $date date (optional)
     * @param  BigDecimal $miles miles (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsaddFilterdo($contract_id, $field_id, $operator, $value = null, $date = null, $miles = null)
    {
        $this->leadDistributionContractsaddFilterdoWithHttpInfo($contract_id, $field_id, $operator, $value, $date, $miles);
    }

    /**
     * Operation leadDistributionContractsaddFilterdoWithHttpInfo
     *
     * Add Filter
     *
     * @param  int $contract_id (required)
     * @param  int $field_id (required)
     * @param  string $operator (required)
     * @param  string $value (optional)
     * @param  \DateTime $date (optional)
     * @param  BigDecimal $miles (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsaddFilterdoWithHttpInfo($contract_id, $field_id, $operator, $value = null, $date = null, $miles = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsaddFilterdoRequest($contract_id, $field_id, $operator, $value, $date, $miles);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsaddFilterdoAsync
     *
     * Add Filter
     *
     * @param  int $contract_id (required)
     * @param  int $field_id (required)
     * @param  string $operator (required)
     * @param  string $value (optional)
     * @param  \DateTime $date (optional)
     * @param  BigDecimal $miles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsaddFilterdoAsync($contract_id, $field_id, $operator, $value = null, $date = null, $miles = null)
    {
        return $this->leadDistributionContractsaddFilterdoAsyncWithHttpInfo($contract_id, $field_id, $operator, $value, $date, $miles)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsaddFilterdoAsyncWithHttpInfo
     *
     * Add Filter
     *
     * @param  int $contract_id (required)
     * @param  int $field_id (required)
     * @param  string $operator (required)
     * @param  string $value (optional)
     * @param  \DateTime $date (optional)
     * @param  BigDecimal $miles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsaddFilterdoAsyncWithHttpInfo($contract_id, $field_id, $operator, $value = null, $date = null, $miles = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsaddFilterdoRequest($contract_id, $field_id, $operator, $value, $date, $miles);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsaddFilterdo'
     *
     * @param  int $contract_id (required)
     * @param  int $field_id (required)
     * @param  string $operator (required)
     * @param  string $value (optional)
     * @param  \DateTime $date (optional)
     * @param  BigDecimal $miles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsaddFilterdoRequest($contract_id, $field_id, $operator, $value = null, $date = null, $miles = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsaddFilterdo'
            );
        }
        // verify the required parameter 'field_id' is set
        if ($field_id === null || (is_array($field_id) && count($field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling leadDistributionContractsaddFilterdo'
            );
        }
        // verify the required parameter 'operator' is set
        if ($operator === null || (is_array($operator) && count($operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator when calling leadDistributionContractsaddFilterdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/addFilter.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($field_id !== null) {
            $queryParams['fieldID'] = ObjectSerializer::toQueryValue($field_id);
        }
        // query params
        if ($operator !== null) {
            $queryParams['operator'] = ObjectSerializer::toQueryValue($operator);
        }
        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }
        // query params
        if ($miles !== null) {
            $queryParams['miles'] = ObjectSerializer::toQueryValue($miles);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsaddToOfferdo
     *
     * Add To Offer
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $offer_id offer_id (required)
     * @param  int $priority priority (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsaddToOfferdo($contract_id, $offer_id, $priority = null)
    {
        $this->leadDistributionContractsaddToOfferdoWithHttpInfo($contract_id, $offer_id, $priority);
    }

    /**
     * Operation leadDistributionContractsaddToOfferdoWithHttpInfo
     *
     * Add To Offer
     *
     * @param  int $contract_id (required)
     * @param  int $offer_id (required)
     * @param  int $priority (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsaddToOfferdoWithHttpInfo($contract_id, $offer_id, $priority = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsaddToOfferdoRequest($contract_id, $offer_id, $priority);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsaddToOfferdoAsync
     *
     * Add To Offer
     *
     * @param  int $contract_id (required)
     * @param  int $offer_id (required)
     * @param  int $priority (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsaddToOfferdoAsync($contract_id, $offer_id, $priority = null)
    {
        return $this->leadDistributionContractsaddToOfferdoAsyncWithHttpInfo($contract_id, $offer_id, $priority)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsaddToOfferdoAsyncWithHttpInfo
     *
     * Add To Offer
     *
     * @param  int $contract_id (required)
     * @param  int $offer_id (required)
     * @param  int $priority (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsaddToOfferdoAsyncWithHttpInfo($contract_id, $offer_id, $priority = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsaddToOfferdoRequest($contract_id, $offer_id, $priority);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsaddToOfferdo'
     *
     * @param  int $contract_id (required)
     * @param  int $offer_id (required)
     * @param  int $priority (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsaddToOfferdoRequest($contract_id, $offer_id, $priority = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsaddToOfferdo'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling leadDistributionContractsaddToOfferdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/addToOffer.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsassignEmailDeliveryMethoddo
     *
     * Assign Email Delivery Method
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $delivery_method_id delivery_method_id (required)
     * @param  string $email_to email_to (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsassignEmailDeliveryMethoddo($contract_id, $delivery_method_id, $email_to)
    {
        $this->leadDistributionContractsassignEmailDeliveryMethoddoWithHttpInfo($contract_id, $delivery_method_id, $email_to);
    }

    /**
     * Operation leadDistributionContractsassignEmailDeliveryMethoddoWithHttpInfo
     *
     * Assign Email Delivery Method
     *
     * @param  int $contract_id (required)
     * @param  int $delivery_method_id (required)
     * @param  string $email_to (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsassignEmailDeliveryMethoddoWithHttpInfo($contract_id, $delivery_method_id, $email_to)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsassignEmailDeliveryMethoddoRequest($contract_id, $delivery_method_id, $email_to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsassignEmailDeliveryMethoddoAsync
     *
     * Assign Email Delivery Method
     *
     * @param  int $contract_id (required)
     * @param  int $delivery_method_id (required)
     * @param  string $email_to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsassignEmailDeliveryMethoddoAsync($contract_id, $delivery_method_id, $email_to)
    {
        return $this->leadDistributionContractsassignEmailDeliveryMethoddoAsyncWithHttpInfo($contract_id, $delivery_method_id, $email_to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsassignEmailDeliveryMethoddoAsyncWithHttpInfo
     *
     * Assign Email Delivery Method
     *
     * @param  int $contract_id (required)
     * @param  int $delivery_method_id (required)
     * @param  string $email_to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsassignEmailDeliveryMethoddoAsyncWithHttpInfo($contract_id, $delivery_method_id, $email_to)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsassignEmailDeliveryMethoddoRequest($contract_id, $delivery_method_id, $email_to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsassignEmailDeliveryMethoddo'
     *
     * @param  int $contract_id (required)
     * @param  int $delivery_method_id (required)
     * @param  string $email_to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsassignEmailDeliveryMethoddoRequest($contract_id, $delivery_method_id, $email_to)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsassignEmailDeliveryMethoddo'
            );
        }
        // verify the required parameter 'delivery_method_id' is set
        if ($delivery_method_id === null || (is_array($delivery_method_id) && count($delivery_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_id when calling leadDistributionContractsassignEmailDeliveryMethoddo'
            );
        }
        // verify the required parameter 'email_to' is set
        if ($email_to === null || (is_array($email_to) && count($email_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_to when calling leadDistributionContractsassignEmailDeliveryMethoddo'
            );
        }

        $resourcePath = '/leadDistributionContracts/assignEmailDeliveryMethod.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($delivery_method_id !== null) {
            $queryParams['deliveryMethodID'] = ObjectSerializer::toQueryValue($delivery_method_id);
        }
        // query params
        if ($email_to !== null) {
            $queryParams['email_to'] = ObjectSerializer::toQueryValue($email_to);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsassignSMSDeliveryMethoddo
     *
     * Assign SMS Delivery Method
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $delivery_method_id delivery_method_id (required)
     * @param  BigDecimal $sms_to sms_to (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsassignSMSDeliveryMethoddo($contract_id, $delivery_method_id, $sms_to)
    {
        $this->leadDistributionContractsassignSMSDeliveryMethoddoWithHttpInfo($contract_id, $delivery_method_id, $sms_to);
    }

    /**
     * Operation leadDistributionContractsassignSMSDeliveryMethoddoWithHttpInfo
     *
     * Assign SMS Delivery Method
     *
     * @param  int $contract_id (required)
     * @param  int $delivery_method_id (required)
     * @param  BigDecimal $sms_to (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsassignSMSDeliveryMethoddoWithHttpInfo($contract_id, $delivery_method_id, $sms_to)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsassignSMSDeliveryMethoddoRequest($contract_id, $delivery_method_id, $sms_to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsassignSMSDeliveryMethoddoAsync
     *
     * Assign SMS Delivery Method
     *
     * @param  int $contract_id (required)
     * @param  int $delivery_method_id (required)
     * @param  BigDecimal $sms_to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsassignSMSDeliveryMethoddoAsync($contract_id, $delivery_method_id, $sms_to)
    {
        return $this->leadDistributionContractsassignSMSDeliveryMethoddoAsyncWithHttpInfo($contract_id, $delivery_method_id, $sms_to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsassignSMSDeliveryMethoddoAsyncWithHttpInfo
     *
     * Assign SMS Delivery Method
     *
     * @param  int $contract_id (required)
     * @param  int $delivery_method_id (required)
     * @param  BigDecimal $sms_to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsassignSMSDeliveryMethoddoAsyncWithHttpInfo($contract_id, $delivery_method_id, $sms_to)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsassignSMSDeliveryMethoddoRequest($contract_id, $delivery_method_id, $sms_to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsassignSMSDeliveryMethoddo'
     *
     * @param  int $contract_id (required)
     * @param  int $delivery_method_id (required)
     * @param  BigDecimal $sms_to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsassignSMSDeliveryMethoddoRequest($contract_id, $delivery_method_id, $sms_to)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsassignSMSDeliveryMethoddo'
            );
        }
        // verify the required parameter 'delivery_method_id' is set
        if ($delivery_method_id === null || (is_array($delivery_method_id) && count($delivery_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_id when calling leadDistributionContractsassignSMSDeliveryMethoddo'
            );
        }
        // verify the required parameter 'sms_to' is set
        if ($sms_to === null || (is_array($sms_to) && count($sms_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sms_to when calling leadDistributionContractsassignSMSDeliveryMethoddo'
            );
        }

        $resourcePath = '/leadDistributionContracts/assignSMSDeliveryMethod.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($delivery_method_id !== null) {
            $queryParams['deliveryMethodID'] = ObjectSerializer::toQueryValue($delivery_method_id);
        }
        // query params
        if ($sms_to !== null) {
            $queryParams['sms_to'] = ObjectSerializer::toQueryValue($sms_to);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractschangeModedo
     *
     * Change Mode
     *
     * @param  int $contract_id contract_id (required)
     * @param  string $mode mode (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractschangeModedo($contract_id, $mode)
    {
        $this->leadDistributionContractschangeModedoWithHttpInfo($contract_id, $mode);
    }

    /**
     * Operation leadDistributionContractschangeModedoWithHttpInfo
     *
     * Change Mode
     *
     * @param  int $contract_id (required)
     * @param  string $mode (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractschangeModedoWithHttpInfo($contract_id, $mode)
    {
        $returnType = '';
        $request = $this->leadDistributionContractschangeModedoRequest($contract_id, $mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractschangeModedoAsync
     *
     * Change Mode
     *
     * @param  int $contract_id (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractschangeModedoAsync($contract_id, $mode)
    {
        return $this->leadDistributionContractschangeModedoAsyncWithHttpInfo($contract_id, $mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractschangeModedoAsyncWithHttpInfo
     *
     * Change Mode
     *
     * @param  int $contract_id (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractschangeModedoAsyncWithHttpInfo($contract_id, $mode)
    {
        $returnType = '';
        $request = $this->leadDistributionContractschangeModedoRequest($contract_id, $mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractschangeModedo'
     *
     * @param  int $contract_id (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractschangeModedoRequest($contract_id, $mode)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractschangeModedo'
            );
        }
        // verify the required parameter 'mode' is set
        if ($mode === null || (is_array($mode) && count($mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mode when calling leadDistributionContractschangeModedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/changeMode.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractschangeStatusdo
     *
     * Change Status
     *
     * @param  int $contract_id contract_id (required)
     * @param  string $status status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractschangeStatusdo($contract_id, $status)
    {
        $this->leadDistributionContractschangeStatusdoWithHttpInfo($contract_id, $status);
    }

    /**
     * Operation leadDistributionContractschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contract_id (required)
     * @param  string $status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractschangeStatusdoWithHttpInfo($contract_id, $status)
    {
        $returnType = '';
        $request = $this->leadDistributionContractschangeStatusdoRequest($contract_id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $contract_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractschangeStatusdoAsync($contract_id, $status)
    {
        return $this->leadDistributionContractschangeStatusdoAsyncWithHttpInfo($contract_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contract_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractschangeStatusdoAsyncWithHttpInfo($contract_id, $status)
    {
        $returnType = '';
        $request = $this->leadDistributionContractschangeStatusdoRequest($contract_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractschangeStatusdo'
     *
     * @param  int $contract_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractschangeStatusdoRequest($contract_id, $status)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling leadDistributionContractschangeStatusdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/changeStatus.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractscreateScheduledo
     *
     * Create Schedule
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $cap cap (required)
     * @param  BigDecimal $revenue_cap revenue_cap (required)
     * @param  BigDecimal $price price (required)
     * @param  string $start_time start_time (required)
     * @param  string $end_time end_time (required)
     * @param  string $type type (required)
     * @param  string $monday monday (optional)
     * @param  string $tuesday tuesday (optional)
     * @param  string $wednesday wednesday (optional)
     * @param  string $thursday thursday (optional)
     * @param  string $friday friday (optional)
     * @param  string $saturday saturday (optional)
     * @param  string $sunday sunday (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractscreateScheduledo($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        $this->leadDistributionContractscreateScheduledoWithHttpInfo($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday);
    }

    /**
     * Operation leadDistributionContractscreateScheduledoWithHttpInfo
     *
     * Create Schedule
     *
     * @param  int $contract_id (required)
     * @param  int $cap (required)
     * @param  BigDecimal $revenue_cap (required)
     * @param  BigDecimal $price (required)
     * @param  string $start_time (required)
     * @param  string $end_time (required)
     * @param  string $type (required)
     * @param  string $monday (optional)
     * @param  string $tuesday (optional)
     * @param  string $wednesday (optional)
     * @param  string $thursday (optional)
     * @param  string $friday (optional)
     * @param  string $saturday (optional)
     * @param  string $sunday (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractscreateScheduledoWithHttpInfo($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractscreateScheduledoRequest($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractscreateScheduledoAsync
     *
     * Create Schedule
     *
     * @param  int $contract_id (required)
     * @param  int $cap (required)
     * @param  BigDecimal $revenue_cap (required)
     * @param  BigDecimal $price (required)
     * @param  string $start_time (required)
     * @param  string $end_time (required)
     * @param  string $type (required)
     * @param  string $monday (optional)
     * @param  string $tuesday (optional)
     * @param  string $wednesday (optional)
     * @param  string $thursday (optional)
     * @param  string $friday (optional)
     * @param  string $saturday (optional)
     * @param  string $sunday (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractscreateScheduledoAsync($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        return $this->leadDistributionContractscreateScheduledoAsyncWithHttpInfo($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractscreateScheduledoAsyncWithHttpInfo
     *
     * Create Schedule
     *
     * @param  int $contract_id (required)
     * @param  int $cap (required)
     * @param  BigDecimal $revenue_cap (required)
     * @param  BigDecimal $price (required)
     * @param  string $start_time (required)
     * @param  string $end_time (required)
     * @param  string $type (required)
     * @param  string $monday (optional)
     * @param  string $tuesday (optional)
     * @param  string $wednesday (optional)
     * @param  string $thursday (optional)
     * @param  string $friday (optional)
     * @param  string $saturday (optional)
     * @param  string $sunday (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractscreateScheduledoAsyncWithHttpInfo($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractscreateScheduledoRequest($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractscreateScheduledo'
     *
     * @param  int $contract_id (required)
     * @param  int $cap (required)
     * @param  BigDecimal $revenue_cap (required)
     * @param  BigDecimal $price (required)
     * @param  string $start_time (required)
     * @param  string $end_time (required)
     * @param  string $type (required)
     * @param  string $monday (optional)
     * @param  string $tuesday (optional)
     * @param  string $wednesday (optional)
     * @param  string $thursday (optional)
     * @param  string $friday (optional)
     * @param  string $saturday (optional)
     * @param  string $sunday (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractscreateScheduledoRequest($contract_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'cap' is set
        if ($cap === null || (is_array($cap) && count($cap) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cap when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'revenue_cap' is set
        if ($revenue_cap === null || (is_array($revenue_cap) && count($revenue_cap) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revenue_cap when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'end_time' is set
        if ($end_time === null || (is_array($end_time) && count($end_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_time when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling leadDistributionContractscreateScheduledo'
            );
        }

        $resourcePath = '/leadDistributionContracts/createSchedule.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($cap !== null) {
            $queryParams['cap'] = ObjectSerializer::toQueryValue($cap);
        }
        // query params
        if ($revenue_cap !== null) {
            $queryParams['revenueCap'] = ObjectSerializer::toQueryValue($revenue_cap);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($monday !== null) {
            $queryParams['Monday'] = ObjectSerializer::toQueryValue($monday);
        }
        // query params
        if ($tuesday !== null) {
            $queryParams['Tuesday'] = ObjectSerializer::toQueryValue($tuesday);
        }
        // query params
        if ($wednesday !== null) {
            $queryParams['Wednesday'] = ObjectSerializer::toQueryValue($wednesday);
        }
        // query params
        if ($thursday !== null) {
            $queryParams['Thursday'] = ObjectSerializer::toQueryValue($thursday);
        }
        // query params
        if ($friday !== null) {
            $queryParams['Friday'] = ObjectSerializer::toQueryValue($friday);
        }
        // query params
        if ($saturday !== null) {
            $queryParams['Saturday'] = ObjectSerializer::toQueryValue($saturday);
        }
        // query params
        if ($sunday !== null) {
            $queryParams['Sunday'] = ObjectSerializer::toQueryValue($sunday);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractscreatedo
     *
     * Create
     *
     * @param  int $vertical_id vertical_id (required)
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $revenue_model revenue_model (required)
     * @param  string $contract_name contract_name (required)
     * @param  BigDecimal $default_price default_price (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractscreatedo($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price)
    {
        $this->leadDistributionContractscreatedoWithHttpInfo($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price);
    }

    /**
     * Operation leadDistributionContractscreatedoWithHttpInfo
     *
     * Create
     *
     * @param  int $vertical_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $revenue_model (required)
     * @param  string $contract_name (required)
     * @param  BigDecimal $default_price (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractscreatedoWithHttpInfo($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price)
    {
        $returnType = '';
        $request = $this->leadDistributionContractscreatedoRequest($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractscreatedoAsync
     *
     * Create
     *
     * @param  int $vertical_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $revenue_model (required)
     * @param  string $contract_name (required)
     * @param  BigDecimal $default_price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractscreatedoAsync($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price)
    {
        return $this->leadDistributionContractscreatedoAsyncWithHttpInfo($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractscreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  int $vertical_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $revenue_model (required)
     * @param  string $contract_name (required)
     * @param  BigDecimal $default_price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractscreatedoAsyncWithHttpInfo($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price)
    {
        $returnType = '';
        $request = $this->leadDistributionContractscreatedoRequest($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractscreatedo'
     *
     * @param  int $vertical_id (required)
     * @param  int $advertiser_id (required)
     * @param  string $revenue_model (required)
     * @param  string $contract_name (required)
     * @param  BigDecimal $default_price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractscreatedoRequest($vertical_id, $advertiser_id, $revenue_model, $contract_name, $default_price)
    {
        // verify the required parameter 'vertical_id' is set
        if ($vertical_id === null || (is_array($vertical_id) && count($vertical_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vertical_id when calling leadDistributionContractscreatedo'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling leadDistributionContractscreatedo'
            );
        }
        // verify the required parameter 'revenue_model' is set
        if ($revenue_model === null || (is_array($revenue_model) && count($revenue_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revenue_model when calling leadDistributionContractscreatedo'
            );
        }
        // verify the required parameter 'contract_name' is set
        if ($contract_name === null || (is_array($contract_name) && count($contract_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_name when calling leadDistributionContractscreatedo'
            );
        }
        // verify the required parameter 'default_price' is set
        if ($default_price === null || (is_array($default_price) && count($default_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_price when calling leadDistributionContractscreatedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/create.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($revenue_model !== null) {
            $queryParams['revenueModel'] = ObjectSerializer::toQueryValue($revenue_model);
        }
        // query params
        if ($contract_name !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contract_name);
        }
        // query params
        if ($default_price !== null) {
            $queryParams['defaultPrice'] = ObjectSerializer::toQueryValue($default_price);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteAllDeliveryMethodsdo
     *
     * Delete All Delivery Methods
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsdeleteAllDeliveryMethodsdo($contract_id)
    {
        $this->leadDistributionContractsdeleteAllDeliveryMethodsdoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsdeleteAllDeliveryMethodsdoWithHttpInfo
     *
     * Delete All Delivery Methods
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteAllDeliveryMethodsdoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteAllDeliveryMethodsdoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteAllDeliveryMethodsdoAsync
     *
     * Delete All Delivery Methods
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteAllDeliveryMethodsdoAsync($contract_id)
    {
        return $this->leadDistributionContractsdeleteAllDeliveryMethodsdoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteAllDeliveryMethodsdoAsyncWithHttpInfo
     *
     * Delete All Delivery Methods
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteAllDeliveryMethodsdoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteAllDeliveryMethodsdoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteAllDeliveryMethodsdo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteAllDeliveryMethodsdoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsdeleteAllDeliveryMethodsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteAllDeliveryMethods.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteAllSchedulesdo
     *
     * Delete All Schedules
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsdeleteAllSchedulesdo($contract_id)
    {
        $this->leadDistributionContractsdeleteAllSchedulesdoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsdeleteAllSchedulesdoWithHttpInfo
     *
     * Delete All Schedules
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteAllSchedulesdoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteAllSchedulesdoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteAllSchedulesdoAsync
     *
     * Delete All Schedules
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteAllSchedulesdoAsync($contract_id)
    {
        return $this->leadDistributionContractsdeleteAllSchedulesdoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteAllSchedulesdoAsyncWithHttpInfo
     *
     * Delete All Schedules
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteAllSchedulesdoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteAllSchedulesdoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteAllSchedulesdo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteAllSchedulesdoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsdeleteAllSchedulesdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteAllSchedules.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteDeliveryMethoddo
     *
     * Delete Delivery Method
     *
     * @param  int $delivery_methods_contract_id delivery_methods_contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsdeleteDeliveryMethoddo($delivery_methods_contract_id)
    {
        $this->leadDistributionContractsdeleteDeliveryMethoddoWithHttpInfo($delivery_methods_contract_id);
    }

    /**
     * Operation leadDistributionContractsdeleteDeliveryMethoddoWithHttpInfo
     *
     * Delete Delivery Method
     *
     * @param  int $delivery_methods_contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteDeliveryMethoddoWithHttpInfo($delivery_methods_contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteDeliveryMethoddoRequest($delivery_methods_contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteDeliveryMethoddoAsync
     *
     * Delete Delivery Method
     *
     * @param  int $delivery_methods_contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteDeliveryMethoddoAsync($delivery_methods_contract_id)
    {
        return $this->leadDistributionContractsdeleteDeliveryMethoddoAsyncWithHttpInfo($delivery_methods_contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteDeliveryMethoddoAsyncWithHttpInfo
     *
     * Delete Delivery Method
     *
     * @param  int $delivery_methods_contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteDeliveryMethoddoAsyncWithHttpInfo($delivery_methods_contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteDeliveryMethoddoRequest($delivery_methods_contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteDeliveryMethoddo'
     *
     * @param  int $delivery_methods_contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteDeliveryMethoddoRequest($delivery_methods_contract_id)
    {
        // verify the required parameter 'delivery_methods_contract_id' is set
        if ($delivery_methods_contract_id === null || (is_array($delivery_methods_contract_id) && count($delivery_methods_contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_methods_contract_id when calling leadDistributionContractsdeleteDeliveryMethoddo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteDeliveryMethod.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($delivery_methods_contract_id !== null) {
            $queryParams['deliveryMethodsContractID'] = ObjectSerializer::toQueryValue($delivery_methods_contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteFilterdo
     *
     * Delete Filter
     *
     * @param  int $filter_id filter_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsdeleteFilterdo($filter_id)
    {
        $this->leadDistributionContractsdeleteFilterdoWithHttpInfo($filter_id);
    }

    /**
     * Operation leadDistributionContractsdeleteFilterdoWithHttpInfo
     *
     * Delete Filter
     *
     * @param  int $filter_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteFilterdoWithHttpInfo($filter_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteFilterdoRequest($filter_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteFilterdoAsync
     *
     * Delete Filter
     *
     * @param  int $filter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteFilterdoAsync($filter_id)
    {
        return $this->leadDistributionContractsdeleteFilterdoAsyncWithHttpInfo($filter_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteFilterdoAsyncWithHttpInfo
     *
     * Delete Filter
     *
     * @param  int $filter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteFilterdoAsyncWithHttpInfo($filter_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteFilterdoRequest($filter_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteFilterdo'
     *
     * @param  int $filter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteFilterdoRequest($filter_id)
    {
        // verify the required parameter 'filter_id' is set
        if ($filter_id === null || (is_array($filter_id) && count($filter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_id when calling leadDistributionContractsdeleteFilterdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteFilter.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_id !== null) {
            $queryParams['filterID'] = ObjectSerializer::toQueryValue($filter_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledPausedo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduled_pause_id scheduled_pause_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsdeleteScheduledPausedo($scheduled_pause_id)
    {
        $this->leadDistributionContractsdeleteScheduledPausedoWithHttpInfo($scheduled_pause_id);
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledPausedoWithHttpInfo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduled_pause_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteScheduledPausedoWithHttpInfo($scheduled_pause_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteScheduledPausedoRequest($scheduled_pause_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledPausedoAsync
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduled_pause_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteScheduledPausedoAsync($scheduled_pause_id)
    {
        return $this->leadDistributionContractsdeleteScheduledPausedoAsyncWithHttpInfo($scheduled_pause_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledPausedoAsyncWithHttpInfo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduled_pause_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteScheduledPausedoAsyncWithHttpInfo($scheduled_pause_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteScheduledPausedoRequest($scheduled_pause_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteScheduledPausedo'
     *
     * @param  int $scheduled_pause_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteScheduledPausedoRequest($scheduled_pause_id)
    {
        // verify the required parameter 'scheduled_pause_id' is set
        if ($scheduled_pause_id === null || (is_array($scheduled_pause_id) && count($scheduled_pause_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scheduled_pause_id when calling leadDistributionContractsdeleteScheduledPausedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteScheduledPause.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scheduled_pause_id !== null) {
            $queryParams['scheduledPauseID'] = ObjectSerializer::toQueryValue($scheduled_pause_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledo
     *
     * Delete Schedule
     *
     * @param  int $delivery_schedule_id delivery_schedule_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsdeleteScheduledo($delivery_schedule_id)
    {
        $this->leadDistributionContractsdeleteScheduledoWithHttpInfo($delivery_schedule_id);
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledoWithHttpInfo
     *
     * Delete Schedule
     *
     * @param  int $delivery_schedule_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteScheduledoWithHttpInfo($delivery_schedule_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteScheduledoRequest($delivery_schedule_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledoAsync
     *
     * Delete Schedule
     *
     * @param  int $delivery_schedule_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteScheduledoAsync($delivery_schedule_id)
    {
        return $this->leadDistributionContractsdeleteScheduledoAsyncWithHttpInfo($delivery_schedule_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledoAsyncWithHttpInfo
     *
     * Delete Schedule
     *
     * @param  int $delivery_schedule_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteScheduledoAsyncWithHttpInfo($delivery_schedule_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeleteScheduledoRequest($delivery_schedule_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteScheduledo'
     *
     * @param  int $delivery_schedule_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteScheduledoRequest($delivery_schedule_id)
    {
        // verify the required parameter 'delivery_schedule_id' is set
        if ($delivery_schedule_id === null || (is_array($delivery_schedule_id) && count($delivery_schedule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_schedule_id when calling leadDistributionContractsdeleteScheduledo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteSchedule.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($delivery_schedule_id !== null) {
            $queryParams['deliveryScheduleID'] = ObjectSerializer::toQueryValue($delivery_schedule_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeletedo
     *
     * Delete
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsdeletedo($contract_id)
    {
        $this->leadDistributionContractsdeletedoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeletedoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeletedoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeletedoAsync
     *
     * Delete
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeletedoAsync($contract_id)
    {
        return $this->leadDistributionContractsdeletedoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeletedoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsdeletedoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeletedo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeletedoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsdeletedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/delete.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsenableCreditdo
     *
     * Enable Credit
     *
     * @param  int $contract_id contract_id (required)
     * @param  string $buyer_level buyer_level (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsenableCreditdo($contract_id, $buyer_level)
    {
        $this->leadDistributionContractsenableCreditdoWithHttpInfo($contract_id, $buyer_level);
    }

    /**
     * Operation leadDistributionContractsenableCreditdoWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $contract_id (required)
     * @param  string $buyer_level (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsenableCreditdoWithHttpInfo($contract_id, $buyer_level)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsenableCreditdoRequest($contract_id, $buyer_level);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsenableCreditdoAsync
     *
     * Enable Credit
     *
     * @param  int $contract_id (required)
     * @param  string $buyer_level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsenableCreditdoAsync($contract_id, $buyer_level)
    {
        return $this->leadDistributionContractsenableCreditdoAsyncWithHttpInfo($contract_id, $buyer_level)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsenableCreditdoAsyncWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $contract_id (required)
     * @param  string $buyer_level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsenableCreditdoAsyncWithHttpInfo($contract_id, $buyer_level)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsenableCreditdoRequest($contract_id, $buyer_level);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsenableCreditdo'
     *
     * @param  int $contract_id (required)
     * @param  string $buyer_level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsenableCreditdoRequest($contract_id, $buyer_level)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsenableCreditdo'
            );
        }
        // verify the required parameter 'buyer_level' is set
        if ($buyer_level === null || (is_array($buyer_level) && count($buyer_level) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buyer_level when calling leadDistributionContractsenableCreditdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/enableCredit.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($buyer_level !== null) {
            $queryParams['buyerLevel'] = ObjectSerializer::toQueryValue($buyer_level);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsenableMultipleDeliveryMethodsdo
     *
     * Enable Multiple Delivery Methods
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsenableMultipleDeliveryMethodsdo($contract_id)
    {
        $this->leadDistributionContractsenableMultipleDeliveryMethodsdoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsenableMultipleDeliveryMethodsdoWithHttpInfo
     *
     * Enable Multiple Delivery Methods
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsenableMultipleDeliveryMethodsdoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsenableMultipleDeliveryMethodsdoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsenableMultipleDeliveryMethodsdoAsync
     *
     * Enable Multiple Delivery Methods
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsenableMultipleDeliveryMethodsdoAsync($contract_id)
    {
        return $this->leadDistributionContractsenableMultipleDeliveryMethodsdoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsenableMultipleDeliveryMethodsdoAsyncWithHttpInfo
     *
     * Enable Multiple Delivery Methods
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsenableMultipleDeliveryMethodsdoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsenableMultipleDeliveryMethodsdoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsenableMultipleDeliveryMethodsdo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsenableMultipleDeliveryMethodsdoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsenableMultipleDeliveryMethodsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/enableMultipleDeliveryMethods.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetAlldo
     *
     * Get All
     *
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $contract_id contract_id (optional)
     * @param  int $vertical_id vertical_id (optional)
     * @param  string $status status (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetAlldo($advertiser_id = null, $contract_id = null, $vertical_id = null, $status = null, $start = null, $limit = null)
    {
        $this->leadDistributionContractsgetAlldoWithHttpInfo($advertiser_id, $contract_id, $vertical_id, $status, $start, $limit);
    }

    /**
     * Operation leadDistributionContractsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  int $vertical_id (optional)
     * @param  string $status (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetAlldoWithHttpInfo($advertiser_id = null, $contract_id = null, $vertical_id = null, $status = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetAlldoRequest($advertiser_id, $contract_id, $vertical_id, $status, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetAlldoAsync
     *
     * Get All
     *
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  int $vertical_id (optional)
     * @param  string $status (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetAlldoAsync($advertiser_id = null, $contract_id = null, $vertical_id = null, $status = null, $start = null, $limit = null)
    {
        return $this->leadDistributionContractsgetAlldoAsyncWithHttpInfo($advertiser_id, $contract_id, $vertical_id, $status, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  int $vertical_id (optional)
     * @param  string $status (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetAlldoAsyncWithHttpInfo($advertiser_id = null, $contract_id = null, $vertical_id = null, $status = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetAlldoRequest($advertiser_id, $contract_id, $vertical_id, $status, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetAlldo'
     *
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  int $vertical_id (optional)
     * @param  string $status (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetAlldoRequest($advertiser_id = null, $contract_id = null, $vertical_id = null, $status = null, $start = null, $limit = null)
    {

        $resourcePath = '/leadDistributionContracts/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetBasicInfodo
     *
     * Get Basic Info
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetBasicInfodo($contract_id)
    {
        $this->leadDistributionContractsgetBasicInfodoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsgetBasicInfodoWithHttpInfo
     *
     * Get Basic Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetBasicInfodoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetBasicInfodoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetBasicInfodoAsync
     *
     * Get Basic Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetBasicInfodoAsync($contract_id)
    {
        return $this->leadDistributionContractsgetBasicInfodoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetBasicInfodoAsyncWithHttpInfo
     *
     * Get Basic Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetBasicInfodoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetBasicInfodoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetBasicInfodo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetBasicInfodoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsgetBasicInfodo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getBasicInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetDuplicatesSettingsdo
     *
     * Get Duplicates Settings
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetDuplicatesSettingsdo($contract_id)
    {
        $this->leadDistributionContractsgetDuplicatesSettingsdoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsgetDuplicatesSettingsdoWithHttpInfo
     *
     * Get Duplicates Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetDuplicatesSettingsdoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetDuplicatesSettingsdoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetDuplicatesSettingsdoAsync
     *
     * Get Duplicates Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetDuplicatesSettingsdoAsync($contract_id)
    {
        return $this->leadDistributionContractsgetDuplicatesSettingsdoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetDuplicatesSettingsdoAsyncWithHttpInfo
     *
     * Get Duplicates Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetDuplicatesSettingsdoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetDuplicatesSettingsdoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetDuplicatesSettingsdo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetDuplicatesSettingsdoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsgetDuplicatesSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getDuplicatesSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetFiltersdo
     *
     * Get Filters
     *
     * @param  int $contract_id contract_id (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetFiltersdo($contract_id = null, $start = null, $limit = null)
    {
        $this->leadDistributionContractsgetFiltersdoWithHttpInfo($contract_id, $start, $limit);
    }

    /**
     * Operation leadDistributionContractsgetFiltersdoWithHttpInfo
     *
     * Get Filters
     *
     * @param  int $contract_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetFiltersdoWithHttpInfo($contract_id = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetFiltersdoRequest($contract_id, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetFiltersdoAsync
     *
     * Get Filters
     *
     * @param  int $contract_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetFiltersdoAsync($contract_id = null, $start = null, $limit = null)
    {
        return $this->leadDistributionContractsgetFiltersdoAsyncWithHttpInfo($contract_id, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetFiltersdoAsyncWithHttpInfo
     *
     * Get Filters
     *
     * @param  int $contract_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetFiltersdoAsyncWithHttpInfo($contract_id = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetFiltersdoRequest($contract_id, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetFiltersdo'
     *
     * @param  int $contract_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetFiltersdoRequest($contract_id = null, $start = null, $limit = null)
    {

        $resourcePath = '/leadDistributionContracts/getFilters.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetLeadsCapInfodo
     *
     * Get Leads Cap Info
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetLeadsCapInfodo($contract_id)
    {
        $this->leadDistributionContractsgetLeadsCapInfodoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsgetLeadsCapInfodoWithHttpInfo
     *
     * Get Leads Cap Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetLeadsCapInfodoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetLeadsCapInfodoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetLeadsCapInfodoAsync
     *
     * Get Leads Cap Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetLeadsCapInfodoAsync($contract_id)
    {
        return $this->leadDistributionContractsgetLeadsCapInfodoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetLeadsCapInfodoAsyncWithHttpInfo
     *
     * Get Leads Cap Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetLeadsCapInfodoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetLeadsCapInfodoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetLeadsCapInfodo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetLeadsCapInfodoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsgetLeadsCapInfodo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getLeadsCapInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetLeadsSettingsdo
     *
     * Get Leads Settings
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetLeadsSettingsdo($contract_id)
    {
        $this->leadDistributionContractsgetLeadsSettingsdoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsgetLeadsSettingsdoWithHttpInfo
     *
     * Get Leads Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetLeadsSettingsdoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetLeadsSettingsdoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetLeadsSettingsdoAsync
     *
     * Get Leads Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetLeadsSettingsdoAsync($contract_id)
    {
        return $this->leadDistributionContractsgetLeadsSettingsdoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetLeadsSettingsdoAsyncWithHttpInfo
     *
     * Get Leads Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetLeadsSettingsdoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetLeadsSettingsdoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetLeadsSettingsdo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetLeadsSettingsdoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsgetLeadsSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getLeadsSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetPortalSettingsdo
     *
     * Get Portal Settings
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetPortalSettingsdo($contract_id)
    {
        $this->leadDistributionContractsgetPortalSettingsdoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsgetPortalSettingsdoWithHttpInfo
     *
     * Get Portal Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetPortalSettingsdoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetPortalSettingsdoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetPortalSettingsdoAsync
     *
     * Get Portal Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetPortalSettingsdoAsync($contract_id)
    {
        return $this->leadDistributionContractsgetPortalSettingsdoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetPortalSettingsdoAsyncWithHttpInfo
     *
     * Get Portal Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetPortalSettingsdoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetPortalSettingsdoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetPortalSettingsdo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetPortalSettingsdoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsgetPortalSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getPortalSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetReturnsSettingsdo
     *
     * Get Returns Settings
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetReturnsSettingsdo($contract_id)
    {
        $this->leadDistributionContractsgetReturnsSettingsdoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsgetReturnsSettingsdoWithHttpInfo
     *
     * Get Returns Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetReturnsSettingsdoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetReturnsSettingsdoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetReturnsSettingsdoAsync
     *
     * Get Returns Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetReturnsSettingsdoAsync($contract_id)
    {
        return $this->leadDistributionContractsgetReturnsSettingsdoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetReturnsSettingsdoAsyncWithHttpInfo
     *
     * Get Returns Settings
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetReturnsSettingsdoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetReturnsSettingsdoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetReturnsSettingsdo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetReturnsSettingsdoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsgetReturnsSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getReturnsSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetRevenueCapInfodo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetRevenueCapInfodo($contract_id)
    {
        $this->leadDistributionContractsgetRevenueCapInfodoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsgetRevenueCapInfodoWithHttpInfo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetRevenueCapInfodoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetRevenueCapInfodoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetRevenueCapInfodoAsync
     *
     * Get Revenue Cap Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetRevenueCapInfodoAsync($contract_id)
    {
        return $this->leadDistributionContractsgetRevenueCapInfodoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetRevenueCapInfodoAsyncWithHttpInfo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetRevenueCapInfodoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetRevenueCapInfodoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetRevenueCapInfodo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetRevenueCapInfodoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsgetRevenueCapInfodo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getRevenueCapInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetScheduledPausedo
     *
     * Get Scheduled Pause
     *
     * @param  int $contract_id contract_id (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetScheduledPausedo($contract_id = null, $start = null, $limit = null)
    {
        $this->leadDistributionContractsgetScheduledPausedoWithHttpInfo($contract_id, $start, $limit);
    }

    /**
     * Operation leadDistributionContractsgetScheduledPausedoWithHttpInfo
     *
     * Get Scheduled Pause
     *
     * @param  int $contract_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetScheduledPausedoWithHttpInfo($contract_id = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetScheduledPausedoRequest($contract_id, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetScheduledPausedoAsync
     *
     * Get Scheduled Pause
     *
     * @param  int $contract_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetScheduledPausedoAsync($contract_id = null, $start = null, $limit = null)
    {
        return $this->leadDistributionContractsgetScheduledPausedoAsyncWithHttpInfo($contract_id, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetScheduledPausedoAsyncWithHttpInfo
     *
     * Get Scheduled Pause
     *
     * @param  int $contract_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetScheduledPausedoAsyncWithHttpInfo($contract_id = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetScheduledPausedoRequest($contract_id, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetScheduledPausedo'
     *
     * @param  int $contract_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetScheduledPausedoRequest($contract_id = null, $start = null, $limit = null)
    {

        $resourcePath = '/leadDistributionContracts/getScheduledPause.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetScheduledo
     *
     * Get Schedule
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsgetScheduledo($contract_id, $start = null, $limit = null)
    {
        $this->leadDistributionContractsgetScheduledoWithHttpInfo($contract_id, $start, $limit);
    }

    /**
     * Operation leadDistributionContractsgetScheduledoWithHttpInfo
     *
     * Get Schedule
     *
     * @param  int $contract_id (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetScheduledoWithHttpInfo($contract_id, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetScheduledoRequest($contract_id, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetScheduledoAsync
     *
     * Get Schedule
     *
     * @param  int $contract_id (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetScheduledoAsync($contract_id, $start = null, $limit = null)
    {
        return $this->leadDistributionContractsgetScheduledoAsyncWithHttpInfo($contract_id, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetScheduledoAsyncWithHttpInfo
     *
     * Get Schedule
     *
     * @param  int $contract_id (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetScheduledoAsyncWithHttpInfo($contract_id, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsgetScheduledoRequest($contract_id, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetScheduledo'
     *
     * @param  int $contract_id (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetScheduledoRequest($contract_id, $start = null, $limit = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsgetScheduledo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getSchedule.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsremoveExpirationDatedo
     *
     * Remove Expiration Date
     *
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsremoveExpirationDatedo($contract_id)
    {
        $this->leadDistributionContractsremoveExpirationDatedoWithHttpInfo($contract_id);
    }

    /**
     * Operation leadDistributionContractsremoveExpirationDatedoWithHttpInfo
     *
     * Remove Expiration Date
     *
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsremoveExpirationDatedoWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsremoveExpirationDatedoRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsremoveExpirationDatedoAsync
     *
     * Remove Expiration Date
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsremoveExpirationDatedoAsync($contract_id)
    {
        return $this->leadDistributionContractsremoveExpirationDatedoAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsremoveExpirationDatedoAsyncWithHttpInfo
     *
     * Remove Expiration Date
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsremoveExpirationDatedoAsyncWithHttpInfo($contract_id)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsremoveExpirationDatedoRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsremoveExpirationDatedo'
     *
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsremoveExpirationDatedoRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsremoveExpirationDatedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/removeExpirationDate.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsrenamedo
     *
     * Rename
     *
     * @param  int $contract_id contract_id (required)
     * @param  string $contract_name contract_name (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsrenamedo($contract_id, $contract_name)
    {
        $this->leadDistributionContractsrenamedoWithHttpInfo($contract_id, $contract_name);
    }

    /**
     * Operation leadDistributionContractsrenamedoWithHttpInfo
     *
     * Rename
     *
     * @param  int $contract_id (required)
     * @param  string $contract_name (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsrenamedoWithHttpInfo($contract_id, $contract_name)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsrenamedoRequest($contract_id, $contract_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsrenamedoAsync
     *
     * Rename
     *
     * @param  int $contract_id (required)
     * @param  string $contract_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsrenamedoAsync($contract_id, $contract_name)
    {
        return $this->leadDistributionContractsrenamedoAsyncWithHttpInfo($contract_id, $contract_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsrenamedoAsyncWithHttpInfo
     *
     * Rename
     *
     * @param  int $contract_id (required)
     * @param  string $contract_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsrenamedoAsyncWithHttpInfo($contract_id, $contract_name)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsrenamedoRequest($contract_id, $contract_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsrenamedo'
     *
     * @param  int $contract_id (required)
     * @param  string $contract_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsrenamedoRequest($contract_id, $contract_name)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsrenamedo'
            );
        }
        // verify the required parameter 'contract_name' is set
        if ($contract_name === null || (is_array($contract_name) && count($contract_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_name when calling leadDistributionContractsrenamedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/rename.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($contract_name !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contract_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsschedulePausedo
     *
     * Schedule Pause
     *
     * @param  int $contract_id contract_id (required)
     * @param  \DateTime $pause_date pause_date (required)
     * @param  \DateTime $resume_date resume_date (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsschedulePausedo($contract_id, $pause_date, $resume_date)
    {
        $this->leadDistributionContractsschedulePausedoWithHttpInfo($contract_id, $pause_date, $resume_date);
    }

    /**
     * Operation leadDistributionContractsschedulePausedoWithHttpInfo
     *
     * Schedule Pause
     *
     * @param  int $contract_id (required)
     * @param  \DateTime $pause_date (required)
     * @param  \DateTime $resume_date (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsschedulePausedoWithHttpInfo($contract_id, $pause_date, $resume_date)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsschedulePausedoRequest($contract_id, $pause_date, $resume_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsschedulePausedoAsync
     *
     * Schedule Pause
     *
     * @param  int $contract_id (required)
     * @param  \DateTime $pause_date (required)
     * @param  \DateTime $resume_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsschedulePausedoAsync($contract_id, $pause_date, $resume_date)
    {
        return $this->leadDistributionContractsschedulePausedoAsyncWithHttpInfo($contract_id, $pause_date, $resume_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsschedulePausedoAsyncWithHttpInfo
     *
     * Schedule Pause
     *
     * @param  int $contract_id (required)
     * @param  \DateTime $pause_date (required)
     * @param  \DateTime $resume_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsschedulePausedoAsyncWithHttpInfo($contract_id, $pause_date, $resume_date)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsschedulePausedoRequest($contract_id, $pause_date, $resume_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsschedulePausedo'
     *
     * @param  int $contract_id (required)
     * @param  \DateTime $pause_date (required)
     * @param  \DateTime $resume_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsschedulePausedoRequest($contract_id, $pause_date, $resume_date)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsschedulePausedo'
            );
        }
        // verify the required parameter 'pause_date' is set
        if ($pause_date === null || (is_array($pause_date) && count($pause_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pause_date when calling leadDistributionContractsschedulePausedo'
            );
        }
        // verify the required parameter 'resume_date' is set
        if ($resume_date === null || (is_array($resume_date) && count($resume_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resume_date when calling leadDistributionContractsschedulePausedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/schedulePause.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($pause_date !== null) {
            $queryParams['pauseDate'] = ObjectSerializer::toQueryValue($pause_date);
        }
        // query params
        if ($resume_date !== null) {
            $queryParams['resumeDate'] = ObjectSerializer::toQueryValue($resume_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractssetExpirationDatedo
     *
     * Set Expiration Date
     *
     * @param  int $contract_id contract_id (required)
     * @param  \DateTime $expiration_date expiration_date (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractssetExpirationDatedo($contract_id, $expiration_date)
    {
        $this->leadDistributionContractssetExpirationDatedoWithHttpInfo($contract_id, $expiration_date);
    }

    /**
     * Operation leadDistributionContractssetExpirationDatedoWithHttpInfo
     *
     * Set Expiration Date
     *
     * @param  int $contract_id (required)
     * @param  \DateTime $expiration_date (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractssetExpirationDatedoWithHttpInfo($contract_id, $expiration_date)
    {
        $returnType = '';
        $request = $this->leadDistributionContractssetExpirationDatedoRequest($contract_id, $expiration_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractssetExpirationDatedoAsync
     *
     * Set Expiration Date
     *
     * @param  int $contract_id (required)
     * @param  \DateTime $expiration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractssetExpirationDatedoAsync($contract_id, $expiration_date)
    {
        return $this->leadDistributionContractssetExpirationDatedoAsyncWithHttpInfo($contract_id, $expiration_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractssetExpirationDatedoAsyncWithHttpInfo
     *
     * Set Expiration Date
     *
     * @param  int $contract_id (required)
     * @param  \DateTime $expiration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractssetExpirationDatedoAsyncWithHttpInfo($contract_id, $expiration_date)
    {
        $returnType = '';
        $request = $this->leadDistributionContractssetExpirationDatedoRequest($contract_id, $expiration_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractssetExpirationDatedo'
     *
     * @param  int $contract_id (required)
     * @param  \DateTime $expiration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractssetExpirationDatedoRequest($contract_id, $expiration_date)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractssetExpirationDatedo'
            );
        }
        // verify the required parameter 'expiration_date' is set
        if ($expiration_date === null || (is_array($expiration_date) && count($expiration_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expiration_date when calling leadDistributionContractssetExpirationDatedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/setExpirationDate.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($expiration_date !== null) {
            $queryParams['expirationDate'] = ObjectSerializer::toQueryValue($expiration_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractssetPricedo
     *
     * Set Price
     *
     * @param  int $contract_id contract_id (required)
     * @param  BigDecimal $price price (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractssetPricedo($contract_id, $price)
    {
        $this->leadDistributionContractssetPricedoWithHttpInfo($contract_id, $price);
    }

    /**
     * Operation leadDistributionContractssetPricedoWithHttpInfo
     *
     * Set Price
     *
     * @param  int $contract_id (required)
     * @param  BigDecimal $price (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractssetPricedoWithHttpInfo($contract_id, $price)
    {
        $returnType = '';
        $request = $this->leadDistributionContractssetPricedoRequest($contract_id, $price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractssetPricedoAsync
     *
     * Set Price
     *
     * @param  int $contract_id (required)
     * @param  BigDecimal $price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractssetPricedoAsync($contract_id, $price)
    {
        return $this->leadDistributionContractssetPricedoAsyncWithHttpInfo($contract_id, $price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractssetPricedoAsyncWithHttpInfo
     *
     * Set Price
     *
     * @param  int $contract_id (required)
     * @param  BigDecimal $price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractssetPricedoAsyncWithHttpInfo($contract_id, $price)
    {
        $returnType = '';
        $request = $this->leadDistributionContractssetPricedoRequest($contract_id, $price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractssetPricedo'
     *
     * @param  int $contract_id (required)
     * @param  BigDecimal $price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractssetPricedoRequest($contract_id, $price)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractssetPricedo'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling leadDistributionContractssetPricedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/setPrice.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateBasicInfodo
     *
     * Update Basic Info
     *
     * @param  int $contract_id contract_id (required)
     * @param  string $contract_name contract_name (optional)
     * @param  string $alternative_id alternative_id (optional)
     * @param  string $notes notes (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdateBasicInfodo($contract_id, $contract_name = null, $alternative_id = null, $notes = null)
    {
        $this->leadDistributionContractsupdateBasicInfodoWithHttpInfo($contract_id, $contract_name, $alternative_id, $notes);
    }

    /**
     * Operation leadDistributionContractsupdateBasicInfodoWithHttpInfo
     *
     * Update Basic Info
     *
     * @param  int $contract_id (required)
     * @param  string $contract_name (optional)
     * @param  string $alternative_id (optional)
     * @param  string $notes (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateBasicInfodoWithHttpInfo($contract_id, $contract_name = null, $alternative_id = null, $notes = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateBasicInfodoRequest($contract_id, $contract_name, $alternative_id, $notes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateBasicInfodoAsync
     *
     * Update Basic Info
     *
     * @param  int $contract_id (required)
     * @param  string $contract_name (optional)
     * @param  string $alternative_id (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateBasicInfodoAsync($contract_id, $contract_name = null, $alternative_id = null, $notes = null)
    {
        return $this->leadDistributionContractsupdateBasicInfodoAsyncWithHttpInfo($contract_id, $contract_name, $alternative_id, $notes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateBasicInfodoAsyncWithHttpInfo
     *
     * Update Basic Info
     *
     * @param  int $contract_id (required)
     * @param  string $contract_name (optional)
     * @param  string $alternative_id (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateBasicInfodoAsyncWithHttpInfo($contract_id, $contract_name = null, $alternative_id = null, $notes = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateBasicInfodoRequest($contract_id, $contract_name, $alternative_id, $notes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateBasicInfodo'
     *
     * @param  int $contract_id (required)
     * @param  string $contract_name (optional)
     * @param  string $alternative_id (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateBasicInfodoRequest($contract_id, $contract_name = null, $alternative_id = null, $notes = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsupdateBasicInfodo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateBasicInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($contract_name !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contract_name);
        }
        // query params
        if ($alternative_id !== null) {
            $queryParams['alternativeID'] = ObjectSerializer::toQueryValue($alternative_id);
        }
        // query params
        if ($notes !== null) {
            $queryParams['notes'] = ObjectSerializer::toQueryValue($notes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateDistributionPrioritydo
     *
     * Update Distribution Priority
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $offer_id offer_id (required)
     * @param  int $priority priority (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdateDistributionPrioritydo($contract_id, $offer_id, $priority = null)
    {
        $this->leadDistributionContractsupdateDistributionPrioritydoWithHttpInfo($contract_id, $offer_id, $priority);
    }

    /**
     * Operation leadDistributionContractsupdateDistributionPrioritydoWithHttpInfo
     *
     * Update Distribution Priority
     *
     * @param  int $contract_id (required)
     * @param  int $offer_id (required)
     * @param  int $priority (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateDistributionPrioritydoWithHttpInfo($contract_id, $offer_id, $priority = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateDistributionPrioritydoRequest($contract_id, $offer_id, $priority);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateDistributionPrioritydoAsync
     *
     * Update Distribution Priority
     *
     * @param  int $contract_id (required)
     * @param  int $offer_id (required)
     * @param  int $priority (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateDistributionPrioritydoAsync($contract_id, $offer_id, $priority = null)
    {
        return $this->leadDistributionContractsupdateDistributionPrioritydoAsyncWithHttpInfo($contract_id, $offer_id, $priority)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateDistributionPrioritydoAsyncWithHttpInfo
     *
     * Update Distribution Priority
     *
     * @param  int $contract_id (required)
     * @param  int $offer_id (required)
     * @param  int $priority (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateDistributionPrioritydoAsyncWithHttpInfo($contract_id, $offer_id, $priority = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateDistributionPrioritydoRequest($contract_id, $offer_id, $priority);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateDistributionPrioritydo'
     *
     * @param  int $contract_id (required)
     * @param  int $offer_id (required)
     * @param  int $priority (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateDistributionPrioritydoRequest($contract_id, $offer_id, $priority = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsupdateDistributionPrioritydo'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling leadDistributionContractsupdateDistributionPrioritydo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateDistributionPriority.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateDuplicatesSettingsdo
     *
     * Update Duplicates Settings
     *
     * @param  int $contract_id contract_id (required)
     * @param  string $enable_duplicate_check enable_duplicate_check (optional)
     * @param  int $number_of_days number_of_days (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdateDuplicatesSettingsdo($contract_id, $enable_duplicate_check = null, $number_of_days = null)
    {
        $this->leadDistributionContractsupdateDuplicatesSettingsdoWithHttpInfo($contract_id, $enable_duplicate_check, $number_of_days);
    }

    /**
     * Operation leadDistributionContractsupdateDuplicatesSettingsdoWithHttpInfo
     *
     * Update Duplicates Settings
     *
     * @param  int $contract_id (required)
     * @param  string $enable_duplicate_check (optional)
     * @param  int $number_of_days (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateDuplicatesSettingsdoWithHttpInfo($contract_id, $enable_duplicate_check = null, $number_of_days = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateDuplicatesSettingsdoRequest($contract_id, $enable_duplicate_check, $number_of_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateDuplicatesSettingsdoAsync
     *
     * Update Duplicates Settings
     *
     * @param  int $contract_id (required)
     * @param  string $enable_duplicate_check (optional)
     * @param  int $number_of_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateDuplicatesSettingsdoAsync($contract_id, $enable_duplicate_check = null, $number_of_days = null)
    {
        return $this->leadDistributionContractsupdateDuplicatesSettingsdoAsyncWithHttpInfo($contract_id, $enable_duplicate_check, $number_of_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateDuplicatesSettingsdoAsyncWithHttpInfo
     *
     * Update Duplicates Settings
     *
     * @param  int $contract_id (required)
     * @param  string $enable_duplicate_check (optional)
     * @param  int $number_of_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateDuplicatesSettingsdoAsyncWithHttpInfo($contract_id, $enable_duplicate_check = null, $number_of_days = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateDuplicatesSettingsdoRequest($contract_id, $enable_duplicate_check, $number_of_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateDuplicatesSettingsdo'
     *
     * @param  int $contract_id (required)
     * @param  string $enable_duplicate_check (optional)
     * @param  int $number_of_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateDuplicatesSettingsdoRequest($contract_id, $enable_duplicate_check = null, $number_of_days = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsupdateDuplicatesSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateDuplicatesSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($enable_duplicate_check !== null) {
            $queryParams['enableDuplicateCheck'] = ObjectSerializer::toQueryValue($enable_duplicate_check);
        }
        // query params
        if ($number_of_days !== null) {
            $queryParams['numberOfDays'] = ObjectSerializer::toQueryValue($number_of_days);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateLeadsCapdo
     *
     * Update Leads Cap
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $hourly_leads_cap hourly_leads_cap (optional)
     * @param  int $daily_leads_cap daily_leads_cap (optional)
     * @param  int $weekly_leads_cap weekly_leads_cap (optional)
     * @param  int $monthly_leads_cap monthly_leads_cap (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdateLeadsCapdo($contract_id, $hourly_leads_cap = null, $daily_leads_cap = null, $weekly_leads_cap = null, $monthly_leads_cap = null)
    {
        $this->leadDistributionContractsupdateLeadsCapdoWithHttpInfo($contract_id, $hourly_leads_cap, $daily_leads_cap, $weekly_leads_cap, $monthly_leads_cap);
    }

    /**
     * Operation leadDistributionContractsupdateLeadsCapdoWithHttpInfo
     *
     * Update Leads Cap
     *
     * @param  int $contract_id (required)
     * @param  int $hourly_leads_cap (optional)
     * @param  int $daily_leads_cap (optional)
     * @param  int $weekly_leads_cap (optional)
     * @param  int $monthly_leads_cap (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateLeadsCapdoWithHttpInfo($contract_id, $hourly_leads_cap = null, $daily_leads_cap = null, $weekly_leads_cap = null, $monthly_leads_cap = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateLeadsCapdoRequest($contract_id, $hourly_leads_cap, $daily_leads_cap, $weekly_leads_cap, $monthly_leads_cap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateLeadsCapdoAsync
     *
     * Update Leads Cap
     *
     * @param  int $contract_id (required)
     * @param  int $hourly_leads_cap (optional)
     * @param  int $daily_leads_cap (optional)
     * @param  int $weekly_leads_cap (optional)
     * @param  int $monthly_leads_cap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateLeadsCapdoAsync($contract_id, $hourly_leads_cap = null, $daily_leads_cap = null, $weekly_leads_cap = null, $monthly_leads_cap = null)
    {
        return $this->leadDistributionContractsupdateLeadsCapdoAsyncWithHttpInfo($contract_id, $hourly_leads_cap, $daily_leads_cap, $weekly_leads_cap, $monthly_leads_cap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateLeadsCapdoAsyncWithHttpInfo
     *
     * Update Leads Cap
     *
     * @param  int $contract_id (required)
     * @param  int $hourly_leads_cap (optional)
     * @param  int $daily_leads_cap (optional)
     * @param  int $weekly_leads_cap (optional)
     * @param  int $monthly_leads_cap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateLeadsCapdoAsyncWithHttpInfo($contract_id, $hourly_leads_cap = null, $daily_leads_cap = null, $weekly_leads_cap = null, $monthly_leads_cap = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateLeadsCapdoRequest($contract_id, $hourly_leads_cap, $daily_leads_cap, $weekly_leads_cap, $monthly_leads_cap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateLeadsCapdo'
     *
     * @param  int $contract_id (required)
     * @param  int $hourly_leads_cap (optional)
     * @param  int $daily_leads_cap (optional)
     * @param  int $weekly_leads_cap (optional)
     * @param  int $monthly_leads_cap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateLeadsCapdoRequest($contract_id, $hourly_leads_cap = null, $daily_leads_cap = null, $weekly_leads_cap = null, $monthly_leads_cap = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsupdateLeadsCapdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateLeadsCap.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($hourly_leads_cap !== null) {
            $queryParams['hourlyLeadsCap'] = ObjectSerializer::toQueryValue($hourly_leads_cap);
        }
        // query params
        if ($daily_leads_cap !== null) {
            $queryParams['dailyLeadsCap'] = ObjectSerializer::toQueryValue($daily_leads_cap);
        }
        // query params
        if ($weekly_leads_cap !== null) {
            $queryParams['weeklyLeadsCap'] = ObjectSerializer::toQueryValue($weekly_leads_cap);
        }
        // query params
        if ($monthly_leads_cap !== null) {
            $queryParams['monthlyLeadsCap'] = ObjectSerializer::toQueryValue($monthly_leads_cap);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateLeadsSettingsdo
     *
     * Update Leads Settings
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $minimum_lead_age minimum_lead_age (optional)
     * @param  int $maximum_lead_age maximum_lead_age (optional)
     * @param  int $maximum_post_errors maximum_post_errors (optional)
     * @param  int $time_leads_posts time_leads_posts (optional)
     * @param  string $allow_queue_leads allow_queue_leads (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdateLeadsSettingsdo($contract_id, $minimum_lead_age = null, $maximum_lead_age = null, $maximum_post_errors = null, $time_leads_posts = null, $allow_queue_leads = null)
    {
        $this->leadDistributionContractsupdateLeadsSettingsdoWithHttpInfo($contract_id, $minimum_lead_age, $maximum_lead_age, $maximum_post_errors, $time_leads_posts, $allow_queue_leads);
    }

    /**
     * Operation leadDistributionContractsupdateLeadsSettingsdoWithHttpInfo
     *
     * Update Leads Settings
     *
     * @param  int $contract_id (required)
     * @param  int $minimum_lead_age (optional)
     * @param  int $maximum_lead_age (optional)
     * @param  int $maximum_post_errors (optional)
     * @param  int $time_leads_posts (optional)
     * @param  string $allow_queue_leads (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateLeadsSettingsdoWithHttpInfo($contract_id, $minimum_lead_age = null, $maximum_lead_age = null, $maximum_post_errors = null, $time_leads_posts = null, $allow_queue_leads = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateLeadsSettingsdoRequest($contract_id, $minimum_lead_age, $maximum_lead_age, $maximum_post_errors, $time_leads_posts, $allow_queue_leads);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateLeadsSettingsdoAsync
     *
     * Update Leads Settings
     *
     * @param  int $contract_id (required)
     * @param  int $minimum_lead_age (optional)
     * @param  int $maximum_lead_age (optional)
     * @param  int $maximum_post_errors (optional)
     * @param  int $time_leads_posts (optional)
     * @param  string $allow_queue_leads (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateLeadsSettingsdoAsync($contract_id, $minimum_lead_age = null, $maximum_lead_age = null, $maximum_post_errors = null, $time_leads_posts = null, $allow_queue_leads = null)
    {
        return $this->leadDistributionContractsupdateLeadsSettingsdoAsyncWithHttpInfo($contract_id, $minimum_lead_age, $maximum_lead_age, $maximum_post_errors, $time_leads_posts, $allow_queue_leads)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateLeadsSettingsdoAsyncWithHttpInfo
     *
     * Update Leads Settings
     *
     * @param  int $contract_id (required)
     * @param  int $minimum_lead_age (optional)
     * @param  int $maximum_lead_age (optional)
     * @param  int $maximum_post_errors (optional)
     * @param  int $time_leads_posts (optional)
     * @param  string $allow_queue_leads (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateLeadsSettingsdoAsyncWithHttpInfo($contract_id, $minimum_lead_age = null, $maximum_lead_age = null, $maximum_post_errors = null, $time_leads_posts = null, $allow_queue_leads = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateLeadsSettingsdoRequest($contract_id, $minimum_lead_age, $maximum_lead_age, $maximum_post_errors, $time_leads_posts, $allow_queue_leads);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateLeadsSettingsdo'
     *
     * @param  int $contract_id (required)
     * @param  int $minimum_lead_age (optional)
     * @param  int $maximum_lead_age (optional)
     * @param  int $maximum_post_errors (optional)
     * @param  int $time_leads_posts (optional)
     * @param  string $allow_queue_leads (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateLeadsSettingsdoRequest($contract_id, $minimum_lead_age = null, $maximum_lead_age = null, $maximum_post_errors = null, $time_leads_posts = null, $allow_queue_leads = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsupdateLeadsSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateLeadsSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($minimum_lead_age !== null) {
            $queryParams['minimumLeadAge'] = ObjectSerializer::toQueryValue($minimum_lead_age);
        }
        // query params
        if ($maximum_lead_age !== null) {
            $queryParams['maximumLeadAge'] = ObjectSerializer::toQueryValue($maximum_lead_age);
        }
        // query params
        if ($maximum_post_errors !== null) {
            $queryParams['maximumPostErrors'] = ObjectSerializer::toQueryValue($maximum_post_errors);
        }
        // query params
        if ($time_leads_posts !== null) {
            $queryParams['timeLeadsPosts'] = ObjectSerializer::toQueryValue($time_leads_posts);
        }
        // query params
        if ($allow_queue_leads !== null) {
            $queryParams['allowQueueLeads'] = ObjectSerializer::toQueryValue($allow_queue_leads);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdatePortalSettingsdo
     *
     * Update Portal Settings
     *
     * @param  int $contract_id contract_id (required)
     * @param  string $show_status show_status (optional)
     * @param  string $show_lead_data show_lead_data (optional)
     * @param  string $show_schedule show_schedule (optional)
     * @param  string $show_caps show_caps (optional)
     * @param  string $show_return_settings show_return_settings (optional)
     * @param  string $allow_status_pause allow_status_pause (optional)
     * @param  string $allow_update_schedule allow_update_schedule (optional)
     * @param  string $allow_manage_caps allow_manage_caps (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdatePortalSettingsdo($contract_id, $show_status = null, $show_lead_data = null, $show_schedule = null, $show_caps = null, $show_return_settings = null, $allow_status_pause = null, $allow_update_schedule = null, $allow_manage_caps = null)
    {
        $this->leadDistributionContractsupdatePortalSettingsdoWithHttpInfo($contract_id, $show_status, $show_lead_data, $show_schedule, $show_caps, $show_return_settings, $allow_status_pause, $allow_update_schedule, $allow_manage_caps);
    }

    /**
     * Operation leadDistributionContractsupdatePortalSettingsdoWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  int $contract_id (required)
     * @param  string $show_status (optional)
     * @param  string $show_lead_data (optional)
     * @param  string $show_schedule (optional)
     * @param  string $show_caps (optional)
     * @param  string $show_return_settings (optional)
     * @param  string $allow_status_pause (optional)
     * @param  string $allow_update_schedule (optional)
     * @param  string $allow_manage_caps (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdatePortalSettingsdoWithHttpInfo($contract_id, $show_status = null, $show_lead_data = null, $show_schedule = null, $show_caps = null, $show_return_settings = null, $allow_status_pause = null, $allow_update_schedule = null, $allow_manage_caps = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdatePortalSettingsdoRequest($contract_id, $show_status, $show_lead_data, $show_schedule, $show_caps, $show_return_settings, $allow_status_pause, $allow_update_schedule, $allow_manage_caps);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdatePortalSettingsdoAsync
     *
     * Update Portal Settings
     *
     * @param  int $contract_id (required)
     * @param  string $show_status (optional)
     * @param  string $show_lead_data (optional)
     * @param  string $show_schedule (optional)
     * @param  string $show_caps (optional)
     * @param  string $show_return_settings (optional)
     * @param  string $allow_status_pause (optional)
     * @param  string $allow_update_schedule (optional)
     * @param  string $allow_manage_caps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdatePortalSettingsdoAsync($contract_id, $show_status = null, $show_lead_data = null, $show_schedule = null, $show_caps = null, $show_return_settings = null, $allow_status_pause = null, $allow_update_schedule = null, $allow_manage_caps = null)
    {
        return $this->leadDistributionContractsupdatePortalSettingsdoAsyncWithHttpInfo($contract_id, $show_status, $show_lead_data, $show_schedule, $show_caps, $show_return_settings, $allow_status_pause, $allow_update_schedule, $allow_manage_caps)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdatePortalSettingsdoAsyncWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  int $contract_id (required)
     * @param  string $show_status (optional)
     * @param  string $show_lead_data (optional)
     * @param  string $show_schedule (optional)
     * @param  string $show_caps (optional)
     * @param  string $show_return_settings (optional)
     * @param  string $allow_status_pause (optional)
     * @param  string $allow_update_schedule (optional)
     * @param  string $allow_manage_caps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdatePortalSettingsdoAsyncWithHttpInfo($contract_id, $show_status = null, $show_lead_data = null, $show_schedule = null, $show_caps = null, $show_return_settings = null, $allow_status_pause = null, $allow_update_schedule = null, $allow_manage_caps = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdatePortalSettingsdoRequest($contract_id, $show_status, $show_lead_data, $show_schedule, $show_caps, $show_return_settings, $allow_status_pause, $allow_update_schedule, $allow_manage_caps);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdatePortalSettingsdo'
     *
     * @param  int $contract_id (required)
     * @param  string $show_status (optional)
     * @param  string $show_lead_data (optional)
     * @param  string $show_schedule (optional)
     * @param  string $show_caps (optional)
     * @param  string $show_return_settings (optional)
     * @param  string $allow_status_pause (optional)
     * @param  string $allow_update_schedule (optional)
     * @param  string $allow_manage_caps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdatePortalSettingsdoRequest($contract_id, $show_status = null, $show_lead_data = null, $show_schedule = null, $show_caps = null, $show_return_settings = null, $allow_status_pause = null, $allow_update_schedule = null, $allow_manage_caps = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsupdatePortalSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updatePortalSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($show_status !== null) {
            $queryParams['showStatus'] = ObjectSerializer::toQueryValue($show_status);
        }
        // query params
        if ($show_lead_data !== null) {
            $queryParams['showLeadData'] = ObjectSerializer::toQueryValue($show_lead_data);
        }
        // query params
        if ($show_schedule !== null) {
            $queryParams['showSchedule'] = ObjectSerializer::toQueryValue($show_schedule);
        }
        // query params
        if ($show_caps !== null) {
            $queryParams['showCaps'] = ObjectSerializer::toQueryValue($show_caps);
        }
        // query params
        if ($show_return_settings !== null) {
            $queryParams['showReturnSettings'] = ObjectSerializer::toQueryValue($show_return_settings);
        }
        // query params
        if ($allow_status_pause !== null) {
            $queryParams['allowStatusPause'] = ObjectSerializer::toQueryValue($allow_status_pause);
        }
        // query params
        if ($allow_update_schedule !== null) {
            $queryParams['allowUpdateSchedule'] = ObjectSerializer::toQueryValue($allow_update_schedule);
        }
        // query params
        if ($allow_manage_caps !== null) {
            $queryParams['allowManageCaps'] = ObjectSerializer::toQueryValue($allow_manage_caps);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateReturnsSettingsdo
     *
     * Update Returns Settings
     *
     * @param  int $contract_id contract_id (required)
     * @param  string $allow_returns allow_returns (optional)
     * @param  string $auto_approve_returns auto_approve_returns (optional)
     * @param  string $replace_returns replace_returns (optional)
     * @param  string $replacement_non_returnable replacement_non_returnable (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdateReturnsSettingsdo($contract_id, $allow_returns = null, $auto_approve_returns = null, $replace_returns = null, $replacement_non_returnable = null)
    {
        $this->leadDistributionContractsupdateReturnsSettingsdoWithHttpInfo($contract_id, $allow_returns, $auto_approve_returns, $replace_returns, $replacement_non_returnable);
    }

    /**
     * Operation leadDistributionContractsupdateReturnsSettingsdoWithHttpInfo
     *
     * Update Returns Settings
     *
     * @param  int $contract_id (required)
     * @param  string $allow_returns (optional)
     * @param  string $auto_approve_returns (optional)
     * @param  string $replace_returns (optional)
     * @param  string $replacement_non_returnable (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateReturnsSettingsdoWithHttpInfo($contract_id, $allow_returns = null, $auto_approve_returns = null, $replace_returns = null, $replacement_non_returnable = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateReturnsSettingsdoRequest($contract_id, $allow_returns, $auto_approve_returns, $replace_returns, $replacement_non_returnable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateReturnsSettingsdoAsync
     *
     * Update Returns Settings
     *
     * @param  int $contract_id (required)
     * @param  string $allow_returns (optional)
     * @param  string $auto_approve_returns (optional)
     * @param  string $replace_returns (optional)
     * @param  string $replacement_non_returnable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateReturnsSettingsdoAsync($contract_id, $allow_returns = null, $auto_approve_returns = null, $replace_returns = null, $replacement_non_returnable = null)
    {
        return $this->leadDistributionContractsupdateReturnsSettingsdoAsyncWithHttpInfo($contract_id, $allow_returns, $auto_approve_returns, $replace_returns, $replacement_non_returnable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateReturnsSettingsdoAsyncWithHttpInfo
     *
     * Update Returns Settings
     *
     * @param  int $contract_id (required)
     * @param  string $allow_returns (optional)
     * @param  string $auto_approve_returns (optional)
     * @param  string $replace_returns (optional)
     * @param  string $replacement_non_returnable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateReturnsSettingsdoAsyncWithHttpInfo($contract_id, $allow_returns = null, $auto_approve_returns = null, $replace_returns = null, $replacement_non_returnable = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateReturnsSettingsdoRequest($contract_id, $allow_returns, $auto_approve_returns, $replace_returns, $replacement_non_returnable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateReturnsSettingsdo'
     *
     * @param  int $contract_id (required)
     * @param  string $allow_returns (optional)
     * @param  string $auto_approve_returns (optional)
     * @param  string $replace_returns (optional)
     * @param  string $replacement_non_returnable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateReturnsSettingsdoRequest($contract_id, $allow_returns = null, $auto_approve_returns = null, $replace_returns = null, $replacement_non_returnable = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsupdateReturnsSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateReturnsSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($allow_returns !== null) {
            $queryParams['allowReturns'] = ObjectSerializer::toQueryValue($allow_returns);
        }
        // query params
        if ($auto_approve_returns !== null) {
            $queryParams['autoApproveReturns'] = ObjectSerializer::toQueryValue($auto_approve_returns);
        }
        // query params
        if ($replace_returns !== null) {
            $queryParams['replaceReturns'] = ObjectSerializer::toQueryValue($replace_returns);
        }
        // query params
        if ($replacement_non_returnable !== null) {
            $queryParams['replacementNonReturnable'] = ObjectSerializer::toQueryValue($replacement_non_returnable);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateRevenueCapdo
     *
     * Update Revenue Cap
     *
     * @param  int $contract_id contract_id (required)
     * @param  int $hourly_revenue_cap hourly_revenue_cap (optional)
     * @param  int $daily_revenue_cap daily_revenue_cap (optional)
     * @param  int $weekly_revenue_cap weekly_revenue_cap (optional)
     * @param  int $monthly_revenue_cap monthly_revenue_cap (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdateRevenueCapdo($contract_id, $hourly_revenue_cap = null, $daily_revenue_cap = null, $weekly_revenue_cap = null, $monthly_revenue_cap = null)
    {
        $this->leadDistributionContractsupdateRevenueCapdoWithHttpInfo($contract_id, $hourly_revenue_cap, $daily_revenue_cap, $weekly_revenue_cap, $monthly_revenue_cap);
    }

    /**
     * Operation leadDistributionContractsupdateRevenueCapdoWithHttpInfo
     *
     * Update Revenue Cap
     *
     * @param  int $contract_id (required)
     * @param  int $hourly_revenue_cap (optional)
     * @param  int $daily_revenue_cap (optional)
     * @param  int $weekly_revenue_cap (optional)
     * @param  int $monthly_revenue_cap (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateRevenueCapdoWithHttpInfo($contract_id, $hourly_revenue_cap = null, $daily_revenue_cap = null, $weekly_revenue_cap = null, $monthly_revenue_cap = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateRevenueCapdoRequest($contract_id, $hourly_revenue_cap, $daily_revenue_cap, $weekly_revenue_cap, $monthly_revenue_cap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateRevenueCapdoAsync
     *
     * Update Revenue Cap
     *
     * @param  int $contract_id (required)
     * @param  int $hourly_revenue_cap (optional)
     * @param  int $daily_revenue_cap (optional)
     * @param  int $weekly_revenue_cap (optional)
     * @param  int $monthly_revenue_cap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateRevenueCapdoAsync($contract_id, $hourly_revenue_cap = null, $daily_revenue_cap = null, $weekly_revenue_cap = null, $monthly_revenue_cap = null)
    {
        return $this->leadDistributionContractsupdateRevenueCapdoAsyncWithHttpInfo($contract_id, $hourly_revenue_cap, $daily_revenue_cap, $weekly_revenue_cap, $monthly_revenue_cap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateRevenueCapdoAsyncWithHttpInfo
     *
     * Update Revenue Cap
     *
     * @param  int $contract_id (required)
     * @param  int $hourly_revenue_cap (optional)
     * @param  int $daily_revenue_cap (optional)
     * @param  int $weekly_revenue_cap (optional)
     * @param  int $monthly_revenue_cap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateRevenueCapdoAsyncWithHttpInfo($contract_id, $hourly_revenue_cap = null, $daily_revenue_cap = null, $weekly_revenue_cap = null, $monthly_revenue_cap = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateRevenueCapdoRequest($contract_id, $hourly_revenue_cap, $daily_revenue_cap, $weekly_revenue_cap, $monthly_revenue_cap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateRevenueCapdo'
     *
     * @param  int $contract_id (required)
     * @param  int $hourly_revenue_cap (optional)
     * @param  int $daily_revenue_cap (optional)
     * @param  int $weekly_revenue_cap (optional)
     * @param  int $monthly_revenue_cap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateRevenueCapdoRequest($contract_id, $hourly_revenue_cap = null, $daily_revenue_cap = null, $weekly_revenue_cap = null, $monthly_revenue_cap = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadDistributionContractsupdateRevenueCapdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateRevenueCap.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($hourly_revenue_cap !== null) {
            $queryParams['hourlyRevenueCap'] = ObjectSerializer::toQueryValue($hourly_revenue_cap);
        }
        // query params
        if ($daily_revenue_cap !== null) {
            $queryParams['dailyRevenueCap'] = ObjectSerializer::toQueryValue($daily_revenue_cap);
        }
        // query params
        if ($weekly_revenue_cap !== null) {
            $queryParams['weeklyRevenueCap'] = ObjectSerializer::toQueryValue($weekly_revenue_cap);
        }
        // query params
        if ($monthly_revenue_cap !== null) {
            $queryParams['monthlyRevenueCap'] = ObjectSerializer::toQueryValue($monthly_revenue_cap);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateScheduledo
     *
     * Update Schedule
     *
     * @param  int $delivery_schedule_id delivery_schedule_id (required)
     * @param  int $cap cap (optional)
     * @param  BigDecimal $revenue_cap revenue_cap (optional)
     * @param  BigDecimal $price price (optional)
     * @param  string $start_time start_time (optional)
     * @param  string $end_time end_time (optional)
     * @param  string $type type (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadDistributionContractsupdateScheduledo($delivery_schedule_id, $cap = null, $revenue_cap = null, $price = null, $start_time = null, $end_time = null, $type = null)
    {
        $this->leadDistributionContractsupdateScheduledoWithHttpInfo($delivery_schedule_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type);
    }

    /**
     * Operation leadDistributionContractsupdateScheduledoWithHttpInfo
     *
     * Update Schedule
     *
     * @param  int $delivery_schedule_id (required)
     * @param  int $cap (optional)
     * @param  BigDecimal $revenue_cap (optional)
     * @param  BigDecimal $price (optional)
     * @param  string $start_time (optional)
     * @param  string $end_time (optional)
     * @param  string $type (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateScheduledoWithHttpInfo($delivery_schedule_id, $cap = null, $revenue_cap = null, $price = null, $start_time = null, $end_time = null, $type = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateScheduledoRequest($delivery_schedule_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateScheduledoAsync
     *
     * Update Schedule
     *
     * @param  int $delivery_schedule_id (required)
     * @param  int $cap (optional)
     * @param  BigDecimal $revenue_cap (optional)
     * @param  BigDecimal $price (optional)
     * @param  string $start_time (optional)
     * @param  string $end_time (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateScheduledoAsync($delivery_schedule_id, $cap = null, $revenue_cap = null, $price = null, $start_time = null, $end_time = null, $type = null)
    {
        return $this->leadDistributionContractsupdateScheduledoAsyncWithHttpInfo($delivery_schedule_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateScheduledoAsyncWithHttpInfo
     *
     * Update Schedule
     *
     * @param  int $delivery_schedule_id (required)
     * @param  int $cap (optional)
     * @param  BigDecimal $revenue_cap (optional)
     * @param  BigDecimal $price (optional)
     * @param  string $start_time (optional)
     * @param  string $end_time (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateScheduledoAsyncWithHttpInfo($delivery_schedule_id, $cap = null, $revenue_cap = null, $price = null, $start_time = null, $end_time = null, $type = null)
    {
        $returnType = '';
        $request = $this->leadDistributionContractsupdateScheduledoRequest($delivery_schedule_id, $cap, $revenue_cap, $price, $start_time, $end_time, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateScheduledo'
     *
     * @param  int $delivery_schedule_id (required)
     * @param  int $cap (optional)
     * @param  BigDecimal $revenue_cap (optional)
     * @param  BigDecimal $price (optional)
     * @param  string $start_time (optional)
     * @param  string $end_time (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateScheduledoRequest($delivery_schedule_id, $cap = null, $revenue_cap = null, $price = null, $start_time = null, $end_time = null, $type = null)
    {
        // verify the required parameter 'delivery_schedule_id' is set
        if ($delivery_schedule_id === null || (is_array($delivery_schedule_id) && count($delivery_schedule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_schedule_id when calling leadDistributionContractsupdateScheduledo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateSchedule.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($delivery_schedule_id !== null) {
            $queryParams['deliveryScheduleID'] = ObjectSerializer::toQueryValue($delivery_schedule_id);
        }
        // query params
        if ($cap !== null) {
            $queryParams['cap'] = ObjectSerializer::toQueryValue($cap);
        }
        // query params
        if ($revenue_cap !== null) {
            $queryParams['revenueCap'] = ObjectSerializer::toQueryValue($revenue_cap);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
