<?php
/**
 * LeadsreportsApi
 * PHP version 5
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LeadspediaApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LeadspediaApi\ApiException;
use LeadspediaApi\Configuration;
use LeadspediaApi\HeaderSelector;
use LeadspediaApi\ObjectSerializer;

/**
 * LeadsreportsApi Class Doc Comment
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsreportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation leadsReportsgetCampaignsLeadsCapReportdo
     *
     * Get Campaigns Leads Cap Report
     *
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $affiliate_account_manager_id affiliate_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetCampaignsLeadsCapReportdo($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $this->leadsReportsgetCampaignsLeadsCapReportdoWithHttpInfo($vertical_id, $vertical_group_id, $affiliate_id, $affiliate_account_manager_id);
    }

    /**
     * Operation leadsReportsgetCampaignsLeadsCapReportdoWithHttpInfo
     *
     * Get Campaigns Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetCampaignsLeadsCapReportdoWithHttpInfo($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetCampaignsLeadsCapReportdoRequest($vertical_id, $vertical_group_id, $affiliate_id, $affiliate_account_manager_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetCampaignsLeadsCapReportdoAsync
     *
     * Get Campaigns Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetCampaignsLeadsCapReportdoAsync($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        return $this->leadsReportsgetCampaignsLeadsCapReportdoAsyncWithHttpInfo($vertical_id, $vertical_group_id, $affiliate_id, $affiliate_account_manager_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetCampaignsLeadsCapReportdoAsyncWithHttpInfo
     *
     * Get Campaigns Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetCampaignsLeadsCapReportdoAsyncWithHttpInfo($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetCampaignsLeadsCapReportdoRequest($vertical_id, $vertical_group_id, $affiliate_id, $affiliate_account_manager_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetCampaignsLeadsCapReportdo'
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetCampaignsLeadsCapReportdoRequest($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {

        $resourcePath = '/leadsReports/getCampaignsLeadsCapReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($affiliate_account_manager_id !== null) {
            $queryParams['affiliateAccountManagerID'] = ObjectSerializer::toQueryValue($affiliate_account_manager_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetCampaignsLeadsFieldsCapReportdo
     *
     * Get Campaigns Leads Fields Cap Report
     *
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $affiliate_account_manager_id affiliate_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetCampaignsLeadsFieldsCapReportdo($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $this->leadsReportsgetCampaignsLeadsFieldsCapReportdoWithHttpInfo($vertical_id, $vertical_group_id, $affiliate_id, $affiliate_account_manager_id);
    }

    /**
     * Operation leadsReportsgetCampaignsLeadsFieldsCapReportdoWithHttpInfo
     *
     * Get Campaigns Leads Fields Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetCampaignsLeadsFieldsCapReportdoWithHttpInfo($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetCampaignsLeadsFieldsCapReportdoRequest($vertical_id, $vertical_group_id, $affiliate_id, $affiliate_account_manager_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetCampaignsLeadsFieldsCapReportdoAsync
     *
     * Get Campaigns Leads Fields Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetCampaignsLeadsFieldsCapReportdoAsync($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        return $this->leadsReportsgetCampaignsLeadsFieldsCapReportdoAsyncWithHttpInfo($vertical_id, $vertical_group_id, $affiliate_id, $affiliate_account_manager_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetCampaignsLeadsFieldsCapReportdoAsyncWithHttpInfo
     *
     * Get Campaigns Leads Fields Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetCampaignsLeadsFieldsCapReportdoAsyncWithHttpInfo($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetCampaignsLeadsFieldsCapReportdoRequest($vertical_id, $vertical_group_id, $affiliate_id, $affiliate_account_manager_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetCampaignsLeadsFieldsCapReportdo'
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetCampaignsLeadsFieldsCapReportdoRequest($vertical_id = null, $vertical_group_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {

        $resourcePath = '/leadsReports/getCampaignsLeadsFieldsCapReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($affiliate_account_manager_id !== null) {
            $queryParams['affiliateAccountManagerID'] = ObjectSerializer::toQueryValue($affiliate_account_manager_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetContractsLeadsCapReportdo
     *
     * Get Contracts Leads Cap Report
     *
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $advertiser_account_manager_id advertiser_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetContractsLeadsCapReportdo($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $this->leadsReportsgetContractsLeadsCapReportdoWithHttpInfo($vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id);
    }

    /**
     * Operation leadsReportsgetContractsLeadsCapReportdoWithHttpInfo
     *
     * Get Contracts Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetContractsLeadsCapReportdoWithHttpInfo($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetContractsLeadsCapReportdoRequest($vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetContractsLeadsCapReportdoAsync
     *
     * Get Contracts Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetContractsLeadsCapReportdoAsync($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        return $this->leadsReportsgetContractsLeadsCapReportdoAsyncWithHttpInfo($vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetContractsLeadsCapReportdoAsyncWithHttpInfo
     *
     * Get Contracts Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetContractsLeadsCapReportdoAsyncWithHttpInfo($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetContractsLeadsCapReportdoRequest($vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetContractsLeadsCapReportdo'
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetContractsLeadsCapReportdoRequest($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {

        $resourcePath = '/leadsReports/getContractsLeadsCapReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($advertiser_account_manager_id !== null) {
            $queryParams['advertiserAccountManagerID'] = ObjectSerializer::toQueryValue($advertiser_account_manager_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetContractsLeadsFieldsCapReportdo
     *
     * Get Contracts Leads Fields Cap Report
     *
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $advertiser_account_manager_id advertiser_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetContractsLeadsFieldsCapReportdo($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $this->leadsReportsgetContractsLeadsFieldsCapReportdoWithHttpInfo($vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id);
    }

    /**
     * Operation leadsReportsgetContractsLeadsFieldsCapReportdoWithHttpInfo
     *
     * Get Contracts Leads Fields Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetContractsLeadsFieldsCapReportdoWithHttpInfo($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetContractsLeadsFieldsCapReportdoRequest($vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetContractsLeadsFieldsCapReportdoAsync
     *
     * Get Contracts Leads Fields Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetContractsLeadsFieldsCapReportdoAsync($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        return $this->leadsReportsgetContractsLeadsFieldsCapReportdoAsyncWithHttpInfo($vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetContractsLeadsFieldsCapReportdoAsyncWithHttpInfo
     *
     * Get Contracts Leads Fields Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetContractsLeadsFieldsCapReportdoAsyncWithHttpInfo($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetContractsLeadsFieldsCapReportdoRequest($vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetContractsLeadsFieldsCapReportdo'
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetContractsLeadsFieldsCapReportdoRequest($vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {

        $resourcePath = '/leadsReports/getContractsLeadsFieldsCapReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($advertiser_account_manager_id !== null) {
            $queryParams['advertiserAccountManagerID'] = ObjectSerializer::toQueryValue($advertiser_account_manager_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadDistributionReportdo
     *
     * Get Lead Distribution Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $offer_id offer_id (optional)
     * @param  int $campaign_id campaign_id (optional)
     * @param  string $payout_model payout_model (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $affiliate_account_manager_id affiliate_account_manager_id (optional)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $advertiser_account_manager_id advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadDistributionReportdo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $this->leadsReportsgetLeadDistributionReportdoWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $offer_id, $campaign_id, $payout_model, $affiliate_id, $affiliate_account_manager_id, $advertiser_id, $advertiser_account_manager_id, $to_date);
    }

    /**
     * Operation leadsReportsgetLeadDistributionReportdoWithHttpInfo
     *
     * Get Lead Distribution Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $campaign_id (optional)
     * @param  string $payout_model (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadDistributionReportdoWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadDistributionReportdoRequest($from_date, $vertical_id, $vertical_group_id, $offer_id, $campaign_id, $payout_model, $affiliate_id, $affiliate_account_manager_id, $advertiser_id, $advertiser_account_manager_id, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadDistributionReportdoAsync
     *
     * Get Lead Distribution Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $campaign_id (optional)
     * @param  string $payout_model (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadDistributionReportdoAsync($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        return $this->leadsReportsgetLeadDistributionReportdoAsyncWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $offer_id, $campaign_id, $payout_model, $affiliate_id, $affiliate_account_manager_id, $advertiser_id, $advertiser_account_manager_id, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadDistributionReportdoAsyncWithHttpInfo
     *
     * Get Lead Distribution Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $campaign_id (optional)
     * @param  string $payout_model (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadDistributionReportdoAsyncWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadDistributionReportdoRequest($from_date, $vertical_id, $vertical_group_id, $offer_id, $campaign_id, $payout_model, $affiliate_id, $affiliate_account_manager_id, $advertiser_id, $advertiser_account_manager_id, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadDistributionReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $campaign_id (optional)
     * @param  string $payout_model (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadDistributionReportdoRequest($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetLeadDistributionReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadDistributionReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($payout_model !== null) {
            $queryParams['payoutModel'] = ObjectSerializer::toQueryValue($payout_model);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($affiliate_account_manager_id !== null) {
            $queryParams['affiliateAccountManagerID'] = ObjectSerializer::toQueryValue($affiliate_account_manager_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($advertiser_account_manager_id !== null) {
            $queryParams['advertiserAccountManagerID'] = ObjectSerializer::toQueryValue($advertiser_account_manager_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsByAdvertisersDailyReportdo
     *
     * Get Leads By Advertisers Daily Report
     *
     * @param  string $month month (required)
     * @param  string $year year (required)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $contract_id contract_id (optional)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $advertiser_account_manager_id advertiser_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadsByAdvertisersDailyReportdo($month, $year, $vertical_id = null, $vertical_group_id = null, $contract_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $this->leadsReportsgetLeadsByAdvertisersDailyReportdoWithHttpInfo($month, $year, $vertical_id, $vertical_group_id, $contract_id, $advertiser_id, $advertiser_account_manager_id);
    }

    /**
     * Operation leadsReportsgetLeadsByAdvertisersDailyReportdoWithHttpInfo
     *
     * Get Leads By Advertisers Daily Report
     *
     * @param  string $month (required)
     * @param  string $year (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $contract_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsByAdvertisersDailyReportdoWithHttpInfo($month, $year, $vertical_id = null, $vertical_group_id = null, $contract_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByAdvertisersDailyReportdoRequest($month, $year, $vertical_id, $vertical_group_id, $contract_id, $advertiser_id, $advertiser_account_manager_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsByAdvertisersDailyReportdoAsync
     *
     * Get Leads By Advertisers Daily Report
     *
     * @param  string $month (required)
     * @param  string $year (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $contract_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByAdvertisersDailyReportdoAsync($month, $year, $vertical_id = null, $vertical_group_id = null, $contract_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        return $this->leadsReportsgetLeadsByAdvertisersDailyReportdoAsyncWithHttpInfo($month, $year, $vertical_id, $vertical_group_id, $contract_id, $advertiser_id, $advertiser_account_manager_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsByAdvertisersDailyReportdoAsyncWithHttpInfo
     *
     * Get Leads By Advertisers Daily Report
     *
     * @param  string $month (required)
     * @param  string $year (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $contract_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByAdvertisersDailyReportdoAsyncWithHttpInfo($month, $year, $vertical_id = null, $vertical_group_id = null, $contract_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByAdvertisersDailyReportdoRequest($month, $year, $vertical_id, $vertical_group_id, $contract_id, $advertiser_id, $advertiser_account_manager_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsByAdvertisersDailyReportdo'
     *
     * @param  string $month (required)
     * @param  string $year (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $contract_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsByAdvertisersDailyReportdoRequest($month, $year, $vertical_id = null, $vertical_group_id = null, $contract_id = null, $advertiser_id = null, $advertiser_account_manager_id = null)
    {
        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $month when calling leadsReportsgetLeadsByAdvertisersDailyReportdo'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling leadsReportsgetLeadsByAdvertisersDailyReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsByAdvertisersDailyReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($advertiser_account_manager_id !== null) {
            $queryParams['advertiserAccountManagerID'] = ObjectSerializer::toQueryValue($advertiser_account_manager_id);
        }
        // query params
        if ($month !== null) {
            $queryParams['month'] = ObjectSerializer::toQueryValue($month);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsByAdvertisersReportdo
     *
     * Get Leads By Advertisers Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $offer_id offer_id (optional)
     * @param  int $advertiser_account_manager_id advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function leadsReportsgetLeadsByAdvertisersReportdo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        list($response) = $this->leadsReportsgetLeadsByAdvertisersReportdoWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $offer_id, $advertiser_account_manager_id, $to_date);
        return $response;
    }

    /**
     * Operation leadsReportsgetLeadsByAdvertisersReportdoWithHttpInfo
     *
     * Get Leads By Advertisers Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsByAdvertisersReportdoWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $returnType = 'object';
        $request = $this->leadsReportsgetLeadsByAdvertisersReportdoRequest($from_date, $vertical_id, $vertical_group_id, $offer_id, $advertiser_account_manager_id, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsByAdvertisersReportdoAsync
     *
     * Get Leads By Advertisers Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByAdvertisersReportdoAsync($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        return $this->leadsReportsgetLeadsByAdvertisersReportdoAsyncWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $offer_id, $advertiser_account_manager_id, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsByAdvertisersReportdoAsyncWithHttpInfo
     *
     * Get Leads By Advertisers Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByAdvertisersReportdoAsyncWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $returnType = 'object';
        $request = $this->leadsReportsgetLeadsByAdvertisersReportdoRequest($from_date, $vertical_id, $vertical_group_id, $offer_id, $advertiser_account_manager_id, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsByAdvertisersReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsByAdvertisersReportdoRequest($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetLeadsByAdvertisersReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsByAdvertisersReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($advertiser_account_manager_id !== null) {
            $queryParams['advertiserAccountManagerID'] = ObjectSerializer::toQueryValue($advertiser_account_manager_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsByAffiliatesDailyReportdo
     *
     * Get Leads By Affiliates Daily Report
     *
     * @param  string $month month (required)
     * @param  string $year year (required)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $offer_id offer_id (optional)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $affiliate_account_manager_id affiliate_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadsByAffiliatesDailyReportdo($month, $year, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $this->leadsReportsgetLeadsByAffiliatesDailyReportdoWithHttpInfo($month, $year, $vertical_id, $vertical_group_id, $offer_id, $campaign_id, $affiliate_id, $affiliate_account_manager_id);
    }

    /**
     * Operation leadsReportsgetLeadsByAffiliatesDailyReportdoWithHttpInfo
     *
     * Get Leads By Affiliates Daily Report
     *
     * @param  string $month (required)
     * @param  string $year (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsByAffiliatesDailyReportdoWithHttpInfo($month, $year, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByAffiliatesDailyReportdoRequest($month, $year, $vertical_id, $vertical_group_id, $offer_id, $campaign_id, $affiliate_id, $affiliate_account_manager_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsByAffiliatesDailyReportdoAsync
     *
     * Get Leads By Affiliates Daily Report
     *
     * @param  string $month (required)
     * @param  string $year (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByAffiliatesDailyReportdoAsync($month, $year, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        return $this->leadsReportsgetLeadsByAffiliatesDailyReportdoAsyncWithHttpInfo($month, $year, $vertical_id, $vertical_group_id, $offer_id, $campaign_id, $affiliate_id, $affiliate_account_manager_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsByAffiliatesDailyReportdoAsyncWithHttpInfo
     *
     * Get Leads By Affiliates Daily Report
     *
     * @param  string $month (required)
     * @param  string $year (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByAffiliatesDailyReportdoAsyncWithHttpInfo($month, $year, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByAffiliatesDailyReportdoRequest($month, $year, $vertical_id, $vertical_group_id, $offer_id, $campaign_id, $affiliate_id, $affiliate_account_manager_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsByAffiliatesDailyReportdo'
     *
     * @param  string $month (required)
     * @param  string $year (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsByAffiliatesDailyReportdoRequest($month, $year, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null)
    {
        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $month when calling leadsReportsgetLeadsByAffiliatesDailyReportdo'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling leadsReportsgetLeadsByAffiliatesDailyReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsByAffiliatesDailyReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($affiliate_account_manager_id !== null) {
            $queryParams['affiliateAccountManagerID'] = ObjectSerializer::toQueryValue($affiliate_account_manager_id);
        }
        // query params
        if ($month !== null) {
            $queryParams['month'] = ObjectSerializer::toQueryValue($month);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsByAffiliatesReportdo
     *
     * Get Leads By Affiliates Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $affiliate_account_manager_id affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadsByAffiliatesReportdo($from_date, $affiliate_account_manager_id = null, $to_date = null)
    {
        $this->leadsReportsgetLeadsByAffiliatesReportdoWithHttpInfo($from_date, $affiliate_account_manager_id, $to_date);
    }

    /**
     * Operation leadsReportsgetLeadsByAffiliatesReportdoWithHttpInfo
     *
     * Get Leads By Affiliates Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsByAffiliatesReportdoWithHttpInfo($from_date, $affiliate_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByAffiliatesReportdoRequest($from_date, $affiliate_account_manager_id, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsByAffiliatesReportdoAsync
     *
     * Get Leads By Affiliates Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByAffiliatesReportdoAsync($from_date, $affiliate_account_manager_id = null, $to_date = null)
    {
        return $this->leadsReportsgetLeadsByAffiliatesReportdoAsyncWithHttpInfo($from_date, $affiliate_account_manager_id, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsByAffiliatesReportdoAsyncWithHttpInfo
     *
     * Get Leads By Affiliates Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByAffiliatesReportdoAsyncWithHttpInfo($from_date, $affiliate_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByAffiliatesReportdoRequest($from_date, $affiliate_account_manager_id, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsByAffiliatesReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsByAffiliatesReportdoRequest($from_date, $affiliate_account_manager_id = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetLeadsByAffiliatesReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsByAffiliatesReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_account_manager_id !== null) {
            $queryParams['affiliateAccountManagerID'] = ObjectSerializer::toQueryValue($affiliate_account_manager_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsByCampaignsReportdo
     *
     * Get Leads By Campaigns Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $offer_id offer_id (optional)
     * @param  string $payout_model payout_model (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $affiliate_account_manager_id affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadsByCampaignsReportdo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        $this->leadsReportsgetLeadsByCampaignsReportdoWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $offer_id, $payout_model, $affiliate_id, $affiliate_account_manager_id, $to_date);
    }

    /**
     * Operation leadsReportsgetLeadsByCampaignsReportdoWithHttpInfo
     *
     * Get Leads By Campaigns Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  string $payout_model (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsByCampaignsReportdoWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByCampaignsReportdoRequest($from_date, $vertical_id, $vertical_group_id, $offer_id, $payout_model, $affiliate_id, $affiliate_account_manager_id, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsByCampaignsReportdoAsync
     *
     * Get Leads By Campaigns Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  string $payout_model (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByCampaignsReportdoAsync($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        return $this->leadsReportsgetLeadsByCampaignsReportdoAsyncWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $offer_id, $payout_model, $affiliate_id, $affiliate_account_manager_id, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsByCampaignsReportdoAsyncWithHttpInfo
     *
     * Get Leads By Campaigns Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  string $payout_model (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByCampaignsReportdoAsyncWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByCampaignsReportdoRequest($from_date, $vertical_id, $vertical_group_id, $offer_id, $payout_model, $affiliate_id, $affiliate_account_manager_id, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsByCampaignsReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $offer_id (optional)
     * @param  string $payout_model (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsByCampaignsReportdoRequest($from_date, $vertical_id = null, $vertical_group_id = null, $offer_id = null, $payout_model = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetLeadsByCampaignsReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsByCampaignsReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($payout_model !== null) {
            $queryParams['payoutModel'] = ObjectSerializer::toQueryValue($payout_model);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($affiliate_account_manager_id !== null) {
            $queryParams['affiliateAccountManagerID'] = ObjectSerializer::toQueryValue($affiliate_account_manager_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsByContractsReportdo
     *
     * Get Leads By Contracts Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $advertiser_account_manager_id advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadsByContractsReportdo($from_date, $vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $this->leadsReportsgetLeadsByContractsReportdoWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id, $to_date);
    }

    /**
     * Operation leadsReportsgetLeadsByContractsReportdoWithHttpInfo
     *
     * Get Leads By Contracts Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsByContractsReportdoWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByContractsReportdoRequest($from_date, $vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsByContractsReportdoAsync
     *
     * Get Leads By Contracts Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByContractsReportdoAsync($from_date, $vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        return $this->leadsReportsgetLeadsByContractsReportdoAsyncWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsByContractsReportdoAsyncWithHttpInfo
     *
     * Get Leads By Contracts Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByContractsReportdoAsyncWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByContractsReportdoRequest($from_date, $vertical_id, $vertical_group_id, $advertiser_id, $advertiser_account_manager_id, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsByContractsReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsByContractsReportdoRequest($from_date, $vertical_id = null, $vertical_group_id = null, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetLeadsByContractsReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsByContractsReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($advertiser_account_manager_id !== null) {
            $queryParams['advertiserAccountManagerID'] = ObjectSerializer::toQueryValue($advertiser_account_manager_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsByOffersReportdo
     *
     * Get Leads By Offers Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  string $payout_model payout_model (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadsByOffersReportdo($from_date, $vertical_id = null, $vertical_group_id = null, $payout_model = null, $to_date = null)
    {
        $this->leadsReportsgetLeadsByOffersReportdoWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $payout_model, $to_date);
    }

    /**
     * Operation leadsReportsgetLeadsByOffersReportdoWithHttpInfo
     *
     * Get Leads By Offers Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  string $payout_model (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsByOffersReportdoWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $payout_model = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByOffersReportdoRequest($from_date, $vertical_id, $vertical_group_id, $payout_model, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsByOffersReportdoAsync
     *
     * Get Leads By Offers Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  string $payout_model (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByOffersReportdoAsync($from_date, $vertical_id = null, $vertical_group_id = null, $payout_model = null, $to_date = null)
    {
        return $this->leadsReportsgetLeadsByOffersReportdoAsyncWithHttpInfo($from_date, $vertical_id, $vertical_group_id, $payout_model, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsByOffersReportdoAsyncWithHttpInfo
     *
     * Get Leads By Offers Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  string $payout_model (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByOffersReportdoAsyncWithHttpInfo($from_date, $vertical_id = null, $vertical_group_id = null, $payout_model = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByOffersReportdoRequest($from_date, $vertical_id, $vertical_group_id, $payout_model, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsByOffersReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     * @param  string $payout_model (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsByOffersReportdoRequest($from_date, $vertical_id = null, $vertical_group_id = null, $payout_model = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetLeadsByOffersReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsByOffersReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($payout_model !== null) {
            $queryParams['payoutModel'] = ObjectSerializer::toQueryValue($payout_model);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsBySubAffiliatesReportdo
     *
     * Get Leads By Sub Affiliates Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $affiliate_account_manager_id affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadsBySubAffiliatesReportdo($from_date, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        $this->leadsReportsgetLeadsBySubAffiliatesReportdoWithHttpInfo($from_date, $campaign_id, $affiliate_id, $affiliate_account_manager_id, $to_date);
    }

    /**
     * Operation leadsReportsgetLeadsBySubAffiliatesReportdoWithHttpInfo
     *
     * Get Leads By Sub Affiliates Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsBySubAffiliatesReportdoWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsBySubAffiliatesReportdoRequest($from_date, $campaign_id, $affiliate_id, $affiliate_account_manager_id, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsBySubAffiliatesReportdoAsync
     *
     * Get Leads By Sub Affiliates Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsBySubAffiliatesReportdoAsync($from_date, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        return $this->leadsReportsgetLeadsBySubAffiliatesReportdoAsyncWithHttpInfo($from_date, $campaign_id, $affiliate_id, $affiliate_account_manager_id, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsBySubAffiliatesReportdoAsyncWithHttpInfo
     *
     * Get Leads By Sub Affiliates Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsBySubAffiliatesReportdoAsyncWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsBySubAffiliatesReportdoRequest($from_date, $campaign_id, $affiliate_id, $affiliate_account_manager_id, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsBySubAffiliatesReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $affiliate_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsBySubAffiliatesReportdoRequest($from_date, $campaign_id = null, $affiliate_id = null, $affiliate_account_manager_id = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetLeadsBySubAffiliatesReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsBySubAffiliatesReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($affiliate_account_manager_id !== null) {
            $queryParams['affiliateAccountManagerID'] = ObjectSerializer::toQueryValue($affiliate_account_manager_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetLeadsByVerticalsReportdo
     *
     * Get Leads By Verticals Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $vertical_group_id vertical_group_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetLeadsByVerticalsReportdo($from_date, $vertical_group_id = null, $to_date = null)
    {
        $this->leadsReportsgetLeadsByVerticalsReportdoWithHttpInfo($from_date, $vertical_group_id, $to_date);
    }

    /**
     * Operation leadsReportsgetLeadsByVerticalsReportdoWithHttpInfo
     *
     * Get Leads By Verticals Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_group_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetLeadsByVerticalsReportdoWithHttpInfo($from_date, $vertical_group_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByVerticalsReportdoRequest($from_date, $vertical_group_id, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetLeadsByVerticalsReportdoAsync
     *
     * Get Leads By Verticals Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_group_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByVerticalsReportdoAsync($from_date, $vertical_group_id = null, $to_date = null)
    {
        return $this->leadsReportsgetLeadsByVerticalsReportdoAsyncWithHttpInfo($from_date, $vertical_group_id, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetLeadsByVerticalsReportdoAsyncWithHttpInfo
     *
     * Get Leads By Verticals Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_group_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetLeadsByVerticalsReportdoAsyncWithHttpInfo($from_date, $vertical_group_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetLeadsByVerticalsReportdoRequest($from_date, $vertical_group_id, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetLeadsByVerticalsReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $vertical_group_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetLeadsByVerticalsReportdoRequest($from_date, $vertical_group_id = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetLeadsByVerticalsReportdo'
            );
        }

        $resourcePath = '/leadsReports/getLeadsByVerticalsReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetOffersLeadsCapReportdo
     *
     * Get Offers Leads Cap Report
     *
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $vertical_group_id vertical_group_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetOffersLeadsCapReportdo($vertical_id = null, $vertical_group_id = null)
    {
        $this->leadsReportsgetOffersLeadsCapReportdoWithHttpInfo($vertical_id, $vertical_group_id);
    }

    /**
     * Operation leadsReportsgetOffersLeadsCapReportdoWithHttpInfo
     *
     * Get Offers Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetOffersLeadsCapReportdoWithHttpInfo($vertical_id = null, $vertical_group_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetOffersLeadsCapReportdoRequest($vertical_id, $vertical_group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetOffersLeadsCapReportdoAsync
     *
     * Get Offers Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetOffersLeadsCapReportdoAsync($vertical_id = null, $vertical_group_id = null)
    {
        return $this->leadsReportsgetOffersLeadsCapReportdoAsyncWithHttpInfo($vertical_id, $vertical_group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetOffersLeadsCapReportdoAsyncWithHttpInfo
     *
     * Get Offers Leads Cap Report
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetOffersLeadsCapReportdoAsyncWithHttpInfo($vertical_id = null, $vertical_group_id = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetOffersLeadsCapReportdoRequest($vertical_id, $vertical_group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetOffersLeadsCapReportdo'
     *
     * @param  int $vertical_id (optional)
     * @param  int $vertical_group_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetOffersLeadsCapReportdoRequest($vertical_id = null, $vertical_group_id = null)
    {

        $resourcePath = '/leadsReports/getOffersLeadsCapReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($vertical_group_id !== null) {
            $queryParams['verticalGroupID'] = ObjectSerializer::toQueryValue($vertical_group_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsReportsgetPingPostReportdo
     *
     * Get Ping Post Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $advertiser_account_manager_id advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsReportsgetPingPostReportdo($from_date, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $this->leadsReportsgetPingPostReportdoWithHttpInfo($from_date, $advertiser_id, $advertiser_account_manager_id, $to_date);
    }

    /**
     * Operation leadsReportsgetPingPostReportdoWithHttpInfo
     *
     * Get Ping Post Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsReportsgetPingPostReportdoWithHttpInfo($from_date, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetPingPostReportdoRequest($from_date, $advertiser_id, $advertiser_account_manager_id, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsReportsgetPingPostReportdoAsync
     *
     * Get Ping Post Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetPingPostReportdoAsync($from_date, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        return $this->leadsReportsgetPingPostReportdoAsyncWithHttpInfo($from_date, $advertiser_id, $advertiser_account_manager_id, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsReportsgetPingPostReportdoAsyncWithHttpInfo
     *
     * Get Ping Post Report
     *
     * @param  \DateTime $from_date (required)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsReportsgetPingPostReportdoAsyncWithHttpInfo($from_date, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        $returnType = '';
        $request = $this->leadsReportsgetPingPostReportdoRequest($from_date, $advertiser_id, $advertiser_account_manager_id, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsReportsgetPingPostReportdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $advertiser_id (optional)
     * @param  int $advertiser_account_manager_id (optional)
     * @param  \DateTime $to_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsReportsgetPingPostReportdoRequest($from_date, $advertiser_id = null, $advertiser_account_manager_id = null, $to_date = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsReportsgetPingPostReportdo'
            );
        }

        $resourcePath = '/leadsReports/getPingPostReport.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($advertiser_account_manager_id !== null) {
            $queryParams['advertiserAccountManagerID'] = ObjectSerializer::toQueryValue($advertiser_account_manager_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
