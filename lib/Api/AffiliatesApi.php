<?php
/**
 * AffiliatesApi
 * PHP version 5
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LeadspediaApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LeadspediaApi\ApiException;
use LeadspediaApi\Configuration;
use LeadspediaApi\HeaderSelector;
use LeadspediaApi\ObjectSerializer;

/**
 * AffiliatesApi Class Doc Comment
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AffiliatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation affiliateschangeStatusdo
     *
     * Change Status
     *
     * @param  int $affiliate_id affiliate_id (required)
     * @param  string $status status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliateschangeStatusdo($affiliate_id, $status)
    {
        $this->affiliateschangeStatusdoWithHttpInfo($affiliate_id, $status);
    }

    /**
     * Operation affiliateschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $affiliate_id (required)
     * @param  string $status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliateschangeStatusdoWithHttpInfo($affiliate_id, $status)
    {
        $returnType = '';
        $request = $this->affiliateschangeStatusdoRequest($affiliate_id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliateschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $affiliate_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliateschangeStatusdoAsync($affiliate_id, $status)
    {
        return $this->affiliateschangeStatusdoAsyncWithHttpInfo($affiliate_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliateschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $affiliate_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliateschangeStatusdoAsyncWithHttpInfo($affiliate_id, $status)
    {
        $returnType = '';
        $request = $this->affiliateschangeStatusdoRequest($affiliate_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliateschangeStatusdo'
     *
     * @param  int $affiliate_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliateschangeStatusdoRequest($affiliate_id, $status)
    {
        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling affiliateschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling affiliateschangeStatusdo'
            );
        }

        $resourcePath = '/affiliates/changeStatus.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatescreatedo
     *
     * Create
     *
     * @param  string $affiliate_name affiliate_name (required)
     * @param  int $account_manager_id account_manager_id (required)
     * @param  string $status status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatescreatedo($affiliate_name, $account_manager_id, $status)
    {
        $this->affiliatescreatedoWithHttpInfo($affiliate_name, $account_manager_id, $status);
    }

    /**
     * Operation affiliatescreatedoWithHttpInfo
     *
     * Create
     *
     * @param  string $affiliate_name (required)
     * @param  int $account_manager_id (required)
     * @param  string $status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatescreatedoWithHttpInfo($affiliate_name, $account_manager_id, $status)
    {
        $returnType = '';
        $request = $this->affiliatescreatedoRequest($affiliate_name, $account_manager_id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatescreatedoAsync
     *
     * Create
     *
     * @param  string $affiliate_name (required)
     * @param  int $account_manager_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatescreatedoAsync($affiliate_name, $account_manager_id, $status)
    {
        return $this->affiliatescreatedoAsyncWithHttpInfo($affiliate_name, $account_manager_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatescreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  string $affiliate_name (required)
     * @param  int $account_manager_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatescreatedoAsyncWithHttpInfo($affiliate_name, $account_manager_id, $status)
    {
        $returnType = '';
        $request = $this->affiliatescreatedoRequest($affiliate_name, $account_manager_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatescreatedo'
     *
     * @param  string $affiliate_name (required)
     * @param  int $account_manager_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatescreatedoRequest($affiliate_name, $account_manager_id, $status)
    {
        // verify the required parameter 'affiliate_name' is set
        if ($affiliate_name === null || (is_array($affiliate_name) && count($affiliate_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_name when calling affiliatescreatedo'
            );
        }
        // verify the required parameter 'account_manager_id' is set
        if ($account_manager_id === null || (is_array($account_manager_id) && count($account_manager_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_manager_id when calling affiliatescreatedo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling affiliatescreatedo'
            );
        }

        $resourcePath = '/affiliates/create.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_name !== null) {
            $queryParams['affiliateName'] = ObjectSerializer::toQueryValue($affiliate_name);
        }
        // query params
        if ($account_manager_id !== null) {
            $queryParams['accountManagerID'] = ObjectSerializer::toQueryValue($account_manager_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesdeletedo
     *
     * Delete
     *
     * @param  int $affiliate_id affiliate_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesdeletedo($affiliate_id)
    {
        $this->affiliatesdeletedoWithHttpInfo($affiliate_id);
    }

    /**
     * Operation affiliatesdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $affiliate_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesdeletedoWithHttpInfo($affiliate_id)
    {
        $returnType = '';
        $request = $this->affiliatesdeletedoRequest($affiliate_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesdeletedoAsync
     *
     * Delete
     *
     * @param  int $affiliate_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesdeletedoAsync($affiliate_id)
    {
        return $this->affiliatesdeletedoAsyncWithHttpInfo($affiliate_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $affiliate_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesdeletedoAsyncWithHttpInfo($affiliate_id)
    {
        $returnType = '';
        $request = $this->affiliatesdeletedoRequest($affiliate_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesdeletedo'
     *
     * @param  int $affiliate_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesdeletedoRequest($affiliate_id)
    {
        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling affiliatesdeletedo'
            );
        }

        $resourcePath = '/affiliates/delete.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesgetAlldo
     *
     * Get All
     *
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $account_manager_id account_manager_id (optional)
     * @param  string $status status (optional)
     * @param  string $search search (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesgetAlldo($affiliate_id = null, $account_manager_id = null, $status = null, $search = null, $start = null, $limit = null)
    {
        $this->affiliatesgetAlldoWithHttpInfo($affiliate_id, $account_manager_id, $status, $search, $start, $limit);
    }

    /**
     * Operation affiliatesgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $affiliate_id (optional)
     * @param  int $account_manager_id (optional)
     * @param  string $status (optional)
     * @param  string $search (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesgetAlldoWithHttpInfo($affiliate_id = null, $account_manager_id = null, $status = null, $search = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->affiliatesgetAlldoRequest($affiliate_id, $account_manager_id, $status, $search, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesgetAlldoAsync
     *
     * Get All
     *
     * @param  int $affiliate_id (optional)
     * @param  int $account_manager_id (optional)
     * @param  string $status (optional)
     * @param  string $search (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesgetAlldoAsync($affiliate_id = null, $account_manager_id = null, $status = null, $search = null, $start = null, $limit = null)
    {
        return $this->affiliatesgetAlldoAsyncWithHttpInfo($affiliate_id, $account_manager_id, $status, $search, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $affiliate_id (optional)
     * @param  int $account_manager_id (optional)
     * @param  string $status (optional)
     * @param  string $search (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesgetAlldoAsyncWithHttpInfo($affiliate_id = null, $account_manager_id = null, $status = null, $search = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->affiliatesgetAlldoRequest($affiliate_id, $account_manager_id, $status, $search, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesgetAlldo'
     *
     * @param  int $affiliate_id (optional)
     * @param  int $account_manager_id (optional)
     * @param  string $status (optional)
     * @param  string $search (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesgetAlldoRequest($affiliate_id = null, $account_manager_id = null, $status = null, $search = null, $start = null, $limit = null)
    {

        $resourcePath = '/affiliates/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($account_manager_id !== null) {
            $queryParams['accountManagerID'] = ObjectSerializer::toQueryValue($account_manager_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesgetInfodo
     *
     * Get Info
     *
     * @param  int $affiliate_id affiliate_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesgetInfodo($affiliate_id)
    {
        $this->affiliatesgetInfodoWithHttpInfo($affiliate_id);
    }

    /**
     * Operation affiliatesgetInfodoWithHttpInfo
     *
     * Get Info
     *
     * @param  int $affiliate_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesgetInfodoWithHttpInfo($affiliate_id)
    {
        $returnType = '';
        $request = $this->affiliatesgetInfodoRequest($affiliate_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesgetInfodoAsync
     *
     * Get Info
     *
     * @param  int $affiliate_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesgetInfodoAsync($affiliate_id)
    {
        return $this->affiliatesgetInfodoAsyncWithHttpInfo($affiliate_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesgetInfodoAsyncWithHttpInfo
     *
     * Get Info
     *
     * @param  int $affiliate_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesgetInfodoAsyncWithHttpInfo($affiliate_id)
    {
        $returnType = '';
        $request = $this->affiliatesgetInfodoRequest($affiliate_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesgetInfodo'
     *
     * @param  int $affiliate_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesgetInfodoRequest($affiliate_id)
    {
        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling affiliatesgetInfodo'
            );
        }

        $resourcePath = '/affiliates/getInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatessearchdo
     *
     * Search
     *
     * @param  string $search search (required)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatessearchdo($search, $start = null, $limit = null)
    {
        $this->affiliatessearchdoWithHttpInfo($search, $start, $limit);
    }

    /**
     * Operation affiliatessearchdoWithHttpInfo
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatessearchdoWithHttpInfo($search, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->affiliatessearchdoRequest($search, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatessearchdoAsync
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatessearchdoAsync($search, $start = null, $limit = null)
    {
        return $this->affiliatessearchdoAsyncWithHttpInfo($search, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatessearchdoAsyncWithHttpInfo
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatessearchdoAsyncWithHttpInfo($search, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->affiliatessearchdoRequest($search, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatessearchdo'
     *
     * @param  string $search (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatessearchdoRequest($search, $start = null, $limit = null)
    {
        // verify the required parameter 'search' is set
        if ($search === null || (is_array($search) && count($search) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search when calling affiliatessearchdo'
            );
        }

        $resourcePath = '/affiliates/search.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesupdateBillingdo
     *
     * Update Billing
     *
     * @param  int $affiliate_id affiliate_id (required)
     * @param  string $billing_cycle billing_cycle (optional)
     * @param  string $tax_id tax_id (optional)
     * @param  string $tax_class tax_class (optional)
     * @param  string $tax_doc_received tax_doc_received (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesupdateBillingdo($affiliate_id, $billing_cycle = null, $tax_id = null, $tax_class = null, $tax_doc_received = null)
    {
        $this->affiliatesupdateBillingdoWithHttpInfo($affiliate_id, $billing_cycle, $tax_id, $tax_class, $tax_doc_received);
    }

    /**
     * Operation affiliatesupdateBillingdoWithHttpInfo
     *
     * Update Billing
     *
     * @param  int $affiliate_id (required)
     * @param  string $billing_cycle (optional)
     * @param  string $tax_id (optional)
     * @param  string $tax_class (optional)
     * @param  string $tax_doc_received (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesupdateBillingdoWithHttpInfo($affiliate_id, $billing_cycle = null, $tax_id = null, $tax_class = null, $tax_doc_received = null)
    {
        $returnType = '';
        $request = $this->affiliatesupdateBillingdoRequest($affiliate_id, $billing_cycle, $tax_id, $tax_class, $tax_doc_received);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesupdateBillingdoAsync
     *
     * Update Billing
     *
     * @param  int $affiliate_id (required)
     * @param  string $billing_cycle (optional)
     * @param  string $tax_id (optional)
     * @param  string $tax_class (optional)
     * @param  string $tax_doc_received (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesupdateBillingdoAsync($affiliate_id, $billing_cycle = null, $tax_id = null, $tax_class = null, $tax_doc_received = null)
    {
        return $this->affiliatesupdateBillingdoAsyncWithHttpInfo($affiliate_id, $billing_cycle, $tax_id, $tax_class, $tax_doc_received)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesupdateBillingdoAsyncWithHttpInfo
     *
     * Update Billing
     *
     * @param  int $affiliate_id (required)
     * @param  string $billing_cycle (optional)
     * @param  string $tax_id (optional)
     * @param  string $tax_class (optional)
     * @param  string $tax_doc_received (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesupdateBillingdoAsyncWithHttpInfo($affiliate_id, $billing_cycle = null, $tax_id = null, $tax_class = null, $tax_doc_received = null)
    {
        $returnType = '';
        $request = $this->affiliatesupdateBillingdoRequest($affiliate_id, $billing_cycle, $tax_id, $tax_class, $tax_doc_received);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesupdateBillingdo'
     *
     * @param  int $affiliate_id (required)
     * @param  string $billing_cycle (optional)
     * @param  string $tax_id (optional)
     * @param  string $tax_class (optional)
     * @param  string $tax_doc_received (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesupdateBillingdoRequest($affiliate_id, $billing_cycle = null, $tax_id = null, $tax_class = null, $tax_doc_received = null)
    {
        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling affiliatesupdateBillingdo'
            );
        }

        $resourcePath = '/affiliates/updateBilling.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($billing_cycle !== null) {
            $queryParams['billingCycle'] = ObjectSerializer::toQueryValue($billing_cycle);
        }
        // query params
        if ($tax_id !== null) {
            $queryParams['taxID'] = ObjectSerializer::toQueryValue($tax_id);
        }
        // query params
        if ($tax_class !== null) {
            $queryParams['taxClass'] = ObjectSerializer::toQueryValue($tax_class);
        }
        // query params
        if ($tax_doc_received !== null) {
            $queryParams['tax_doc_received'] = ObjectSerializer::toQueryValue($tax_doc_received);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation affiliatesupdateInfodo
     *
     * Update Info
     *
     * @param  int $affiliate_id affiliate_id (required)
     * @param  string $affiliate_name affiliate_name (optional)
     * @param  string $website website (optional)
     * @param  string $alternate_id alternate_id (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $city city (optional)
     * @param  string $state state (optional)
     * @param  string $zip_code zip_code (optional)
     * @param  string $country country (optional)
     * @param  string $reporting_url reporting_url (optional)
     * @param  string $reporting_username reporting_username (optional)
     * @param  string $reporting_password reporting_password (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function affiliatesupdateInfodo($affiliate_id, $affiliate_name = null, $website = null, $alternate_id = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        $this->affiliatesupdateInfodoWithHttpInfo($affiliate_id, $affiliate_name, $website, $alternate_id, $address, $address2, $city, $state, $zip_code, $country, $reporting_url, $reporting_username, $reporting_password);
    }

    /**
     * Operation affiliatesupdateInfodoWithHttpInfo
     *
     * Update Info
     *
     * @param  int $affiliate_id (required)
     * @param  string $affiliate_name (optional)
     * @param  string $website (optional)
     * @param  string $alternate_id (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     * @param  string $reporting_url (optional)
     * @param  string $reporting_username (optional)
     * @param  string $reporting_password (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function affiliatesupdateInfodoWithHttpInfo($affiliate_id, $affiliate_name = null, $website = null, $alternate_id = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        $returnType = '';
        $request = $this->affiliatesupdateInfodoRequest($affiliate_id, $affiliate_name, $website, $alternate_id, $address, $address2, $city, $state, $zip_code, $country, $reporting_url, $reporting_username, $reporting_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation affiliatesupdateInfodoAsync
     *
     * Update Info
     *
     * @param  int $affiliate_id (required)
     * @param  string $affiliate_name (optional)
     * @param  string $website (optional)
     * @param  string $alternate_id (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     * @param  string $reporting_url (optional)
     * @param  string $reporting_username (optional)
     * @param  string $reporting_password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesupdateInfodoAsync($affiliate_id, $affiliate_name = null, $website = null, $alternate_id = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        return $this->affiliatesupdateInfodoAsyncWithHttpInfo($affiliate_id, $affiliate_name, $website, $alternate_id, $address, $address2, $city, $state, $zip_code, $country, $reporting_url, $reporting_username, $reporting_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation affiliatesupdateInfodoAsyncWithHttpInfo
     *
     * Update Info
     *
     * @param  int $affiliate_id (required)
     * @param  string $affiliate_name (optional)
     * @param  string $website (optional)
     * @param  string $alternate_id (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     * @param  string $reporting_url (optional)
     * @param  string $reporting_username (optional)
     * @param  string $reporting_password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function affiliatesupdateInfodoAsyncWithHttpInfo($affiliate_id, $affiliate_name = null, $website = null, $alternate_id = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        $returnType = '';
        $request = $this->affiliatesupdateInfodoRequest($affiliate_id, $affiliate_name, $website, $alternate_id, $address, $address2, $city, $state, $zip_code, $country, $reporting_url, $reporting_username, $reporting_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'affiliatesupdateInfodo'
     *
     * @param  int $affiliate_id (required)
     * @param  string $affiliate_name (optional)
     * @param  string $website (optional)
     * @param  string $alternate_id (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     * @param  string $reporting_url (optional)
     * @param  string $reporting_username (optional)
     * @param  string $reporting_password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function affiliatesupdateInfodoRequest($affiliate_id, $affiliate_name = null, $website = null, $alternate_id = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling affiliatesupdateInfodo'
            );
        }

        $resourcePath = '/affiliates/updateInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($affiliate_name !== null) {
            $queryParams['affiliateName'] = ObjectSerializer::toQueryValue($affiliate_name);
        }
        // query params
        if ($website !== null) {
            $queryParams['website'] = ObjectSerializer::toQueryValue($website);
        }
        // query params
        if ($alternate_id !== null) {
            $queryParams['alternateID'] = ObjectSerializer::toQueryValue($alternate_id);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($zip_code !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zip_code);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($reporting_url !== null) {
            $queryParams['reportingUrl'] = ObjectSerializer::toQueryValue($reporting_url);
        }
        // query params
        if ($reporting_username !== null) {
            $queryParams['reportingUsername'] = ObjectSerializer::toQueryValue($reporting_username);
        }
        // query params
        if ($reporting_password !== null) {
            $queryParams['reportingPassword'] = ObjectSerializer::toQueryValue($reporting_password);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
