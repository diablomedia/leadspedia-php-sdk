<?php
/**
 * AdvertisersApi
 * PHP version 5
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LeadspediaApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LeadspediaApi\ApiException;
use LeadspediaApi\Configuration;
use LeadspediaApi\HeaderSelector;
use LeadspediaApi\ObjectSerializer;

/**
 * AdvertisersApi Class Doc Comment
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdvertisersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation advertisersadjustCreditdo
     *
     * Adjust Credit
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $type type (required)
     * @param  BigDecimal $amount amount (required)
     * @param  string $charge charge (optional)
     * @param  string $generate_invoice generate_invoice (optional)
     * @param  string $note note (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersadjustCreditdo($advertiser_id, $type, $amount, $charge = null, $generate_invoice = null, $note = null)
    {
        $this->advertisersadjustCreditdoWithHttpInfo($advertiser_id, $type, $amount, $charge, $generate_invoice, $note);
    }

    /**
     * Operation advertisersadjustCreditdoWithHttpInfo
     *
     * Adjust Credit
     *
     * @param  int $advertiser_id (required)
     * @param  string $type (required)
     * @param  BigDecimal $amount (required)
     * @param  string $charge (optional)
     * @param  string $generate_invoice (optional)
     * @param  string $note (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersadjustCreditdoWithHttpInfo($advertiser_id, $type, $amount, $charge = null, $generate_invoice = null, $note = null)
    {
        $returnType = '';
        $request = $this->advertisersadjustCreditdoRequest($advertiser_id, $type, $amount, $charge, $generate_invoice, $note);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersadjustCreditdoAsync
     *
     * Adjust Credit
     *
     * @param  int $advertiser_id (required)
     * @param  string $type (required)
     * @param  BigDecimal $amount (required)
     * @param  string $charge (optional)
     * @param  string $generate_invoice (optional)
     * @param  string $note (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersadjustCreditdoAsync($advertiser_id, $type, $amount, $charge = null, $generate_invoice = null, $note = null)
    {
        return $this->advertisersadjustCreditdoAsyncWithHttpInfo($advertiser_id, $type, $amount, $charge, $generate_invoice, $note)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersadjustCreditdoAsyncWithHttpInfo
     *
     * Adjust Credit
     *
     * @param  int $advertiser_id (required)
     * @param  string $type (required)
     * @param  BigDecimal $amount (required)
     * @param  string $charge (optional)
     * @param  string $generate_invoice (optional)
     * @param  string $note (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersadjustCreditdoAsyncWithHttpInfo($advertiser_id, $type, $amount, $charge = null, $generate_invoice = null, $note = null)
    {
        $returnType = '';
        $request = $this->advertisersadjustCreditdoRequest($advertiser_id, $type, $amount, $charge, $generate_invoice, $note);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersadjustCreditdo'
     *
     * @param  int $advertiser_id (required)
     * @param  string $type (required)
     * @param  BigDecimal $amount (required)
     * @param  string $charge (optional)
     * @param  string $generate_invoice (optional)
     * @param  string $note (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersadjustCreditdoRequest($advertiser_id, $type, $amount, $charge = null, $generate_invoice = null, $note = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersadjustCreditdo'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling advertisersadjustCreditdo'
            );
        }
        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling advertisersadjustCreditdo'
            );
        }

        $resourcePath = '/advertisers/adjustCredit.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount);
        }
        // query params
        if ($charge !== null) {
            $queryParams['charge'] = ObjectSerializer::toQueryValue($charge);
        }
        // query params
        if ($generate_invoice !== null) {
            $queryParams['generateInvoice'] = ObjectSerializer::toQueryValue($generate_invoice);
        }
        // query params
        if ($note !== null) {
            $queryParams['note'] = ObjectSerializer::toQueryValue($note);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertiserschangeStatusdo
     *
     * Change Status
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $status status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertiserschangeStatusdo($advertiser_id, $status)
    {
        $this->advertiserschangeStatusdoWithHttpInfo($advertiser_id, $status);
    }

    /**
     * Operation advertiserschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $advertiser_id (required)
     * @param  string $status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertiserschangeStatusdoWithHttpInfo($advertiser_id, $status)
    {
        $returnType = '';
        $request = $this->advertiserschangeStatusdoRequest($advertiser_id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertiserschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $advertiser_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserschangeStatusdoAsync($advertiser_id, $status)
    {
        return $this->advertiserschangeStatusdoAsyncWithHttpInfo($advertiser_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertiserschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $advertiser_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserschangeStatusdoAsyncWithHttpInfo($advertiser_id, $status)
    {
        $returnType = '';
        $request = $this->advertiserschangeStatusdoRequest($advertiser_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertiserschangeStatusdo'
     *
     * @param  int $advertiser_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertiserschangeStatusdoRequest($advertiser_id, $status)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertiserschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling advertiserschangeStatusdo'
            );
        }

        $resourcePath = '/advertisers/changeStatus.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertiserscreatedo
     *
     * Create
     *
     * @param  string $advertiser_name advertiser_name (required)
     * @param  int $account_manager_id account_manager_id (required)
     * @param  string $status status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertiserscreatedo($advertiser_name, $account_manager_id, $status)
    {
        $this->advertiserscreatedoWithHttpInfo($advertiser_name, $account_manager_id, $status);
    }

    /**
     * Operation advertiserscreatedoWithHttpInfo
     *
     * Create
     *
     * @param  string $advertiser_name (required)
     * @param  int $account_manager_id (required)
     * @param  string $status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertiserscreatedoWithHttpInfo($advertiser_name, $account_manager_id, $status)
    {
        $returnType = '';
        $request = $this->advertiserscreatedoRequest($advertiser_name, $account_manager_id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertiserscreatedoAsync
     *
     * Create
     *
     * @param  string $advertiser_name (required)
     * @param  int $account_manager_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserscreatedoAsync($advertiser_name, $account_manager_id, $status)
    {
        return $this->advertiserscreatedoAsyncWithHttpInfo($advertiser_name, $account_manager_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertiserscreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  string $advertiser_name (required)
     * @param  int $account_manager_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserscreatedoAsyncWithHttpInfo($advertiser_name, $account_manager_id, $status)
    {
        $returnType = '';
        $request = $this->advertiserscreatedoRequest($advertiser_name, $account_manager_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertiserscreatedo'
     *
     * @param  string $advertiser_name (required)
     * @param  int $account_manager_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertiserscreatedoRequest($advertiser_name, $account_manager_id, $status)
    {
        // verify the required parameter 'advertiser_name' is set
        if ($advertiser_name === null || (is_array($advertiser_name) && count($advertiser_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_name when calling advertiserscreatedo'
            );
        }
        // verify the required parameter 'account_manager_id' is set
        if ($account_manager_id === null || (is_array($account_manager_id) && count($account_manager_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_manager_id when calling advertiserscreatedo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling advertiserscreatedo'
            );
        }

        $resourcePath = '/advertisers/create.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_name !== null) {
            $queryParams['advertiserName'] = ObjectSerializer::toQueryValue($advertiser_name);
        }
        // query params
        if ($account_manager_id !== null) {
            $queryParams['accountManagerID'] = ObjectSerializer::toQueryValue($account_manager_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersdeletedo
     *
     * Delete
     *
     * @param  int $advertiser_id advertiser_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersdeletedo($advertiser_id)
    {
        $this->advertisersdeletedoWithHttpInfo($advertiser_id);
    }

    /**
     * Operation advertisersdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersdeletedoWithHttpInfo($advertiser_id)
    {
        $returnType = '';
        $request = $this->advertisersdeletedoRequest($advertiser_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersdeletedoAsync
     *
     * Delete
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersdeletedoAsync($advertiser_id)
    {
        return $this->advertisersdeletedoAsyncWithHttpInfo($advertiser_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersdeletedoAsyncWithHttpInfo($advertiser_id)
    {
        $returnType = '';
        $request = $this->advertisersdeletedoRequest($advertiser_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersdeletedo'
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersdeletedoRequest($advertiser_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersdeletedo'
            );
        }

        $resourcePath = '/advertisers/delete.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersenableCreditdo
     *
     * Enable Credit
     *
     * @param  int $advertiser_id advertiser_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersenableCreditdo($advertiser_id)
    {
        $this->advertisersenableCreditdoWithHttpInfo($advertiser_id);
    }

    /**
     * Operation advertisersenableCreditdoWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersenableCreditdoWithHttpInfo($advertiser_id)
    {
        $returnType = '';
        $request = $this->advertisersenableCreditdoRequest($advertiser_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersenableCreditdoAsync
     *
     * Enable Credit
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersenableCreditdoAsync($advertiser_id)
    {
        return $this->advertisersenableCreditdoAsyncWithHttpInfo($advertiser_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersenableCreditdoAsyncWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersenableCreditdoAsyncWithHttpInfo($advertiser_id)
    {
        $returnType = '';
        $request = $this->advertisersenableCreditdoRequest($advertiser_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersenableCreditdo'
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersenableCreditdoRequest($advertiser_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersenableCreditdo'
            );
        }

        $resourcePath = '/advertisers/enableCredit.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersgetAlldo
     *
     * Get All
     *
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  string $advertiser_type advertiser_type (optional)
     * @param  int $account_manager_id account_manager_id (optional)
     * @param  string $status status (optional)
     * @param  string $is_credit_enabled is_credit_enabled (optional)
     * @param  string $has_credit_card_on_file has_credit_card_on_file (optional)
     * @param  string $search search (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function advertisersgetAlldo($advertiser_id = null, $advertiser_type = null, $account_manager_id = null, $status = null, $is_credit_enabled = null, $has_credit_card_on_file = null, $search = null, $start = null, $limit = null)
    {
        list($response) = $this->advertisersgetAlldoWithHttpInfo($advertiser_id, $advertiser_type, $account_manager_id, $status, $is_credit_enabled, $has_credit_card_on_file, $search, $start, $limit);
        return $response;
    }

    /**
     * Operation advertisersgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiser_id (optional)
     * @param  string $advertiser_type (optional)
     * @param  int $account_manager_id (optional)
     * @param  string $status (optional)
     * @param  string $is_credit_enabled (optional)
     * @param  string $has_credit_card_on_file (optional)
     * @param  string $search (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersgetAlldoWithHttpInfo($advertiser_id = null, $advertiser_type = null, $account_manager_id = null, $status = null, $is_credit_enabled = null, $has_credit_card_on_file = null, $search = null, $start = null, $limit = null)
    {
        $returnType = 'object';
        $request = $this->advertisersgetAlldoRequest($advertiser_id, $advertiser_type, $account_manager_id, $status, $is_credit_enabled, $has_credit_card_on_file, $search, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersgetAlldoAsync
     *
     * Get All
     *
     * @param  int $advertiser_id (optional)
     * @param  string $advertiser_type (optional)
     * @param  int $account_manager_id (optional)
     * @param  string $status (optional)
     * @param  string $is_credit_enabled (optional)
     * @param  string $has_credit_card_on_file (optional)
     * @param  string $search (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersgetAlldoAsync($advertiser_id = null, $advertiser_type = null, $account_manager_id = null, $status = null, $is_credit_enabled = null, $has_credit_card_on_file = null, $search = null, $start = null, $limit = null)
    {
        return $this->advertisersgetAlldoAsyncWithHttpInfo($advertiser_id, $advertiser_type, $account_manager_id, $status, $is_credit_enabled, $has_credit_card_on_file, $search, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiser_id (optional)
     * @param  string $advertiser_type (optional)
     * @param  int $account_manager_id (optional)
     * @param  string $status (optional)
     * @param  string $is_credit_enabled (optional)
     * @param  string $has_credit_card_on_file (optional)
     * @param  string $search (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersgetAlldoAsyncWithHttpInfo($advertiser_id = null, $advertiser_type = null, $account_manager_id = null, $status = null, $is_credit_enabled = null, $has_credit_card_on_file = null, $search = null, $start = null, $limit = null)
    {
        $returnType = 'object';
        $request = $this->advertisersgetAlldoRequest($advertiser_id, $advertiser_type, $account_manager_id, $status, $is_credit_enabled, $has_credit_card_on_file, $search, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersgetAlldo'
     *
     * @param  int $advertiser_id (optional)
     * @param  string $advertiser_type (optional)
     * @param  int $account_manager_id (optional)
     * @param  string $status (optional)
     * @param  string $is_credit_enabled (optional)
     * @param  string $has_credit_card_on_file (optional)
     * @param  string $search (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersgetAlldoRequest($advertiser_id = null, $advertiser_type = null, $account_manager_id = null, $status = null, $is_credit_enabled = null, $has_credit_card_on_file = null, $search = null, $start = null, $limit = null)
    {

        $resourcePath = '/advertisers/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($advertiser_type !== null) {
            $queryParams['advertiserType'] = ObjectSerializer::toQueryValue($advertiser_type);
        }
        // query params
        if ($account_manager_id !== null) {
            $queryParams['accountManagerID'] = ObjectSerializer::toQueryValue($account_manager_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($is_credit_enabled !== null) {
            $queryParams['isCreditEnabled'] = ObjectSerializer::toQueryValue($is_credit_enabled);
        }
        // query params
        if ($has_credit_card_on_file !== null) {
            $queryParams['hasCreditCardOnFile'] = ObjectSerializer::toQueryValue($has_credit_card_on_file);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersgetInfodo
     *
     * Get Info
     *
     * @param  int $advertiser_id advertiser_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersgetInfodo($advertiser_id)
    {
        $this->advertisersgetInfodoWithHttpInfo($advertiser_id);
    }

    /**
     * Operation advertisersgetInfodoWithHttpInfo
     *
     * Get Info
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersgetInfodoWithHttpInfo($advertiser_id)
    {
        $returnType = '';
        $request = $this->advertisersgetInfodoRequest($advertiser_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersgetInfodoAsync
     *
     * Get Info
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersgetInfodoAsync($advertiser_id)
    {
        return $this->advertisersgetInfodoAsyncWithHttpInfo($advertiser_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersgetInfodoAsyncWithHttpInfo
     *
     * Get Info
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersgetInfodoAsyncWithHttpInfo($advertiser_id)
    {
        $returnType = '';
        $request = $this->advertisersgetInfodoRequest($advertiser_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersgetInfodo'
     *
     * @param  int $advertiser_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersgetInfodoRequest($advertiser_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersgetInfodo'
            );
        }

        $resourcePath = '/advertisers/getInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertiserssearchdo
     *
     * Search
     *
     * @param  string $search search (required)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertiserssearchdo($search, $start = null, $limit = null)
    {
        $this->advertiserssearchdoWithHttpInfo($search, $start, $limit);
    }

    /**
     * Operation advertiserssearchdoWithHttpInfo
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertiserssearchdoWithHttpInfo($search, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->advertiserssearchdoRequest($search, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertiserssearchdoAsync
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserssearchdoAsync($search, $start = null, $limit = null)
    {
        return $this->advertiserssearchdoAsyncWithHttpInfo($search, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertiserssearchdoAsyncWithHttpInfo
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserssearchdoAsyncWithHttpInfo($search, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->advertiserssearchdoRequest($search, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertiserssearchdo'
     *
     * @param  string $search (required)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertiserssearchdoRequest($search, $start = null, $limit = null)
    {
        // verify the required parameter 'search' is set
        if ($search === null || (is_array($search) && count($search) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search when calling advertiserssearchdo'
            );
        }

        $resourcePath = '/advertisers/search.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateAuthorizeNetCustomerProfileIDdo
     *
     * Update Authorize Net Customer Profile ID
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $auth_net_customer_profile_id auth_net_customer_profile_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdo($advertiser_id, $auth_net_customer_profile_id = null)
    {
        $this->advertisersupdateAuthorizeNetCustomerProfileIDdoWithHttpInfo($advertiser_id, $auth_net_customer_profile_id);
    }

    /**
     * Operation advertisersupdateAuthorizeNetCustomerProfileIDdoWithHttpInfo
     *
     * Update Authorize Net Customer Profile ID
     *
     * @param  int $advertiser_id (required)
     * @param  string $auth_net_customer_profile_id (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdoWithHttpInfo($advertiser_id, $auth_net_customer_profile_id = null)
    {
        $returnType = '';
        $request = $this->advertisersupdateAuthorizeNetCustomerProfileIDdoRequest($advertiser_id, $auth_net_customer_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateAuthorizeNetCustomerProfileIDdoAsync
     *
     * Update Authorize Net Customer Profile ID
     *
     * @param  int $advertiser_id (required)
     * @param  string $auth_net_customer_profile_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdoAsync($advertiser_id, $auth_net_customer_profile_id = null)
    {
        return $this->advertisersupdateAuthorizeNetCustomerProfileIDdoAsyncWithHttpInfo($advertiser_id, $auth_net_customer_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateAuthorizeNetCustomerProfileIDdoAsyncWithHttpInfo
     *
     * Update Authorize Net Customer Profile ID
     *
     * @param  int $advertiser_id (required)
     * @param  string $auth_net_customer_profile_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdoAsyncWithHttpInfo($advertiser_id, $auth_net_customer_profile_id = null)
    {
        $returnType = '';
        $request = $this->advertisersupdateAuthorizeNetCustomerProfileIDdoRequest($advertiser_id, $auth_net_customer_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateAuthorizeNetCustomerProfileIDdo'
     *
     * @param  int $advertiser_id (required)
     * @param  string $auth_net_customer_profile_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersupdateAuthorizeNetCustomerProfileIDdoRequest($advertiser_id, $auth_net_customer_profile_id = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersupdateAuthorizeNetCustomerProfileIDdo'
            );
        }

        $resourcePath = '/advertisers/updateAuthorizeNetCustomerProfileID.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($auth_net_customer_profile_id !== null) {
            $queryParams['authNetCustomerProfileID'] = ObjectSerializer::toQueryValue($auth_net_customer_profile_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateAutoRechargeSettingsdo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $enable_auto_recharge enable_auto_recharge (optional)
     * @param  BigDecimal $auto_charge_balance auto_charge_balance (optional)
     * @param  BigDecimal $auto_charge_amount auto_charge_amount (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersupdateAutoRechargeSettingsdo($advertiser_id, $enable_auto_recharge = null, $auto_charge_balance = null, $auto_charge_amount = null)
    {
        $this->advertisersupdateAutoRechargeSettingsdoWithHttpInfo($advertiser_id, $enable_auto_recharge, $auto_charge_balance, $auto_charge_amount);
    }

    /**
     * Operation advertisersupdateAutoRechargeSettingsdoWithHttpInfo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $advertiser_id (required)
     * @param  string $enable_auto_recharge (optional)
     * @param  BigDecimal $auto_charge_balance (optional)
     * @param  BigDecimal $auto_charge_amount (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateAutoRechargeSettingsdoWithHttpInfo($advertiser_id, $enable_auto_recharge = null, $auto_charge_balance = null, $auto_charge_amount = null)
    {
        $returnType = '';
        $request = $this->advertisersupdateAutoRechargeSettingsdoRequest($advertiser_id, $enable_auto_recharge, $auto_charge_balance, $auto_charge_amount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateAutoRechargeSettingsdoAsync
     *
     * Update Auto Recharge Settings
     *
     * @param  int $advertiser_id (required)
     * @param  string $enable_auto_recharge (optional)
     * @param  BigDecimal $auto_charge_balance (optional)
     * @param  BigDecimal $auto_charge_amount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateAutoRechargeSettingsdoAsync($advertiser_id, $enable_auto_recharge = null, $auto_charge_balance = null, $auto_charge_amount = null)
    {
        return $this->advertisersupdateAutoRechargeSettingsdoAsyncWithHttpInfo($advertiser_id, $enable_auto_recharge, $auto_charge_balance, $auto_charge_amount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateAutoRechargeSettingsdoAsyncWithHttpInfo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $advertiser_id (required)
     * @param  string $enable_auto_recharge (optional)
     * @param  BigDecimal $auto_charge_balance (optional)
     * @param  BigDecimal $auto_charge_amount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateAutoRechargeSettingsdoAsyncWithHttpInfo($advertiser_id, $enable_auto_recharge = null, $auto_charge_balance = null, $auto_charge_amount = null)
    {
        $returnType = '';
        $request = $this->advertisersupdateAutoRechargeSettingsdoRequest($advertiser_id, $enable_auto_recharge, $auto_charge_balance, $auto_charge_amount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateAutoRechargeSettingsdo'
     *
     * @param  int $advertiser_id (required)
     * @param  string $enable_auto_recharge (optional)
     * @param  BigDecimal $auto_charge_balance (optional)
     * @param  BigDecimal $auto_charge_amount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersupdateAutoRechargeSettingsdoRequest($advertiser_id, $enable_auto_recharge = null, $auto_charge_balance = null, $auto_charge_amount = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersupdateAutoRechargeSettingsdo'
            );
        }

        $resourcePath = '/advertisers/updateAutoRechargeSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($enable_auto_recharge !== null) {
            $queryParams['enableAutoRecharge'] = ObjectSerializer::toQueryValue($enable_auto_recharge);
        }
        // query params
        if ($auto_charge_balance !== null) {
            $queryParams['autoChargeBalance'] = ObjectSerializer::toQueryValue($auto_charge_balance);
        }
        // query params
        if ($auto_charge_amount !== null) {
            $queryParams['autoChargeAmount'] = ObjectSerializer::toQueryValue($auto_charge_amount);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateBillingdo
     *
     * Update Billing
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $billing_cycle billing_cycle (optional)
     * @param  string $tax_id tax_id (optional)
     * @param  string $tax_class tax_class (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersupdateBillingdo($advertiser_id, $billing_cycle = null, $tax_id = null, $tax_class = null)
    {
        $this->advertisersupdateBillingdoWithHttpInfo($advertiser_id, $billing_cycle, $tax_id, $tax_class);
    }

    /**
     * Operation advertisersupdateBillingdoWithHttpInfo
     *
     * Update Billing
     *
     * @param  int $advertiser_id (required)
     * @param  string $billing_cycle (optional)
     * @param  string $tax_id (optional)
     * @param  string $tax_class (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateBillingdoWithHttpInfo($advertiser_id, $billing_cycle = null, $tax_id = null, $tax_class = null)
    {
        $returnType = '';
        $request = $this->advertisersupdateBillingdoRequest($advertiser_id, $billing_cycle, $tax_id, $tax_class);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateBillingdoAsync
     *
     * Update Billing
     *
     * @param  int $advertiser_id (required)
     * @param  string $billing_cycle (optional)
     * @param  string $tax_id (optional)
     * @param  string $tax_class (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateBillingdoAsync($advertiser_id, $billing_cycle = null, $tax_id = null, $tax_class = null)
    {
        return $this->advertisersupdateBillingdoAsyncWithHttpInfo($advertiser_id, $billing_cycle, $tax_id, $tax_class)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateBillingdoAsyncWithHttpInfo
     *
     * Update Billing
     *
     * @param  int $advertiser_id (required)
     * @param  string $billing_cycle (optional)
     * @param  string $tax_id (optional)
     * @param  string $tax_class (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateBillingdoAsyncWithHttpInfo($advertiser_id, $billing_cycle = null, $tax_id = null, $tax_class = null)
    {
        $returnType = '';
        $request = $this->advertisersupdateBillingdoRequest($advertiser_id, $billing_cycle, $tax_id, $tax_class);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateBillingdo'
     *
     * @param  int $advertiser_id (required)
     * @param  string $billing_cycle (optional)
     * @param  string $tax_id (optional)
     * @param  string $tax_class (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersupdateBillingdoRequest($advertiser_id, $billing_cycle = null, $tax_id = null, $tax_class = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersupdateBillingdo'
            );
        }

        $resourcePath = '/advertisers/updateBilling.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($billing_cycle !== null) {
            $queryParams['billingCycle'] = ObjectSerializer::toQueryValue($billing_cycle);
        }
        // query params
        if ($tax_id !== null) {
            $queryParams['taxID'] = ObjectSerializer::toQueryValue($tax_id);
        }
        // query params
        if ($tax_class !== null) {
            $queryParams['taxClass'] = ObjectSerializer::toQueryValue($tax_class);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateInfodo
     *
     * Update Info
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $advertiser_name advertiser_name (optional)
     * @param  string $website website (optional)
     * @param  string $alternate_id alternate_id (optional)
     * @param  string $source source (optional)
     * @param  string $external_crmid external_crmid (optional)
     * @param  int $number_of_staff number_of_staff (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $city city (optional)
     * @param  string $state state (optional)
     * @param  string $zip_code zip_code (optional)
     * @param  string $country country (optional)
     * @param  string $reporting_url reporting_url (optional)
     * @param  string $reporting_username reporting_username (optional)
     * @param  string $reporting_password reporting_password (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersupdateInfodo($advertiser_id, $advertiser_name = null, $website = null, $alternate_id = null, $source = null, $external_crmid = null, $number_of_staff = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        $this->advertisersupdateInfodoWithHttpInfo($advertiser_id, $advertiser_name, $website, $alternate_id, $source, $external_crmid, $number_of_staff, $address, $address2, $city, $state, $zip_code, $country, $reporting_url, $reporting_username, $reporting_password);
    }

    /**
     * Operation advertisersupdateInfodoWithHttpInfo
     *
     * Update Info
     *
     * @param  int $advertiser_id (required)
     * @param  string $advertiser_name (optional)
     * @param  string $website (optional)
     * @param  string $alternate_id (optional)
     * @param  string $source (optional)
     * @param  string $external_crmid (optional)
     * @param  int $number_of_staff (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     * @param  string $reporting_url (optional)
     * @param  string $reporting_username (optional)
     * @param  string $reporting_password (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateInfodoWithHttpInfo($advertiser_id, $advertiser_name = null, $website = null, $alternate_id = null, $source = null, $external_crmid = null, $number_of_staff = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        $returnType = '';
        $request = $this->advertisersupdateInfodoRequest($advertiser_id, $advertiser_name, $website, $alternate_id, $source, $external_crmid, $number_of_staff, $address, $address2, $city, $state, $zip_code, $country, $reporting_url, $reporting_username, $reporting_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateInfodoAsync
     *
     * Update Info
     *
     * @param  int $advertiser_id (required)
     * @param  string $advertiser_name (optional)
     * @param  string $website (optional)
     * @param  string $alternate_id (optional)
     * @param  string $source (optional)
     * @param  string $external_crmid (optional)
     * @param  int $number_of_staff (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     * @param  string $reporting_url (optional)
     * @param  string $reporting_username (optional)
     * @param  string $reporting_password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateInfodoAsync($advertiser_id, $advertiser_name = null, $website = null, $alternate_id = null, $source = null, $external_crmid = null, $number_of_staff = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        return $this->advertisersupdateInfodoAsyncWithHttpInfo($advertiser_id, $advertiser_name, $website, $alternate_id, $source, $external_crmid, $number_of_staff, $address, $address2, $city, $state, $zip_code, $country, $reporting_url, $reporting_username, $reporting_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateInfodoAsyncWithHttpInfo
     *
     * Update Info
     *
     * @param  int $advertiser_id (required)
     * @param  string $advertiser_name (optional)
     * @param  string $website (optional)
     * @param  string $alternate_id (optional)
     * @param  string $source (optional)
     * @param  string $external_crmid (optional)
     * @param  int $number_of_staff (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     * @param  string $reporting_url (optional)
     * @param  string $reporting_username (optional)
     * @param  string $reporting_password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateInfodoAsyncWithHttpInfo($advertiser_id, $advertiser_name = null, $website = null, $alternate_id = null, $source = null, $external_crmid = null, $number_of_staff = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        $returnType = '';
        $request = $this->advertisersupdateInfodoRequest($advertiser_id, $advertiser_name, $website, $alternate_id, $source, $external_crmid, $number_of_staff, $address, $address2, $city, $state, $zip_code, $country, $reporting_url, $reporting_username, $reporting_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateInfodo'
     *
     * @param  int $advertiser_id (required)
     * @param  string $advertiser_name (optional)
     * @param  string $website (optional)
     * @param  string $alternate_id (optional)
     * @param  string $source (optional)
     * @param  string $external_crmid (optional)
     * @param  int $number_of_staff (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zip_code (optional)
     * @param  string $country (optional)
     * @param  string $reporting_url (optional)
     * @param  string $reporting_username (optional)
     * @param  string $reporting_password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersupdateInfodoRequest($advertiser_id, $advertiser_name = null, $website = null, $alternate_id = null, $source = null, $external_crmid = null, $number_of_staff = null, $address = null, $address2 = null, $city = null, $state = null, $zip_code = null, $country = null, $reporting_url = null, $reporting_username = null, $reporting_password = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling advertisersupdateInfodo'
            );
        }

        $resourcePath = '/advertisers/updateInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($advertiser_name !== null) {
            $queryParams['advertiserName'] = ObjectSerializer::toQueryValue($advertiser_name);
        }
        // query params
        if ($website !== null) {
            $queryParams['website'] = ObjectSerializer::toQueryValue($website);
        }
        // query params
        if ($alternate_id !== null) {
            $queryParams['alternateID'] = ObjectSerializer::toQueryValue($alternate_id);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if ($external_crmid !== null) {
            $queryParams['externalCRMID'] = ObjectSerializer::toQueryValue($external_crmid);
        }
        // query params
        if ($number_of_staff !== null) {
            $queryParams['numberOfStaff'] = ObjectSerializer::toQueryValue($number_of_staff);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($zip_code !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zip_code);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($reporting_url !== null) {
            $queryParams['reportingUrl'] = ObjectSerializer::toQueryValue($reporting_url);
        }
        // query params
        if ($reporting_username !== null) {
            $queryParams['reportingUsername'] = ObjectSerializer::toQueryValue($reporting_username);
        }
        // query params
        if ($reporting_password !== null) {
            $queryParams['reportingPassword'] = ObjectSerializer::toQueryValue($reporting_password);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdatePortalSettingsdo
     *
     * Update Portal Settings
     *
     * @param  string $portal_access portal_access (optional)
     * @param  string $two_way_auth two_way_auth (optional)
     * @param  string $manage_users manage_users (optional)
     * @param  string $manage_offers manage_offers (optional)
     * @param  string $update_billing_info update_billing_info (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advertisersupdatePortalSettingsdo($portal_access = null, $two_way_auth = null, $manage_users = null, $manage_offers = null, $update_billing_info = null)
    {
        $this->advertisersupdatePortalSettingsdoWithHttpInfo($portal_access, $two_way_auth, $manage_users, $manage_offers, $update_billing_info);
    }

    /**
     * Operation advertisersupdatePortalSettingsdoWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  string $portal_access (optional)
     * @param  string $two_way_auth (optional)
     * @param  string $manage_users (optional)
     * @param  string $manage_offers (optional)
     * @param  string $update_billing_info (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdatePortalSettingsdoWithHttpInfo($portal_access = null, $two_way_auth = null, $manage_users = null, $manage_offers = null, $update_billing_info = null)
    {
        $returnType = '';
        $request = $this->advertisersupdatePortalSettingsdoRequest($portal_access, $two_way_auth, $manage_users, $manage_offers, $update_billing_info);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdatePortalSettingsdoAsync
     *
     * Update Portal Settings
     *
     * @param  string $portal_access (optional)
     * @param  string $two_way_auth (optional)
     * @param  string $manage_users (optional)
     * @param  string $manage_offers (optional)
     * @param  string $update_billing_info (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdatePortalSettingsdoAsync($portal_access = null, $two_way_auth = null, $manage_users = null, $manage_offers = null, $update_billing_info = null)
    {
        return $this->advertisersupdatePortalSettingsdoAsyncWithHttpInfo($portal_access, $two_way_auth, $manage_users, $manage_offers, $update_billing_info)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdatePortalSettingsdoAsyncWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  string $portal_access (optional)
     * @param  string $two_way_auth (optional)
     * @param  string $manage_users (optional)
     * @param  string $manage_offers (optional)
     * @param  string $update_billing_info (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdatePortalSettingsdoAsyncWithHttpInfo($portal_access = null, $two_way_auth = null, $manage_users = null, $manage_offers = null, $update_billing_info = null)
    {
        $returnType = '';
        $request = $this->advertisersupdatePortalSettingsdoRequest($portal_access, $two_way_auth, $manage_users, $manage_offers, $update_billing_info);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdatePortalSettingsdo'
     *
     * @param  string $portal_access (optional)
     * @param  string $two_way_auth (optional)
     * @param  string $manage_users (optional)
     * @param  string $manage_offers (optional)
     * @param  string $update_billing_info (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersupdatePortalSettingsdoRequest($portal_access = null, $two_way_auth = null, $manage_users = null, $manage_offers = null, $update_billing_info = null)
    {

        $resourcePath = '/advertisers/updatePortalSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($portal_access !== null) {
            $queryParams['portal_access'] = ObjectSerializer::toQueryValue($portal_access);
        }
        // query params
        if ($two_way_auth !== null) {
            $queryParams['two_way_auth'] = ObjectSerializer::toQueryValue($two_way_auth);
        }
        // query params
        if ($manage_users !== null) {
            $queryParams['manage_users'] = ObjectSerializer::toQueryValue($manage_users);
        }
        // query params
        if ($manage_offers !== null) {
            $queryParams['manage_offers'] = ObjectSerializer::toQueryValue($manage_offers);
        }
        // query params
        if ($update_billing_info !== null) {
            $queryParams['update_billing_info'] = ObjectSerializer::toQueryValue($update_billing_info);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
