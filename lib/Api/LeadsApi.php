<?php
/**
 * LeadsApi
 * PHP version 5
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LeadspediaApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LeadspediaApi\ApiException;
use LeadspediaApi\Configuration;
use LeadspediaApi\HeaderSelector;
use LeadspediaApi\ObjectSerializer;

/**
 * LeadsApi Class Doc Comment
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation leadsapproveReturndo
     *
     * Approve Return
     *
     * @param  string $lead_id lead_id (required)
     * @param  int $contract_id contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsapproveReturndo($lead_id, $contract_id)
    {
        $this->leadsapproveReturndoWithHttpInfo($lead_id, $contract_id);
    }

    /**
     * Operation leadsapproveReturndoWithHttpInfo
     *
     * Approve Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsapproveReturndoWithHttpInfo($lead_id, $contract_id)
    {
        $returnType = '';
        $request = $this->leadsapproveReturndoRequest($lead_id, $contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsapproveReturndoAsync
     *
     * Approve Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsapproveReturndoAsync($lead_id, $contract_id)
    {
        return $this->leadsapproveReturndoAsyncWithHttpInfo($lead_id, $contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsapproveReturndoAsyncWithHttpInfo
     *
     * Approve Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsapproveReturndoAsyncWithHttpInfo($lead_id, $contract_id)
    {
        $returnType = '';
        $request = $this->leadsapproveReturndoRequest($lead_id, $contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsapproveReturndo'
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsapproveReturndoRequest($lead_id, $contract_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsapproveReturndo'
            );
        }
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadsapproveReturndo'
            );
        }

        $resourcePath = '/leads/approveReturn.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetAlldo
     *
     * Get All
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $vertical_id vertical_id (optional)
     * @param  string $paid paid (optional)
     * @param  string $scrubbed scrubbed (optional)
     * @param  \DateTime $to_date to_date (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsgetAlldo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $paid = null, $scrubbed = null, $to_date = null, $start = null, $limit = null)
    {
        $this->leadsgetAlldoWithHttpInfo($from_date, $campaign_id, $affiliate_id, $vertical_id, $paid, $scrubbed, $to_date, $start, $limit);
    }

    /**
     * Operation leadsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  string $paid (optional)
     * @param  string $scrubbed (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetAlldoWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $paid = null, $scrubbed = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetAlldoRequest($from_date, $campaign_id, $affiliate_id, $vertical_id, $paid, $scrubbed, $to_date, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetAlldoAsync
     *
     * Get All
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  string $paid (optional)
     * @param  string $scrubbed (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetAlldoAsync($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $paid = null, $scrubbed = null, $to_date = null, $start = null, $limit = null)
    {
        return $this->leadsgetAlldoAsyncWithHttpInfo($from_date, $campaign_id, $affiliate_id, $vertical_id, $paid, $scrubbed, $to_date, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  string $paid (optional)
     * @param  string $scrubbed (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetAlldoAsyncWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $paid = null, $scrubbed = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetAlldoRequest($from_date, $campaign_id, $affiliate_id, $vertical_id, $paid, $scrubbed, $to_date, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetAlldo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  string $paid (optional)
     * @param  string $scrubbed (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetAlldoRequest($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $paid = null, $scrubbed = null, $to_date = null, $start = null, $limit = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsgetAlldo'
            );
        }

        $resourcePath = '/leads/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($paid !== null) {
            $queryParams['paid'] = ObjectSerializer::toQueryValue($paid);
        }
        // query params
        if ($scrubbed !== null) {
            $queryParams['scrubbed'] = ObjectSerializer::toQueryValue($scrubbed);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetLeadDatado
     *
     * Get Lead Data
     *
     * @param  string $lead_id lead_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsgetLeadDatado($lead_id)
    {
        $this->leadsgetLeadDatadoWithHttpInfo($lead_id);
    }

    /**
     * Operation leadsgetLeadDatadoWithHttpInfo
     *
     * Get Lead Data
     *
     * @param  string $lead_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetLeadDatadoWithHttpInfo($lead_id)
    {
        $returnType = '';
        $request = $this->leadsgetLeadDatadoRequest($lead_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetLeadDatadoAsync
     *
     * Get Lead Data
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetLeadDatadoAsync($lead_id)
    {
        return $this->leadsgetLeadDatadoAsyncWithHttpInfo($lead_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetLeadDatadoAsyncWithHttpInfo
     *
     * Get Lead Data
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetLeadDatadoAsyncWithHttpInfo($lead_id)
    {
        $returnType = '';
        $request = $this->leadsgetLeadDatadoRequest($lead_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetLeadDatado'
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetLeadDatadoRequest($lead_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsgetLeadDatado'
            );
        }

        $resourcePath = '/leads/getLeadData.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetLeadInfodo
     *
     * Get Lead Info
     *
     * @param  string $lead_id lead_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsgetLeadInfodo($lead_id)
    {
        $this->leadsgetLeadInfodoWithHttpInfo($lead_id);
    }

    /**
     * Operation leadsgetLeadInfodoWithHttpInfo
     *
     * Get Lead Info
     *
     * @param  string $lead_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetLeadInfodoWithHttpInfo($lead_id)
    {
        $returnType = '';
        $request = $this->leadsgetLeadInfodoRequest($lead_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetLeadInfodoAsync
     *
     * Get Lead Info
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetLeadInfodoAsync($lead_id)
    {
        return $this->leadsgetLeadInfodoAsyncWithHttpInfo($lead_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetLeadInfodoAsyncWithHttpInfo
     *
     * Get Lead Info
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetLeadInfodoAsyncWithHttpInfo($lead_id)
    {
        $returnType = '';
        $request = $this->leadsgetLeadInfodoRequest($lead_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetLeadInfodo'
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetLeadInfodoRequest($lead_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsgetLeadInfodo'
            );
        }

        $resourcePath = '/leads/getLeadInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetQueuedo
     *
     * Get Queue
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $vertical_id vertical_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsgetQueuedo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $this->leadsgetQueuedoWithHttpInfo($from_date, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);
    }

    /**
     * Operation leadsgetQueuedoWithHttpInfo
     *
     * Get Queue
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetQueuedoWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetQueuedoRequest($from_date, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetQueuedoAsync
     *
     * Get Queue
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetQueuedoAsync($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        return $this->leadsgetQueuedoAsyncWithHttpInfo($from_date, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetQueuedoAsyncWithHttpInfo
     *
     * Get Queue
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetQueuedoAsyncWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetQueuedoRequest($from_date, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetQueuedo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetQueuedoRequest($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsgetQueuedo'
            );
        }

        $resourcePath = '/leads/getQueue.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetReturnsdo
     *
     * Get Returns
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $contract_id contract_id (optional)
     * @param  string $status status (optional)
     * @param  int $return_reason_id return_reason_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsgetReturnsdo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $status = null, $return_reason_id = null, $to_date = null, $start = null, $limit = null)
    {
        $this->leadsgetReturnsdoWithHttpInfo($from_date, $campaign_id, $affiliate_id, $vertical_id, $advertiser_id, $contract_id, $status, $return_reason_id, $to_date, $start, $limit);
    }

    /**
     * Operation leadsgetReturnsdoWithHttpInfo
     *
     * Get Returns
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  string $status (optional)
     * @param  int $return_reason_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetReturnsdoWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $status = null, $return_reason_id = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetReturnsdoRequest($from_date, $campaign_id, $affiliate_id, $vertical_id, $advertiser_id, $contract_id, $status, $return_reason_id, $to_date, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetReturnsdoAsync
     *
     * Get Returns
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  string $status (optional)
     * @param  int $return_reason_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetReturnsdoAsync($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $status = null, $return_reason_id = null, $to_date = null, $start = null, $limit = null)
    {
        return $this->leadsgetReturnsdoAsyncWithHttpInfo($from_date, $campaign_id, $affiliate_id, $vertical_id, $advertiser_id, $contract_id, $status, $return_reason_id, $to_date, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetReturnsdoAsyncWithHttpInfo
     *
     * Get Returns
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  string $status (optional)
     * @param  int $return_reason_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetReturnsdoAsyncWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $status = null, $return_reason_id = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetReturnsdoRequest($from_date, $campaign_id, $affiliate_id, $vertical_id, $advertiser_id, $contract_id, $status, $return_reason_id, $to_date, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetReturnsdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  string $status (optional)
     * @param  int $return_reason_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetReturnsdoRequest($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $status = null, $return_reason_id = null, $to_date = null, $start = null, $limit = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsgetReturnsdo'
            );
        }

        $resourcePath = '/leads/getReturns.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($return_reason_id !== null) {
            $queryParams['returnReasonID'] = ObjectSerializer::toQueryValue($return_reason_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetReviewdo
     *
     * Get Review
     *
     * @param  string $lead_id lead_id (optional)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsgetReviewdo($lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $start = null, $limit = null)
    {
        $this->leadsgetReviewdoWithHttpInfo($lead_id, $campaign_id, $affiliate_id, $vertical_id, $start, $limit);
    }

    /**
     * Operation leadsgetReviewdoWithHttpInfo
     *
     * Get Review
     *
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetReviewdoWithHttpInfo($lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetReviewdoRequest($lead_id, $campaign_id, $affiliate_id, $vertical_id, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetReviewdoAsync
     *
     * Get Review
     *
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetReviewdoAsync($lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $start = null, $limit = null)
    {
        return $this->leadsgetReviewdoAsyncWithHttpInfo($lead_id, $campaign_id, $affiliate_id, $vertical_id, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetReviewdoAsyncWithHttpInfo
     *
     * Get Review
     *
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetReviewdoAsyncWithHttpInfo($lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetReviewdoRequest($lead_id, $campaign_id, $affiliate_id, $vertical_id, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetReviewdo'
     *
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetReviewdoRequest($lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $start = null, $limit = null)
    {

        $resourcePath = '/leads/getReview.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetScrubbeddo
     *
     * Get Scrubbed
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $vertical_id vertical_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsgetScrubbeddo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $this->leadsgetScrubbeddoWithHttpInfo($from_date, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);
    }

    /**
     * Operation leadsgetScrubbeddoWithHttpInfo
     *
     * Get Scrubbed
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetScrubbeddoWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetScrubbeddoRequest($from_date, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetScrubbeddoAsync
     *
     * Get Scrubbed
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetScrubbeddoAsync($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        return $this->leadsgetScrubbeddoAsyncWithHttpInfo($from_date, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetScrubbeddoAsyncWithHttpInfo
     *
     * Get Scrubbed
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetScrubbeddoAsyncWithHttpInfo($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetScrubbeddoRequest($from_date, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetScrubbeddo'
     *
     * @param  \DateTime $from_date (required)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetScrubbeddoRequest($from_date, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsgetScrubbeddo'
            );
        }

        $resourcePath = '/leads/getScrubbed.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetSolddo
     *
     * Get Sold
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  string $lead_id lead_id (optional)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $vertical_id vertical_id (optional)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  int $contract_id contract_id (optional)
     * @param  string $returned returned (optional)
     * @param  \DateTime $to_date to_date (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function leadsgetSolddo($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $returned = null, $to_date = null, $start = null, $limit = null)
    {
        list($response) = $this->leadsgetSolddoWithHttpInfo($from_date, $lead_id, $campaign_id, $affiliate_id, $vertical_id, $advertiser_id, $contract_id, $returned, $to_date, $start, $limit);
        return $response;
    }

    /**
     * Operation leadsgetSolddoWithHttpInfo
     *
     * Get Sold
     *
     * @param  \DateTime $from_date (required)
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  string $returned (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetSolddoWithHttpInfo($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $returned = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = 'object';
        $request = $this->leadsgetSolddoRequest($from_date, $lead_id, $campaign_id, $affiliate_id, $vertical_id, $advertiser_id, $contract_id, $returned, $to_date, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetSolddoAsync
     *
     * Get Sold
     *
     * @param  \DateTime $from_date (required)
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  string $returned (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetSolddoAsync($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $returned = null, $to_date = null, $start = null, $limit = null)
    {
        return $this->leadsgetSolddoAsyncWithHttpInfo($from_date, $lead_id, $campaign_id, $affiliate_id, $vertical_id, $advertiser_id, $contract_id, $returned, $to_date, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetSolddoAsyncWithHttpInfo
     *
     * Get Sold
     *
     * @param  \DateTime $from_date (required)
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  string $returned (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetSolddoAsyncWithHttpInfo($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $returned = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = 'object';
        $request = $this->leadsgetSolddoRequest($from_date, $lead_id, $campaign_id, $affiliate_id, $vertical_id, $advertiser_id, $contract_id, $returned, $to_date, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetSolddo'
     *
     * @param  \DateTime $from_date (required)
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  int $advertiser_id (optional)
     * @param  int $contract_id (optional)
     * @param  string $returned (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetSolddoRequest($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $advertiser_id = null, $contract_id = null, $returned = null, $to_date = null, $start = null, $limit = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsgetSolddo'
            );
        }

        $resourcePath = '/leads/getSold.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($returned !== null) {
            $queryParams['returned'] = ObjectSerializer::toQueryValue($returned);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetTrashdo
     *
     * Get Trash
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  string $lead_id lead_id (optional)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $affiliate_id affiliate_id (optional)
     * @param  int $vertical_id vertical_id (optional)
     * @param  \DateTime $to_date to_date (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsgetTrashdo($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $this->leadsgetTrashdoWithHttpInfo($from_date, $lead_id, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);
    }

    /**
     * Operation leadsgetTrashdoWithHttpInfo
     *
     * Get Trash
     *
     * @param  \DateTime $from_date (required)
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetTrashdoWithHttpInfo($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetTrashdoRequest($from_date, $lead_id, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetTrashdoAsync
     *
     * Get Trash
     *
     * @param  \DateTime $from_date (required)
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetTrashdoAsync($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        return $this->leadsgetTrashdoAsyncWithHttpInfo($from_date, $lead_id, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetTrashdoAsyncWithHttpInfo
     *
     * Get Trash
     *
     * @param  \DateTime $from_date (required)
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetTrashdoAsyncWithHttpInfo($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->leadsgetTrashdoRequest($from_date, $lead_id, $campaign_id, $affiliate_id, $vertical_id, $to_date, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetTrashdo'
     *
     * @param  \DateTime $from_date (required)
     * @param  string $lead_id (optional)
     * @param  int $campaign_id (optional)
     * @param  int $affiliate_id (optional)
     * @param  int $vertical_id (optional)
     * @param  \DateTime $to_date (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetTrashdoRequest($from_date, $lead_id = null, $campaign_id = null, $affiliate_id = null, $vertical_id = null, $to_date = null, $start = null, $limit = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling leadsgetTrashdo'
            );
        }

        $resourcePath = '/leads/getTrash.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($affiliate_id !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliate_id);
        }
        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsrejectReturndo
     *
     * Reject Return
     *
     * @param  string $lead_id lead_id (required)
     * @param  int $contract_id contract_id (required)
     * @param  int $reject_reason_id reject_reason_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsrejectReturndo($lead_id, $contract_id, $reject_reason_id)
    {
        $this->leadsrejectReturndoWithHttpInfo($lead_id, $contract_id, $reject_reason_id);
    }

    /**
     * Operation leadsrejectReturndoWithHttpInfo
     *
     * Reject Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $reject_reason_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsrejectReturndoWithHttpInfo($lead_id, $contract_id, $reject_reason_id)
    {
        $returnType = '';
        $request = $this->leadsrejectReturndoRequest($lead_id, $contract_id, $reject_reason_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsrejectReturndoAsync
     *
     * Reject Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $reject_reason_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsrejectReturndoAsync($lead_id, $contract_id, $reject_reason_id)
    {
        return $this->leadsrejectReturndoAsyncWithHttpInfo($lead_id, $contract_id, $reject_reason_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsrejectReturndoAsyncWithHttpInfo
     *
     * Reject Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $reject_reason_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsrejectReturndoAsyncWithHttpInfo($lead_id, $contract_id, $reject_reason_id)
    {
        $returnType = '';
        $request = $this->leadsrejectReturndoRequest($lead_id, $contract_id, $reject_reason_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsrejectReturndo'
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $reject_reason_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsrejectReturndoRequest($lead_id, $contract_id, $reject_reason_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsrejectReturndo'
            );
        }
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadsrejectReturndo'
            );
        }
        // verify the required parameter 'reject_reason_id' is set
        if ($reject_reason_id === null || (is_array($reject_reason_id) && count($reject_reason_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reject_reason_id when calling leadsrejectReturndo'
            );
        }

        $resourcePath = '/leads/rejectReturn.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($reject_reason_id !== null) {
            $queryParams['rejectReasonID'] = ObjectSerializer::toQueryValue($reject_reason_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsrequestReturndo
     *
     * Request Return
     *
     * @param  string $lead_id lead_id (required)
     * @param  int $contract_id contract_id (required)
     * @param  int $return_reason_id return_reason_id (required)
     * @param  string $return_notes return_notes (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsrequestReturndo($lead_id, $contract_id, $return_reason_id, $return_notes = null)
    {
        $this->leadsrequestReturndoWithHttpInfo($lead_id, $contract_id, $return_reason_id, $return_notes);
    }

    /**
     * Operation leadsrequestReturndoWithHttpInfo
     *
     * Request Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $return_notes (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsrequestReturndoWithHttpInfo($lead_id, $contract_id, $return_reason_id, $return_notes = null)
    {
        $returnType = '';
        $request = $this->leadsrequestReturndoRequest($lead_id, $contract_id, $return_reason_id, $return_notes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsrequestReturndoAsync
     *
     * Request Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $return_notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsrequestReturndoAsync($lead_id, $contract_id, $return_reason_id, $return_notes = null)
    {
        return $this->leadsrequestReturndoAsyncWithHttpInfo($lead_id, $contract_id, $return_reason_id, $return_notes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsrequestReturndoAsyncWithHttpInfo
     *
     * Request Return
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $return_notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsrequestReturndoAsyncWithHttpInfo($lead_id, $contract_id, $return_reason_id, $return_notes = null)
    {
        $returnType = '';
        $request = $this->leadsrequestReturndoRequest($lead_id, $contract_id, $return_reason_id, $return_notes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsrequestReturndo'
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $return_notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsrequestReturndoRequest($lead_id, $contract_id, $return_reason_id, $return_notes = null)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsrequestReturndo'
            );
        }
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadsrequestReturndo'
            );
        }
        // verify the required parameter 'return_reason_id' is set
        if ($return_reason_id === null || (is_array($return_reason_id) && count($return_reason_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_reason_id when calling leadsrequestReturndo'
            );
        }

        $resourcePath = '/leads/requestReturn.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($return_reason_id !== null) {
            $queryParams['returnReasonID'] = ObjectSerializer::toQueryValue($return_reason_id);
        }
        // query params
        if ($return_notes !== null) {
            $queryParams['returnNotes'] = ObjectSerializer::toQueryValue($return_notes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsreturnLeadFromAllContractsdo
     *
     * Return Lead From All Contracts
     *
     * @param  string $lead_id lead_id (required)
     * @param  int $return_reason_id return_reason_id (required)
     * @param  string $scrub scrub (optional)
     * @param  string $replace_returns replace_returns (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsreturnLeadFromAllContractsdo($lead_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        $this->leadsreturnLeadFromAllContractsdoWithHttpInfo($lead_id, $return_reason_id, $scrub, $replace_returns);
    }

    /**
     * Operation leadsreturnLeadFromAllContractsdoWithHttpInfo
     *
     * Return Lead From All Contracts
     *
     * @param  string $lead_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $scrub (optional)
     * @param  string $replace_returns (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsreturnLeadFromAllContractsdoWithHttpInfo($lead_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        $returnType = '';
        $request = $this->leadsreturnLeadFromAllContractsdoRequest($lead_id, $return_reason_id, $scrub, $replace_returns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsreturnLeadFromAllContractsdoAsync
     *
     * Return Lead From All Contracts
     *
     * @param  string $lead_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $scrub (optional)
     * @param  string $replace_returns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreturnLeadFromAllContractsdoAsync($lead_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        return $this->leadsreturnLeadFromAllContractsdoAsyncWithHttpInfo($lead_id, $return_reason_id, $scrub, $replace_returns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsreturnLeadFromAllContractsdoAsyncWithHttpInfo
     *
     * Return Lead From All Contracts
     *
     * @param  string $lead_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $scrub (optional)
     * @param  string $replace_returns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreturnLeadFromAllContractsdoAsyncWithHttpInfo($lead_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        $returnType = '';
        $request = $this->leadsreturnLeadFromAllContractsdoRequest($lead_id, $return_reason_id, $scrub, $replace_returns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsreturnLeadFromAllContractsdo'
     *
     * @param  string $lead_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $scrub (optional)
     * @param  string $replace_returns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsreturnLeadFromAllContractsdoRequest($lead_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsreturnLeadFromAllContractsdo'
            );
        }
        // verify the required parameter 'return_reason_id' is set
        if ($return_reason_id === null || (is_array($return_reason_id) && count($return_reason_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_reason_id when calling leadsreturnLeadFromAllContractsdo'
            );
        }

        $resourcePath = '/leads/returnLeadFromAllContracts.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($return_reason_id !== null) {
            $queryParams['returnReasonID'] = ObjectSerializer::toQueryValue($return_reason_id);
        }
        // query params
        if ($scrub !== null) {
            $queryParams['scrub'] = ObjectSerializer::toQueryValue($scrub);
        }
        // query params
        if ($replace_returns !== null) {
            $queryParams['replaceReturns'] = ObjectSerializer::toQueryValue($replace_returns);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsreturnLeaddo
     *
     * Return Lead
     *
     * @param  string $lead_id lead_id (required)
     * @param  int $contract_id contract_id (required)
     * @param  int $return_reason_id return_reason_id (required)
     * @param  string $scrub scrub (optional)
     * @param  string $replace_returns replace_returns (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsreturnLeaddo($lead_id, $contract_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        $this->leadsreturnLeaddoWithHttpInfo($lead_id, $contract_id, $return_reason_id, $scrub, $replace_returns);
    }

    /**
     * Operation leadsreturnLeaddoWithHttpInfo
     *
     * Return Lead
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $scrub (optional)
     * @param  string $replace_returns (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsreturnLeaddoWithHttpInfo($lead_id, $contract_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        $returnType = '';
        $request = $this->leadsreturnLeaddoRequest($lead_id, $contract_id, $return_reason_id, $scrub, $replace_returns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsreturnLeaddoAsync
     *
     * Return Lead
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $scrub (optional)
     * @param  string $replace_returns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreturnLeaddoAsync($lead_id, $contract_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        return $this->leadsreturnLeaddoAsyncWithHttpInfo($lead_id, $contract_id, $return_reason_id, $scrub, $replace_returns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsreturnLeaddoAsyncWithHttpInfo
     *
     * Return Lead
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $scrub (optional)
     * @param  string $replace_returns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreturnLeaddoAsyncWithHttpInfo($lead_id, $contract_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        $returnType = '';
        $request = $this->leadsreturnLeaddoRequest($lead_id, $contract_id, $return_reason_id, $scrub, $replace_returns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsreturnLeaddo'
     *
     * @param  string $lead_id (required)
     * @param  int $contract_id (required)
     * @param  int $return_reason_id (required)
     * @param  string $scrub (optional)
     * @param  string $replace_returns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsreturnLeaddoRequest($lead_id, $contract_id, $return_reason_id, $scrub = null, $replace_returns = null)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsreturnLeaddo'
            );
        }
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling leadsreturnLeaddo'
            );
        }
        // verify the required parameter 'return_reason_id' is set
        if ($return_reason_id === null || (is_array($return_reason_id) && count($return_reason_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_reason_id when calling leadsreturnLeaddo'
            );
        }

        $resourcePath = '/leads/returnLead.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($contract_id !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contract_id);
        }
        // query params
        if ($return_reason_id !== null) {
            $queryParams['returnReasonID'] = ObjectSerializer::toQueryValue($return_reason_id);
        }
        // query params
        if ($scrub !== null) {
            $queryParams['scrub'] = ObjectSerializer::toQueryValue($scrub);
        }
        // query params
        if ($replace_returns !== null) {
            $queryParams['replaceReturns'] = ObjectSerializer::toQueryValue($replace_returns);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsreviewApprovedo
     *
     * Review Approve
     *
     * @param  string $lead_id lead_id (required)
     * @param  int $lead_accept_reason_id lead_accept_reason_id (required)
     * @param  string $lead_accept_reason lead_accept_reason (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsreviewApprovedo($lead_id, $lead_accept_reason_id, $lead_accept_reason = null)
    {
        $this->leadsreviewApprovedoWithHttpInfo($lead_id, $lead_accept_reason_id, $lead_accept_reason);
    }

    /**
     * Operation leadsreviewApprovedoWithHttpInfo
     *
     * Review Approve
     *
     * @param  string $lead_id (required)
     * @param  int $lead_accept_reason_id (required)
     * @param  string $lead_accept_reason (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsreviewApprovedoWithHttpInfo($lead_id, $lead_accept_reason_id, $lead_accept_reason = null)
    {
        $returnType = '';
        $request = $this->leadsreviewApprovedoRequest($lead_id, $lead_accept_reason_id, $lead_accept_reason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsreviewApprovedoAsync
     *
     * Review Approve
     *
     * @param  string $lead_id (required)
     * @param  int $lead_accept_reason_id (required)
     * @param  string $lead_accept_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreviewApprovedoAsync($lead_id, $lead_accept_reason_id, $lead_accept_reason = null)
    {
        return $this->leadsreviewApprovedoAsyncWithHttpInfo($lead_id, $lead_accept_reason_id, $lead_accept_reason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsreviewApprovedoAsyncWithHttpInfo
     *
     * Review Approve
     *
     * @param  string $lead_id (required)
     * @param  int $lead_accept_reason_id (required)
     * @param  string $lead_accept_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreviewApprovedoAsyncWithHttpInfo($lead_id, $lead_accept_reason_id, $lead_accept_reason = null)
    {
        $returnType = '';
        $request = $this->leadsreviewApprovedoRequest($lead_id, $lead_accept_reason_id, $lead_accept_reason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsreviewApprovedo'
     *
     * @param  string $lead_id (required)
     * @param  int $lead_accept_reason_id (required)
     * @param  string $lead_accept_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsreviewApprovedoRequest($lead_id, $lead_accept_reason_id, $lead_accept_reason = null)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsreviewApprovedo'
            );
        }
        // verify the required parameter 'lead_accept_reason_id' is set
        if ($lead_accept_reason_id === null || (is_array($lead_accept_reason_id) && count($lead_accept_reason_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_accept_reason_id when calling leadsreviewApprovedo'
            );
        }

        $resourcePath = '/leads/reviewApprove.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($lead_accept_reason_id !== null) {
            $queryParams['leadAcceptReasonID'] = ObjectSerializer::toQueryValue($lead_accept_reason_id);
        }
        // query params
        if ($lead_accept_reason !== null) {
            $queryParams['leadAcceptReason'] = ObjectSerializer::toQueryValue($lead_accept_reason);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsreviewRejectdo
     *
     * Review Reject
     *
     * @param  string $lead_id lead_id (required)
     * @param  int $lead_reject_reason_id lead_reject_reason_id (required)
     * @param  string $lead_reject_reason lead_reject_reason (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsreviewRejectdo($lead_id, $lead_reject_reason_id, $lead_reject_reason = null)
    {
        $this->leadsreviewRejectdoWithHttpInfo($lead_id, $lead_reject_reason_id, $lead_reject_reason);
    }

    /**
     * Operation leadsreviewRejectdoWithHttpInfo
     *
     * Review Reject
     *
     * @param  string $lead_id (required)
     * @param  int $lead_reject_reason_id (required)
     * @param  string $lead_reject_reason (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsreviewRejectdoWithHttpInfo($lead_id, $lead_reject_reason_id, $lead_reject_reason = null)
    {
        $returnType = '';
        $request = $this->leadsreviewRejectdoRequest($lead_id, $lead_reject_reason_id, $lead_reject_reason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsreviewRejectdoAsync
     *
     * Review Reject
     *
     * @param  string $lead_id (required)
     * @param  int $lead_reject_reason_id (required)
     * @param  string $lead_reject_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreviewRejectdoAsync($lead_id, $lead_reject_reason_id, $lead_reject_reason = null)
    {
        return $this->leadsreviewRejectdoAsyncWithHttpInfo($lead_id, $lead_reject_reason_id, $lead_reject_reason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsreviewRejectdoAsyncWithHttpInfo
     *
     * Review Reject
     *
     * @param  string $lead_id (required)
     * @param  int $lead_reject_reason_id (required)
     * @param  string $lead_reject_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreviewRejectdoAsyncWithHttpInfo($lead_id, $lead_reject_reason_id, $lead_reject_reason = null)
    {
        $returnType = '';
        $request = $this->leadsreviewRejectdoRequest($lead_id, $lead_reject_reason_id, $lead_reject_reason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsreviewRejectdo'
     *
     * @param  string $lead_id (required)
     * @param  int $lead_reject_reason_id (required)
     * @param  string $lead_reject_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsreviewRejectdoRequest($lead_id, $lead_reject_reason_id, $lead_reject_reason = null)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsreviewRejectdo'
            );
        }
        // verify the required parameter 'lead_reject_reason_id' is set
        if ($lead_reject_reason_id === null || (is_array($lead_reject_reason_id) && count($lead_reject_reason_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_reject_reason_id when calling leadsreviewRejectdo'
            );
        }

        $resourcePath = '/leads/reviewReject.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($lead_reject_reason_id !== null) {
            $queryParams['leadRejectReasonID'] = ObjectSerializer::toQueryValue($lead_reject_reason_id);
        }
        // query params
        if ($lead_reject_reason !== null) {
            $queryParams['leadRejectReason'] = ObjectSerializer::toQueryValue($lead_reject_reason);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsscrubLeaddo
     *
     * Scrub Lead
     *
     * @param  string $lead_id lead_id (required)
     * @param  int $scrub_reason_id scrub_reason_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsscrubLeaddo($lead_id, $scrub_reason_id)
    {
        $this->leadsscrubLeaddoWithHttpInfo($lead_id, $scrub_reason_id);
    }

    /**
     * Operation leadsscrubLeaddoWithHttpInfo
     *
     * Scrub Lead
     *
     * @param  string $lead_id (required)
     * @param  int $scrub_reason_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsscrubLeaddoWithHttpInfo($lead_id, $scrub_reason_id)
    {
        $returnType = '';
        $request = $this->leadsscrubLeaddoRequest($lead_id, $scrub_reason_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsscrubLeaddoAsync
     *
     * Scrub Lead
     *
     * @param  string $lead_id (required)
     * @param  int $scrub_reason_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsscrubLeaddoAsync($lead_id, $scrub_reason_id)
    {
        return $this->leadsscrubLeaddoAsyncWithHttpInfo($lead_id, $scrub_reason_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsscrubLeaddoAsyncWithHttpInfo
     *
     * Scrub Lead
     *
     * @param  string $lead_id (required)
     * @param  int $scrub_reason_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsscrubLeaddoAsyncWithHttpInfo($lead_id, $scrub_reason_id)
    {
        $returnType = '';
        $request = $this->leadsscrubLeaddoRequest($lead_id, $scrub_reason_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsscrubLeaddo'
     *
     * @param  string $lead_id (required)
     * @param  int $scrub_reason_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsscrubLeaddoRequest($lead_id, $scrub_reason_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsscrubLeaddo'
            );
        }
        // verify the required parameter 'scrub_reason_id' is set
        if ($scrub_reason_id === null || (is_array($scrub_reason_id) && count($scrub_reason_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scrub_reason_id when calling leadsscrubLeaddo'
            );
        }

        $resourcePath = '/leads/scrubLead.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }
        // query params
        if ($scrub_reason_id !== null) {
            $queryParams['scrubReasonID'] = ObjectSerializer::toQueryValue($scrub_reason_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsupdateLeaddo
     *
     * Update Lead
     *
     * @param  string $lead_id lead_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadsupdateLeaddo($lead_id)
    {
        $this->leadsupdateLeaddoWithHttpInfo($lead_id);
    }

    /**
     * Operation leadsupdateLeaddoWithHttpInfo
     *
     * Update Lead
     *
     * @param  string $lead_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsupdateLeaddoWithHttpInfo($lead_id)
    {
        $returnType = '';
        $request = $this->leadsupdateLeaddoRequest($lead_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsupdateLeaddoAsync
     *
     * Update Lead
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsupdateLeaddoAsync($lead_id)
    {
        return $this->leadsupdateLeaddoAsyncWithHttpInfo($lead_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsupdateLeaddoAsyncWithHttpInfo
     *
     * Update Lead
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsupdateLeaddoAsyncWithHttpInfo($lead_id)
    {
        $returnType = '';
        $request = $this->leadsupdateLeaddoRequest($lead_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsupdateLeaddo'
     *
     * @param  string $lead_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsupdateLeaddoRequest($lead_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadsupdateLeaddo'
            );
        }

        $resourcePath = '/leads/updateLead.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['leadID'] = ObjectSerializer::toQueryValue($lead_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
