<?php
/**
 * OffersApi
 * PHP version 5
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LeadspediaApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LeadspediaApi\ApiException;
use LeadspediaApi\Configuration;
use LeadspediaApi\HeaderSelector;
use LeadspediaApi\ObjectSerializer;

/**
 * OffersApi Class Doc Comment
 *
 * @category Class
 * @package  LeadspediaApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OffersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation offerschangeAutoApprovaldo
     *
     * Change Auto Approval
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $auto_approve auto_approve (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offerschangeAutoApprovaldo($offer_id, $auto_approve)
    {
        $this->offerschangeAutoApprovaldoWithHttpInfo($offer_id, $auto_approve);
    }

    /**
     * Operation offerschangeAutoApprovaldoWithHttpInfo
     *
     * Change Auto Approval
     *
     * @param  int $offer_id (required)
     * @param  string $auto_approve (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offerschangeAutoApprovaldoWithHttpInfo($offer_id, $auto_approve)
    {
        $returnType = '';
        $request = $this->offerschangeAutoApprovaldoRequest($offer_id, $auto_approve);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offerschangeAutoApprovaldoAsync
     *
     * Change Auto Approval
     *
     * @param  int $offer_id (required)
     * @param  string $auto_approve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerschangeAutoApprovaldoAsync($offer_id, $auto_approve)
    {
        return $this->offerschangeAutoApprovaldoAsyncWithHttpInfo($offer_id, $auto_approve)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offerschangeAutoApprovaldoAsyncWithHttpInfo
     *
     * Change Auto Approval
     *
     * @param  int $offer_id (required)
     * @param  string $auto_approve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerschangeAutoApprovaldoAsyncWithHttpInfo($offer_id, $auto_approve)
    {
        $returnType = '';
        $request = $this->offerschangeAutoApprovaldoRequest($offer_id, $auto_approve);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offerschangeAutoApprovaldo'
     *
     * @param  int $offer_id (required)
     * @param  string $auto_approve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offerschangeAutoApprovaldoRequest($offer_id, $auto_approve)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offerschangeAutoApprovaldo'
            );
        }
        // verify the required parameter 'auto_approve' is set
        if ($auto_approve === null || (is_array($auto_approve) && count($auto_approve) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_approve when calling offerschangeAutoApprovaldo'
            );
        }

        $resourcePath = '/offers/changeAutoApproval.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($auto_approve !== null) {
            $queryParams['autoApprove'] = ObjectSerializer::toQueryValue($auto_approve);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offerschangeFeatureListingdo
     *
     * Change Feature Listing
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $feature feature (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offerschangeFeatureListingdo($offer_id, $feature)
    {
        $this->offerschangeFeatureListingdoWithHttpInfo($offer_id, $feature);
    }

    /**
     * Operation offerschangeFeatureListingdoWithHttpInfo
     *
     * Change Feature Listing
     *
     * @param  int $offer_id (required)
     * @param  string $feature (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offerschangeFeatureListingdoWithHttpInfo($offer_id, $feature)
    {
        $returnType = '';
        $request = $this->offerschangeFeatureListingdoRequest($offer_id, $feature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offerschangeFeatureListingdoAsync
     *
     * Change Feature Listing
     *
     * @param  int $offer_id (required)
     * @param  string $feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerschangeFeatureListingdoAsync($offer_id, $feature)
    {
        return $this->offerschangeFeatureListingdoAsyncWithHttpInfo($offer_id, $feature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offerschangeFeatureListingdoAsyncWithHttpInfo
     *
     * Change Feature Listing
     *
     * @param  int $offer_id (required)
     * @param  string $feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerschangeFeatureListingdoAsyncWithHttpInfo($offer_id, $feature)
    {
        $returnType = '';
        $request = $this->offerschangeFeatureListingdoRequest($offer_id, $feature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offerschangeFeatureListingdo'
     *
     * @param  int $offer_id (required)
     * @param  string $feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offerschangeFeatureListingdoRequest($offer_id, $feature)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offerschangeFeatureListingdo'
            );
        }
        // verify the required parameter 'feature' is set
        if ($feature === null || (is_array($feature) && count($feature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature when calling offerschangeFeatureListingdo'
            );
        }

        $resourcePath = '/offers/changeFeatureListing.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($feature !== null) {
            $queryParams['feature'] = ObjectSerializer::toQueryValue($feature);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offerschangeModedo
     *
     * Change Mode
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $mode mode (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offerschangeModedo($offer_id, $mode)
    {
        $this->offerschangeModedoWithHttpInfo($offer_id, $mode);
    }

    /**
     * Operation offerschangeModedoWithHttpInfo
     *
     * Change Mode
     *
     * @param  int $offer_id (required)
     * @param  string $mode (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offerschangeModedoWithHttpInfo($offer_id, $mode)
    {
        $returnType = '';
        $request = $this->offerschangeModedoRequest($offer_id, $mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offerschangeModedoAsync
     *
     * Change Mode
     *
     * @param  int $offer_id (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerschangeModedoAsync($offer_id, $mode)
    {
        return $this->offerschangeModedoAsyncWithHttpInfo($offer_id, $mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offerschangeModedoAsyncWithHttpInfo
     *
     * Change Mode
     *
     * @param  int $offer_id (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerschangeModedoAsyncWithHttpInfo($offer_id, $mode)
    {
        $returnType = '';
        $request = $this->offerschangeModedoRequest($offer_id, $mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offerschangeModedo'
     *
     * @param  int $offer_id (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offerschangeModedoRequest($offer_id, $mode)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offerschangeModedo'
            );
        }
        // verify the required parameter 'mode' is set
        if ($mode === null || (is_array($mode) && count($mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mode when calling offerschangeModedo'
            );
        }

        $resourcePath = '/offers/changeMode.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offerschangeStatusdo
     *
     * Change Status
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $status status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offerschangeStatusdo($offer_id, $status)
    {
        $this->offerschangeStatusdoWithHttpInfo($offer_id, $status);
    }

    /**
     * Operation offerschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $offer_id (required)
     * @param  string $status (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offerschangeStatusdoWithHttpInfo($offer_id, $status)
    {
        $returnType = '';
        $request = $this->offerschangeStatusdoRequest($offer_id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offerschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $offer_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerschangeStatusdoAsync($offer_id, $status)
    {
        return $this->offerschangeStatusdoAsyncWithHttpInfo($offer_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offerschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $offer_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerschangeStatusdoAsyncWithHttpInfo($offer_id, $status)
    {
        $returnType = '';
        $request = $this->offerschangeStatusdoRequest($offer_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offerschangeStatusdo'
     *
     * @param  int $offer_id (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offerschangeStatusdoRequest($offer_id, $status)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offerschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling offerschangeStatusdo'
            );
        }

        $resourcePath = '/offers/changeStatus.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersdeletedo
     *
     * Delete
     *
     * @param  int $offer_id offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersdeletedo($offer_id)
    {
        $this->offersdeletedoWithHttpInfo($offer_id);
    }

    /**
     * Operation offersdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersdeletedoWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersdeletedoRequest($offer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersdeletedoAsync
     *
     * Delete
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersdeletedoAsync($offer_id)
    {
        return $this->offersdeletedoAsyncWithHttpInfo($offer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersdeletedoAsyncWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersdeletedoRequest($offer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersdeletedo'
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersdeletedoRequest($offer_id)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersdeletedo'
            );
        }

        $resourcePath = '/offers/delete.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersgetAlldo
     *
     * Get All
     *
     * @param  int $vertical_id vertical_id (optional)
     * @param  string $revenue_model revenue_model (optional)
     * @param  string $payout_model payout_model (optional)
     * @param  int $advertiser_id advertiser_id (optional)
     * @param  string $status status (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersgetAlldo($vertical_id = null, $revenue_model = null, $payout_model = null, $advertiser_id = null, $status = null, $start = null, $limit = null)
    {
        $this->offersgetAlldoWithHttpInfo($vertical_id, $revenue_model, $payout_model, $advertiser_id, $status, $start, $limit);
    }

    /**
     * Operation offersgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $vertical_id (optional)
     * @param  string $revenue_model (optional)
     * @param  string $payout_model (optional)
     * @param  int $advertiser_id (optional)
     * @param  string $status (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersgetAlldoWithHttpInfo($vertical_id = null, $revenue_model = null, $payout_model = null, $advertiser_id = null, $status = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->offersgetAlldoRequest($vertical_id, $revenue_model, $payout_model, $advertiser_id, $status, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersgetAlldoAsync
     *
     * Get All
     *
     * @param  int $vertical_id (optional)
     * @param  string $revenue_model (optional)
     * @param  string $payout_model (optional)
     * @param  int $advertiser_id (optional)
     * @param  string $status (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersgetAlldoAsync($vertical_id = null, $revenue_model = null, $payout_model = null, $advertiser_id = null, $status = null, $start = null, $limit = null)
    {
        return $this->offersgetAlldoAsyncWithHttpInfo($vertical_id, $revenue_model, $payout_model, $advertiser_id, $status, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $vertical_id (optional)
     * @param  string $revenue_model (optional)
     * @param  string $payout_model (optional)
     * @param  int $advertiser_id (optional)
     * @param  string $status (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersgetAlldoAsyncWithHttpInfo($vertical_id = null, $revenue_model = null, $payout_model = null, $advertiser_id = null, $status = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->offersgetAlldoRequest($vertical_id, $revenue_model, $payout_model, $advertiser_id, $status, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersgetAlldo'
     *
     * @param  int $vertical_id (optional)
     * @param  string $revenue_model (optional)
     * @param  string $payout_model (optional)
     * @param  int $advertiser_id (optional)
     * @param  string $status (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersgetAlldoRequest($vertical_id = null, $revenue_model = null, $payout_model = null, $advertiser_id = null, $status = null, $start = null, $limit = null)
    {

        $resourcePath = '/offers/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_id !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($vertical_id);
        }
        // query params
        if ($revenue_model !== null) {
            $queryParams['revenueModel'] = ObjectSerializer::toQueryValue($revenue_model);
        }
        // query params
        if ($payout_model !== null) {
            $queryParams['payoutModel'] = ObjectSerializer::toQueryValue($payout_model);
        }
        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersgetBasicInfodo
     *
     * Get Basic Info
     *
     * @param  int $offer_id offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersgetBasicInfodo($offer_id)
    {
        $this->offersgetBasicInfodoWithHttpInfo($offer_id);
    }

    /**
     * Operation offersgetBasicInfodoWithHttpInfo
     *
     * Get Basic Info
     *
     * @param  int $offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersgetBasicInfodoWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersgetBasicInfodoRequest($offer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersgetBasicInfodoAsync
     *
     * Get Basic Info
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersgetBasicInfodoAsync($offer_id)
    {
        return $this->offersgetBasicInfodoAsyncWithHttpInfo($offer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersgetBasicInfodoAsyncWithHttpInfo
     *
     * Get Basic Info
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersgetBasicInfodoAsyncWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersgetBasicInfodoRequest($offer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersgetBasicInfodo'
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersgetBasicInfodoRequest($offer_id)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersgetBasicInfodo'
            );
        }

        $resourcePath = '/offers/getBasicInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersgetEmailSettingsdo
     *
     * Get Email Settings
     *
     * @param  int $offer_id offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersgetEmailSettingsdo($offer_id)
    {
        $this->offersgetEmailSettingsdoWithHttpInfo($offer_id);
    }

    /**
     * Operation offersgetEmailSettingsdoWithHttpInfo
     *
     * Get Email Settings
     *
     * @param  int $offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersgetEmailSettingsdoWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersgetEmailSettingsdoRequest($offer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersgetEmailSettingsdoAsync
     *
     * Get Email Settings
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersgetEmailSettingsdoAsync($offer_id)
    {
        return $this->offersgetEmailSettingsdoAsyncWithHttpInfo($offer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersgetEmailSettingsdoAsyncWithHttpInfo
     *
     * Get Email Settings
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersgetEmailSettingsdoAsyncWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersgetEmailSettingsdoRequest($offer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersgetEmailSettingsdo'
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersgetEmailSettingsdoRequest($offer_id)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersgetEmailSettingsdo'
            );
        }

        $resourcePath = '/offers/getEmailSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersgetTermsSettingsdo
     *
     * Get Terms Settings
     *
     * @param  int $offer_id offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersgetTermsSettingsdo($offer_id)
    {
        $this->offersgetTermsSettingsdoWithHttpInfo($offer_id);
    }

    /**
     * Operation offersgetTermsSettingsdoWithHttpInfo
     *
     * Get Terms Settings
     *
     * @param  int $offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersgetTermsSettingsdoWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersgetTermsSettingsdoRequest($offer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersgetTermsSettingsdoAsync
     *
     * Get Terms Settings
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersgetTermsSettingsdoAsync($offer_id)
    {
        return $this->offersgetTermsSettingsdoAsyncWithHttpInfo($offer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersgetTermsSettingsdoAsyncWithHttpInfo
     *
     * Get Terms Settings
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersgetTermsSettingsdoAsyncWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersgetTermsSettingsdoRequest($offer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersgetTermsSettingsdo'
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersgetTermsSettingsdoRequest($offer_id)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersgetTermsSettingsdo'
            );
        }

        $resourcePath = '/offers/getTermsSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersremoveExpirationDatedo
     *
     * Remove Expiration Date
     *
     * @param  int $offer_id offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersremoveExpirationDatedo($offer_id)
    {
        $this->offersremoveExpirationDatedoWithHttpInfo($offer_id);
    }

    /**
     * Operation offersremoveExpirationDatedoWithHttpInfo
     *
     * Remove Expiration Date
     *
     * @param  int $offer_id (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersremoveExpirationDatedoWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersremoveExpirationDatedoRequest($offer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersremoveExpirationDatedoAsync
     *
     * Remove Expiration Date
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersremoveExpirationDatedoAsync($offer_id)
    {
        return $this->offersremoveExpirationDatedoAsyncWithHttpInfo($offer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersremoveExpirationDatedoAsyncWithHttpInfo
     *
     * Remove Expiration Date
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersremoveExpirationDatedoAsyncWithHttpInfo($offer_id)
    {
        $returnType = '';
        $request = $this->offersremoveExpirationDatedoRequest($offer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersremoveExpirationDatedo'
     *
     * @param  int $offer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersremoveExpirationDatedoRequest($offer_id)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersremoveExpirationDatedo'
            );
        }

        $resourcePath = '/offers/removeExpirationDate.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersrenamedo
     *
     * Rename
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $offer_name offer_name (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersrenamedo($offer_id, $offer_name)
    {
        $this->offersrenamedoWithHttpInfo($offer_id, $offer_name);
    }

    /**
     * Operation offersrenamedoWithHttpInfo
     *
     * Rename
     *
     * @param  int $offer_id (required)
     * @param  string $offer_name (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersrenamedoWithHttpInfo($offer_id, $offer_name)
    {
        $returnType = '';
        $request = $this->offersrenamedoRequest($offer_id, $offer_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersrenamedoAsync
     *
     * Rename
     *
     * @param  int $offer_id (required)
     * @param  string $offer_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersrenamedoAsync($offer_id, $offer_name)
    {
        return $this->offersrenamedoAsyncWithHttpInfo($offer_id, $offer_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersrenamedoAsyncWithHttpInfo
     *
     * Rename
     *
     * @param  int $offer_id (required)
     * @param  string $offer_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersrenamedoAsyncWithHttpInfo($offer_id, $offer_name)
    {
        $returnType = '';
        $request = $this->offersrenamedoRequest($offer_id, $offer_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersrenamedo'
     *
     * @param  int $offer_id (required)
     * @param  string $offer_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersrenamedoRequest($offer_id, $offer_name)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersrenamedo'
            );
        }
        // verify the required parameter 'offer_name' is set
        if ($offer_name === null || (is_array($offer_name) && count($offer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_name when calling offersrenamedo'
            );
        }

        $resourcePath = '/offers/rename.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($offer_name !== null) {
            $queryParams['offerName'] = ObjectSerializer::toQueryValue($offer_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offerssearchdo
     *
     * Search
     *
     * @param  string $name name (optional)
     * @param  int $start start (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offerssearchdo($name = null, $start = null, $limit = null)
    {
        $this->offerssearchdoWithHttpInfo($name, $start, $limit);
    }

    /**
     * Operation offerssearchdoWithHttpInfo
     *
     * Search
     *
     * @param  string $name (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offerssearchdoWithHttpInfo($name = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->offerssearchdoRequest($name, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offerssearchdoAsync
     *
     * Search
     *
     * @param  string $name (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerssearchdoAsync($name = null, $start = null, $limit = null)
    {
        return $this->offerssearchdoAsyncWithHttpInfo($name, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offerssearchdoAsyncWithHttpInfo
     *
     * Search
     *
     * @param  string $name (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerssearchdoAsyncWithHttpInfo($name = null, $start = null, $limit = null)
    {
        $returnType = '';
        $request = $this->offerssearchdoRequest($name, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offerssearchdo'
     *
     * @param  string $name (optional)
     * @param  int $start (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offerssearchdoRequest($name = null, $start = null, $limit = null)
    {

        $resourcePath = '/offers/search.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offerssetExpirationDatedo
     *
     * Set Expiration Date
     *
     * @param  int $offer_id offer_id (required)
     * @param  \DateTime $expiration_date expiration_date (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offerssetExpirationDatedo($offer_id, $expiration_date)
    {
        $this->offerssetExpirationDatedoWithHttpInfo($offer_id, $expiration_date);
    }

    /**
     * Operation offerssetExpirationDatedoWithHttpInfo
     *
     * Set Expiration Date
     *
     * @param  int $offer_id (required)
     * @param  \DateTime $expiration_date (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offerssetExpirationDatedoWithHttpInfo($offer_id, $expiration_date)
    {
        $returnType = '';
        $request = $this->offerssetExpirationDatedoRequest($offer_id, $expiration_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offerssetExpirationDatedoAsync
     *
     * Set Expiration Date
     *
     * @param  int $offer_id (required)
     * @param  \DateTime $expiration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerssetExpirationDatedoAsync($offer_id, $expiration_date)
    {
        return $this->offerssetExpirationDatedoAsyncWithHttpInfo($offer_id, $expiration_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offerssetExpirationDatedoAsyncWithHttpInfo
     *
     * Set Expiration Date
     *
     * @param  int $offer_id (required)
     * @param  \DateTime $expiration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offerssetExpirationDatedoAsyncWithHttpInfo($offer_id, $expiration_date)
    {
        $returnType = '';
        $request = $this->offerssetExpirationDatedoRequest($offer_id, $expiration_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offerssetExpirationDatedo'
     *
     * @param  int $offer_id (required)
     * @param  \DateTime $expiration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offerssetExpirationDatedoRequest($offer_id, $expiration_date)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offerssetExpirationDatedo'
            );
        }
        // verify the required parameter 'expiration_date' is set
        if ($expiration_date === null || (is_array($expiration_date) && count($expiration_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expiration_date when calling offerssetExpirationDatedo'
            );
        }

        $resourcePath = '/offers/setExpirationDate.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($expiration_date !== null) {
            $queryParams['expirationDate'] = ObjectSerializer::toQueryValue($expiration_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersupdateBasicInfodo
     *
     * Update Basic Info
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $offer_name offer_name (optional)
     * @param  string $notes notes (optional)
     * @param  string $alternative_id alternative_id (optional)
     * @param  string $preview_url preview_url (optional)
     * @param  string $offer_description offer_description (optional)
     * @param  string $testing_instructions testing_instructions (optional)
     * @param  string $offer_restrictions offer_restrictions (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersupdateBasicInfodo($offer_id, $offer_name = null, $notes = null, $alternative_id = null, $preview_url = null, $offer_description = null, $testing_instructions = null, $offer_restrictions = null)
    {
        $this->offersupdateBasicInfodoWithHttpInfo($offer_id, $offer_name, $notes, $alternative_id, $preview_url, $offer_description, $testing_instructions, $offer_restrictions);
    }

    /**
     * Operation offersupdateBasicInfodoWithHttpInfo
     *
     * Update Basic Info
     *
     * @param  int $offer_id (required)
     * @param  string $offer_name (optional)
     * @param  string $notes (optional)
     * @param  string $alternative_id (optional)
     * @param  string $preview_url (optional)
     * @param  string $offer_description (optional)
     * @param  string $testing_instructions (optional)
     * @param  string $offer_restrictions (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersupdateBasicInfodoWithHttpInfo($offer_id, $offer_name = null, $notes = null, $alternative_id = null, $preview_url = null, $offer_description = null, $testing_instructions = null, $offer_restrictions = null)
    {
        $returnType = '';
        $request = $this->offersupdateBasicInfodoRequest($offer_id, $offer_name, $notes, $alternative_id, $preview_url, $offer_description, $testing_instructions, $offer_restrictions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersupdateBasicInfodoAsync
     *
     * Update Basic Info
     *
     * @param  int $offer_id (required)
     * @param  string $offer_name (optional)
     * @param  string $notes (optional)
     * @param  string $alternative_id (optional)
     * @param  string $preview_url (optional)
     * @param  string $offer_description (optional)
     * @param  string $testing_instructions (optional)
     * @param  string $offer_restrictions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersupdateBasicInfodoAsync($offer_id, $offer_name = null, $notes = null, $alternative_id = null, $preview_url = null, $offer_description = null, $testing_instructions = null, $offer_restrictions = null)
    {
        return $this->offersupdateBasicInfodoAsyncWithHttpInfo($offer_id, $offer_name, $notes, $alternative_id, $preview_url, $offer_description, $testing_instructions, $offer_restrictions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersupdateBasicInfodoAsyncWithHttpInfo
     *
     * Update Basic Info
     *
     * @param  int $offer_id (required)
     * @param  string $offer_name (optional)
     * @param  string $notes (optional)
     * @param  string $alternative_id (optional)
     * @param  string $preview_url (optional)
     * @param  string $offer_description (optional)
     * @param  string $testing_instructions (optional)
     * @param  string $offer_restrictions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersupdateBasicInfodoAsyncWithHttpInfo($offer_id, $offer_name = null, $notes = null, $alternative_id = null, $preview_url = null, $offer_description = null, $testing_instructions = null, $offer_restrictions = null)
    {
        $returnType = '';
        $request = $this->offersupdateBasicInfodoRequest($offer_id, $offer_name, $notes, $alternative_id, $preview_url, $offer_description, $testing_instructions, $offer_restrictions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersupdateBasicInfodo'
     *
     * @param  int $offer_id (required)
     * @param  string $offer_name (optional)
     * @param  string $notes (optional)
     * @param  string $alternative_id (optional)
     * @param  string $preview_url (optional)
     * @param  string $offer_description (optional)
     * @param  string $testing_instructions (optional)
     * @param  string $offer_restrictions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersupdateBasicInfodoRequest($offer_id, $offer_name = null, $notes = null, $alternative_id = null, $preview_url = null, $offer_description = null, $testing_instructions = null, $offer_restrictions = null)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersupdateBasicInfodo'
            );
        }

        $resourcePath = '/offers/updateBasicInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($offer_name !== null) {
            $queryParams['offerName'] = ObjectSerializer::toQueryValue($offer_name);
        }
        // query params
        if ($notes !== null) {
            $queryParams['notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($alternative_id !== null) {
            $queryParams['alternativeID'] = ObjectSerializer::toQueryValue($alternative_id);
        }
        // query params
        if ($preview_url !== null) {
            $queryParams['previewURL'] = ObjectSerializer::toQueryValue($preview_url);
        }
        // query params
        if ($offer_description !== null) {
            $queryParams['offerDescription'] = ObjectSerializer::toQueryValue($offer_description);
        }
        // query params
        if ($testing_instructions !== null) {
            $queryParams['testingInstructions'] = ObjectSerializer::toQueryValue($testing_instructions);
        }
        // query params
        if ($offer_restrictions !== null) {
            $queryParams['offerRestrictions'] = ObjectSerializer::toQueryValue($offer_restrictions);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersupdateEmailSettingsdo
     *
     * Update Email Settings
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $test_email test_email (optional)
     * @param  string $allowed_emails allowed_emails (optional)
     * @param  string $allowed_subjects allowed_subjects (optional)
     * @param  string $email_instructions email_instructions (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersupdateEmailSettingsdo($offer_id, $test_email = null, $allowed_emails = null, $allowed_subjects = null, $email_instructions = null)
    {
        $this->offersupdateEmailSettingsdoWithHttpInfo($offer_id, $test_email, $allowed_emails, $allowed_subjects, $email_instructions);
    }

    /**
     * Operation offersupdateEmailSettingsdoWithHttpInfo
     *
     * Update Email Settings
     *
     * @param  int $offer_id (required)
     * @param  string $test_email (optional)
     * @param  string $allowed_emails (optional)
     * @param  string $allowed_subjects (optional)
     * @param  string $email_instructions (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersupdateEmailSettingsdoWithHttpInfo($offer_id, $test_email = null, $allowed_emails = null, $allowed_subjects = null, $email_instructions = null)
    {
        $returnType = '';
        $request = $this->offersupdateEmailSettingsdoRequest($offer_id, $test_email, $allowed_emails, $allowed_subjects, $email_instructions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersupdateEmailSettingsdoAsync
     *
     * Update Email Settings
     *
     * @param  int $offer_id (required)
     * @param  string $test_email (optional)
     * @param  string $allowed_emails (optional)
     * @param  string $allowed_subjects (optional)
     * @param  string $email_instructions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersupdateEmailSettingsdoAsync($offer_id, $test_email = null, $allowed_emails = null, $allowed_subjects = null, $email_instructions = null)
    {
        return $this->offersupdateEmailSettingsdoAsyncWithHttpInfo($offer_id, $test_email, $allowed_emails, $allowed_subjects, $email_instructions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersupdateEmailSettingsdoAsyncWithHttpInfo
     *
     * Update Email Settings
     *
     * @param  int $offer_id (required)
     * @param  string $test_email (optional)
     * @param  string $allowed_emails (optional)
     * @param  string $allowed_subjects (optional)
     * @param  string $email_instructions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersupdateEmailSettingsdoAsyncWithHttpInfo($offer_id, $test_email = null, $allowed_emails = null, $allowed_subjects = null, $email_instructions = null)
    {
        $returnType = '';
        $request = $this->offersupdateEmailSettingsdoRequest($offer_id, $test_email, $allowed_emails, $allowed_subjects, $email_instructions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersupdateEmailSettingsdo'
     *
     * @param  int $offer_id (required)
     * @param  string $test_email (optional)
     * @param  string $allowed_emails (optional)
     * @param  string $allowed_subjects (optional)
     * @param  string $email_instructions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersupdateEmailSettingsdoRequest($offer_id, $test_email = null, $allowed_emails = null, $allowed_subjects = null, $email_instructions = null)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersupdateEmailSettingsdo'
            );
        }

        $resourcePath = '/offers/updateEmailSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($test_email !== null) {
            $queryParams['testEmail'] = ObjectSerializer::toQueryValue($test_email);
        }
        // query params
        if ($allowed_emails !== null) {
            $queryParams['allowedEmails'] = ObjectSerializer::toQueryValue($allowed_emails);
        }
        // query params
        if ($allowed_subjects !== null) {
            $queryParams['allowedSubjects'] = ObjectSerializer::toQueryValue($allowed_subjects);
        }
        // query params
        if ($email_instructions !== null) {
            $queryParams['emailInstructions'] = ObjectSerializer::toQueryValue($email_instructions);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersupdateTermsSettingsdo
     *
     * Update Terms Settings
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $terms terms (optional)
     * @param  string $terms_enabled terms_enabled (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersupdateTermsSettingsdo($offer_id, $terms = null, $terms_enabled = null)
    {
        $this->offersupdateTermsSettingsdoWithHttpInfo($offer_id, $terms, $terms_enabled);
    }

    /**
     * Operation offersupdateTermsSettingsdoWithHttpInfo
     *
     * Update Terms Settings
     *
     * @param  int $offer_id (required)
     * @param  string $terms (optional)
     * @param  string $terms_enabled (optional)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersupdateTermsSettingsdoWithHttpInfo($offer_id, $terms = null, $terms_enabled = null)
    {
        $returnType = '';
        $request = $this->offersupdateTermsSettingsdoRequest($offer_id, $terms, $terms_enabled);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersupdateTermsSettingsdoAsync
     *
     * Update Terms Settings
     *
     * @param  int $offer_id (required)
     * @param  string $terms (optional)
     * @param  string $terms_enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersupdateTermsSettingsdoAsync($offer_id, $terms = null, $terms_enabled = null)
    {
        return $this->offersupdateTermsSettingsdoAsyncWithHttpInfo($offer_id, $terms, $terms_enabled)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersupdateTermsSettingsdoAsyncWithHttpInfo
     *
     * Update Terms Settings
     *
     * @param  int $offer_id (required)
     * @param  string $terms (optional)
     * @param  string $terms_enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersupdateTermsSettingsdoAsyncWithHttpInfo($offer_id, $terms = null, $terms_enabled = null)
    {
        $returnType = '';
        $request = $this->offersupdateTermsSettingsdoRequest($offer_id, $terms, $terms_enabled);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersupdateTermsSettingsdo'
     *
     * @param  int $offer_id (required)
     * @param  string $terms (optional)
     * @param  string $terms_enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersupdateTermsSettingsdoRequest($offer_id, $terms = null, $terms_enabled = null)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersupdateTermsSettingsdo'
            );
        }

        $resourcePath = '/offers/updateTermsSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($terms !== null) {
            $queryParams['terms'] = ObjectSerializer::toQueryValue($terms);
        }
        // query params
        if ($terms_enabled !== null) {
            $queryParams['termsEnabled'] = ObjectSerializer::toQueryValue($terms_enabled);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offersupdateVisibilitydo
     *
     * Update Visibility
     *
     * @param  int $offer_id offer_id (required)
     * @param  string $visibility visibility (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function offersupdateVisibilitydo($offer_id, $visibility)
    {
        $this->offersupdateVisibilitydoWithHttpInfo($offer_id, $visibility);
    }

    /**
     * Operation offersupdateVisibilitydoWithHttpInfo
     *
     * Update Visibility
     *
     * @param  int $offer_id (required)
     * @param  string $visibility (required)
     *
     * @throws \LeadspediaApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function offersupdateVisibilitydoWithHttpInfo($offer_id, $visibility)
    {
        $returnType = '';
        $request = $this->offersupdateVisibilitydoRequest($offer_id, $visibility);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation offersupdateVisibilitydoAsync
     *
     * Update Visibility
     *
     * @param  int $offer_id (required)
     * @param  string $visibility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersupdateVisibilitydoAsync($offer_id, $visibility)
    {
        return $this->offersupdateVisibilitydoAsyncWithHttpInfo($offer_id, $visibility)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offersupdateVisibilitydoAsyncWithHttpInfo
     *
     * Update Visibility
     *
     * @param  int $offer_id (required)
     * @param  string $visibility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offersupdateVisibilitydoAsyncWithHttpInfo($offer_id, $visibility)
    {
        $returnType = '';
        $request = $this->offersupdateVisibilitydoRequest($offer_id, $visibility);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offersupdateVisibilitydo'
     *
     * @param  int $offer_id (required)
     * @param  string $visibility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offersupdateVisibilitydoRequest($offer_id, $visibility)
    {
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling offersupdateVisibilitydo'
            );
        }
        // verify the required parameter 'visibility' is set
        if ($visibility === null || (is_array($visibility) && count($visibility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visibility when calling offersupdateVisibilitydo'
            );
        }

        $resourcePath = '/offers/updateVisibility.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_id !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offer_id);
        }
        // query params
        if ($visibility !== null) {
            $queryParams['visibility'] = ObjectSerializer::toQueryValue($visibility);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
