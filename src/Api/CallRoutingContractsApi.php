<?php
/**
 * CallRoutingContractsApi
 * PHP version 5
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Leadspedia\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Leadspedia\ApiException;
use Leadspedia\Configuration;
use Leadspedia\HeaderSelector;
use Leadspedia\ObjectSerializer;

/**
 * CallRoutingContractsApi Class Doc Comment
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CallRoutingContractsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client         = $client ?: new Client();
        $this->config         = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex      = $host_index;
    }

    /**
     * Operation callRoutingContractsadjustCreditdo
     *
     * Adjust Credit
     *
     * @param  int $contractID contractID (required)
     * @param  string $type type (required)
     * @param  float $amount amount (required)
     * @param  string $charge charge (optional, default to 'No')
     * @param  string $generateInvoice generateInvoice (optional, default to 'No')
     * @param  string $note note (optional)
     * @param  string $transactionFee transactionFee (optional)
     * @param  float $transactionFeePercentage transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount transactionFeeAmount (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsadjustCreditdo($contractID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        [$response] = $this->callRoutingContractsadjustCreditdoWithHttpInfo($contractID, $type, $amount, $charge, $generateInvoice, $note, $transactionFee, $transactionFeePercentage, $transactionFeeAmount);
        return $response;
    }

    /**
     * Operation callRoutingContractsadjustCreditdoAsync
     *
     * Adjust Credit
     *
     * @param  int $contractID (required)
     * @param  string $type (required)
     * @param  float $amount (required)
     * @param  string $charge (optional, default to 'No')
     * @param  string $generateInvoice (optional, default to 'No')
     * @param  string $note (optional)
     * @param  string $transactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsadjustCreditdoAsync($contractID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        return $this->callRoutingContractsadjustCreditdoAsyncWithHttpInfo($contractID, $type, $amount, $charge, $generateInvoice, $note, $transactionFee, $transactionFeePercentage, $transactionFeeAmount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsadjustCreditdoAsyncWithHttpInfo
     *
     * Adjust Credit
     *
     * @param  int $contractID (required)
     * @param  string $type (required)
     * @param  float $amount (required)
     * @param  string $charge (optional, default to 'No')
     * @param  string $generateInvoice (optional, default to 'No')
     * @param  string $note (optional)
     * @param  string $transactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsadjustCreditdoAsyncWithHttpInfo($contractID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsadjustCreditdoRequest($contractID, $type, $amount, $charge, $generateInvoice, $note, $transactionFee, $transactionFeePercentage, $transactionFeeAmount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsadjustCreditdoWithHttpInfo
     *
     * Adjust Credit
     *
     * @param  int $contractID (required)
     * @param  string $type (required)
     * @param  float $amount (required)
     * @param  string $charge (optional, default to 'No')
     * @param  string $generateInvoice (optional, default to 'No')
     * @param  string $note (optional)
     * @param  string $transactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsadjustCreditdoWithHttpInfo($contractID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        $request = $this->callRoutingContractsadjustCreditdoRequest($contractID, $type, $amount, $charge, $generateInvoice, $note, $transactionFee, $transactionFeePercentage, $transactionFeeAmount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractschangeModedo
     *
     * Change Mode
     *
     * @param  int $contractID contractID (required)
     * @param  string $mode mode (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractschangeModedo($contractID, $mode)
    {
        [$response] = $this->callRoutingContractschangeModedoWithHttpInfo($contractID, $mode);
        return $response;
    }

    /**
     * Operation callRoutingContractschangeModedoAsync
     *
     * Change Mode
     *
     * @param  int $contractID (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractschangeModedoAsync($contractID, $mode)
    {
        return $this->callRoutingContractschangeModedoAsyncWithHttpInfo($contractID, $mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractschangeModedoAsyncWithHttpInfo
     *
     * Change Mode
     *
     * @param  int $contractID (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractschangeModedoAsyncWithHttpInfo($contractID, $mode)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractschangeModedoRequest($contractID, $mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractschangeModedoWithHttpInfo
     *
     * Change Mode
     *
     * @param  int $contractID (required)
     * @param  string $mode (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractschangeModedoWithHttpInfo($contractID, $mode)
    {
        $request = $this->callRoutingContractschangeModedoRequest($contractID, $mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractschangeStatusdo
     *
     * Change Status
     *
     * @param  int $contractID contractID (required)
     * @param  string $status status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractschangeStatusdo($contractID, $status)
    {
        [$response] = $this->callRoutingContractschangeStatusdoWithHttpInfo($contractID, $status);
        return $response;
    }

    /**
     * Operation callRoutingContractschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $contractID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractschangeStatusdoAsync($contractID, $status)
    {
        return $this->callRoutingContractschangeStatusdoAsyncWithHttpInfo($contractID, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contractID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractschangeStatusdoAsyncWithHttpInfo($contractID, $status)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractschangeStatusdoRequest($contractID, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contractID (required)
     * @param  string $status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractschangeStatusdoWithHttpInfo($contractID, $status)
    {
        $request = $this->callRoutingContractschangeStatusdoRequest($contractID, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractscreatedo
     *
     * Create
     *
     * @param  int $verticalID verticalID (required)
     * @param  int $advertiserID advertiserID (required)
     * @param  string $contractName contractName (required)
     * @param  float $defaultPrice defaultPrice (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractscreatedo($verticalID, $advertiserID, $contractName, $defaultPrice)
    {
        [$response] = $this->callRoutingContractscreatedoWithHttpInfo($verticalID, $advertiserID, $contractName, $defaultPrice);
        return $response;
    }

    /**
     * Operation callRoutingContractscreatedoAsync
     *
     * Create
     *
     * @param  int $verticalID (required)
     * @param  int $advertiserID (required)
     * @param  string $contractName (required)
     * @param  float $defaultPrice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractscreatedoAsync($verticalID, $advertiserID, $contractName, $defaultPrice)
    {
        return $this->callRoutingContractscreatedoAsyncWithHttpInfo($verticalID, $advertiserID, $contractName, $defaultPrice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractscreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  int $verticalID (required)
     * @param  int $advertiserID (required)
     * @param  string $contractName (required)
     * @param  float $defaultPrice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractscreatedoAsyncWithHttpInfo($verticalID, $advertiserID, $contractName, $defaultPrice)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractscreatedoRequest($verticalID, $advertiserID, $contractName, $defaultPrice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractscreatedoWithHttpInfo
     *
     * Create
     *
     * @param  int $verticalID (required)
     * @param  int $advertiserID (required)
     * @param  string $contractName (required)
     * @param  float $defaultPrice (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractscreatedoWithHttpInfo($verticalID, $advertiserID, $contractName, $defaultPrice)
    {
        $request = $this->callRoutingContractscreatedoRequest($verticalID, $advertiserID, $contractName, $defaultPrice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsdeletedo
     *
     * Delete
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsdeletedo($contractID)
    {
        [$response] = $this->callRoutingContractsdeletedoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsdeletedoAsync
     *
     * Delete
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsdeletedoAsync($contractID)
    {
        return $this->callRoutingContractsdeletedoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsdeletedoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsdeletedoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsdeletedoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsdeletedoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsdeleteScheduledPausedo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduledPauseID scheduledPauseID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsdeleteScheduledPausedo($scheduledPauseID)
    {
        [$response] = $this->callRoutingContractsdeleteScheduledPausedoWithHttpInfo($scheduledPauseID);
        return $response;
    }

    /**
     * Operation callRoutingContractsdeleteScheduledPausedoAsync
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduledPauseID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsdeleteScheduledPausedoAsync($scheduledPauseID)
    {
        return $this->callRoutingContractsdeleteScheduledPausedoAsyncWithHttpInfo($scheduledPauseID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsdeleteScheduledPausedoAsyncWithHttpInfo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduledPauseID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsdeleteScheduledPausedoAsyncWithHttpInfo($scheduledPauseID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsdeleteScheduledPausedoRequest($scheduledPauseID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsdeleteScheduledPausedoWithHttpInfo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduledPauseID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsdeleteScheduledPausedoWithHttpInfo($scheduledPauseID)
    {
        $request = $this->callRoutingContractsdeleteScheduledPausedoRequest($scheduledPauseID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsenableCreditdo
     *
     * Enable Credit
     *
     * @param  int $contractID contractID (required)
     * @param  string $buyerLevel buyerLevel (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsenableCreditdo($contractID, $buyerLevel)
    {
        [$response] = $this->callRoutingContractsenableCreditdoWithHttpInfo($contractID, $buyerLevel);
        return $response;
    }

    /**
     * Operation callRoutingContractsenableCreditdoAsync
     *
     * Enable Credit
     *
     * @param  int $contractID (required)
     * @param  string $buyerLevel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsenableCreditdoAsync($contractID, $buyerLevel)
    {
        return $this->callRoutingContractsenableCreditdoAsyncWithHttpInfo($contractID, $buyerLevel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsenableCreditdoAsyncWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $contractID (required)
     * @param  string $buyerLevel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsenableCreditdoAsyncWithHttpInfo($contractID, $buyerLevel)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsenableCreditdoRequest($contractID, $buyerLevel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsenableCreditdoWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $contractID (required)
     * @param  string $buyerLevel (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsenableCreditdoWithHttpInfo($contractID, $buyerLevel)
    {
        $request = $this->callRoutingContractsenableCreditdoRequest($contractID, $buyerLevel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetAlldo
     *
     * Get All
     *
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  string $status status (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetAlldo($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        [$response] = $this->callRoutingContractsgetAlldoWithHttpInfo($advertiserID, $contractID, $verticalID, $status, $start, $limit);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetAlldoAsync
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  string $status (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetAlldoAsync($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        return $this->callRoutingContractsgetAlldoAsyncWithHttpInfo($advertiserID, $contractID, $verticalID, $status, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  string $status (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetAlldoAsyncWithHttpInfo($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetAlldoRequest($advertiserID, $contractID, $verticalID, $status, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  string $status (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetAlldoWithHttpInfo($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        $request = $this->callRoutingContractsgetAlldoRequest($advertiserID, $contractID, $verticalID, $status, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetBasicInfodo
     *
     * Get Basic Info
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetBasicInfodo($contractID)
    {
        [$response] = $this->callRoutingContractsgetBasicInfodoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetBasicInfodoAsync
     *
     * Get Basic Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetBasicInfodoAsync($contractID)
    {
        return $this->callRoutingContractsgetBasicInfodoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetBasicInfodoAsyncWithHttpInfo
     *
     * Get Basic Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetBasicInfodoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetBasicInfodoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetBasicInfodoWithHttpInfo
     *
     * Get Basic Info
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetBasicInfodoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsgetBasicInfodoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetBillableTransfersCapInfodo
     *
     * Get Billable Transfers Cap Info
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetBillableTransfersCapInfodo($contractID)
    {
        [$response] = $this->callRoutingContractsgetBillableTransfersCapInfodoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetBillableTransfersCapInfodoAsync
     *
     * Get Billable Transfers Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetBillableTransfersCapInfodoAsync($contractID)
    {
        return $this->callRoutingContractsgetBillableTransfersCapInfodoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetBillableTransfersCapInfodoAsyncWithHttpInfo
     *
     * Get Billable Transfers Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetBillableTransfersCapInfodoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetBillableTransfersCapInfodoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetBillableTransfersCapInfodoWithHttpInfo
     *
     * Get Billable Transfers Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetBillableTransfersCapInfodoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsgetBillableTransfersCapInfodoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetPortalSettingsdo
     *
     * Get Portal Settings
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetPortalSettingsdo($contractID)
    {
        [$response] = $this->callRoutingContractsgetPortalSettingsdoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetPortalSettingsdoAsync
     *
     * Get Portal Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetPortalSettingsdoAsync($contractID)
    {
        return $this->callRoutingContractsgetPortalSettingsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetPortalSettingsdoAsyncWithHttpInfo
     *
     * Get Portal Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetPortalSettingsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetPortalSettingsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetPortalSettingsdoWithHttpInfo
     *
     * Get Portal Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetPortalSettingsdoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsgetPortalSettingsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetRepeatCallsSettingsdo
     *
     * Get Repeat Calls Settings
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetRepeatCallsSettingsdo($contractID)
    {
        [$response] = $this->callRoutingContractsgetRepeatCallsSettingsdoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetRepeatCallsSettingsdoAsync
     *
     * Get Repeat Calls Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetRepeatCallsSettingsdoAsync($contractID)
    {
        return $this->callRoutingContractsgetRepeatCallsSettingsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetRepeatCallsSettingsdoAsyncWithHttpInfo
     *
     * Get Repeat Calls Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetRepeatCallsSettingsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetRepeatCallsSettingsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetRepeatCallsSettingsdoWithHttpInfo
     *
     * Get Repeat Calls Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetRepeatCallsSettingsdoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsgetRepeatCallsSettingsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetReturnsSettingsdo
     *
     * Get Returns Settings
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetReturnsSettingsdo($contractID)
    {
        [$response] = $this->callRoutingContractsgetReturnsSettingsdoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetReturnsSettingsdoAsync
     *
     * Get Returns Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetReturnsSettingsdoAsync($contractID)
    {
        return $this->callRoutingContractsgetReturnsSettingsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetReturnsSettingsdoAsyncWithHttpInfo
     *
     * Get Returns Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetReturnsSettingsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetReturnsSettingsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetReturnsSettingsdoWithHttpInfo
     *
     * Get Returns Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetReturnsSettingsdoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsgetReturnsSettingsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetRevenueCapInfodo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetRevenueCapInfodo($contractID)
    {
        [$response] = $this->callRoutingContractsgetRevenueCapInfodoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetRevenueCapInfodoAsync
     *
     * Get Revenue Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetRevenueCapInfodoAsync($contractID)
    {
        return $this->callRoutingContractsgetRevenueCapInfodoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetRevenueCapInfodoAsyncWithHttpInfo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetRevenueCapInfodoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetRevenueCapInfodoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetRevenueCapInfodoWithHttpInfo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetRevenueCapInfodoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsgetRevenueCapInfodoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetScheduledPausedo
     *
     * Get Scheduled Pause
     *
     * @param  int $contractID contractID (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetScheduledPausedo($contractID = null, $start = 0, $limit = 100)
    {
        [$response] = $this->callRoutingContractsgetScheduledPausedoWithHttpInfo($contractID, $start, $limit);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetScheduledPausedoAsync
     *
     * Get Scheduled Pause
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetScheduledPausedoAsync($contractID = null, $start = 0, $limit = 100)
    {
        return $this->callRoutingContractsgetScheduledPausedoAsyncWithHttpInfo($contractID, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetScheduledPausedoAsyncWithHttpInfo
     *
     * Get Scheduled Pause
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetScheduledPausedoAsyncWithHttpInfo($contractID = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetScheduledPausedoRequest($contractID, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetScheduledPausedoWithHttpInfo
     *
     * Get Scheduled Pause
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetScheduledPausedoWithHttpInfo($contractID = null, $start = 0, $limit = 100)
    {
        $request = $this->callRoutingContractsgetScheduledPausedoRequest($contractID, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsgetTransfersCapInfodo
     *
     * Get Transfers Cap Info
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function callRoutingContractsgetTransfersCapInfodo($contractID)
    {
        [$response] = $this->callRoutingContractsgetTransfersCapInfodoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsgetTransfersCapInfodoAsync
     *
     * Get Transfers Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetTransfersCapInfodoAsync($contractID)
    {
        return $this->callRoutingContractsgetTransfersCapInfodoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsgetTransfersCapInfodoAsyncWithHttpInfo
     *
     * Get Transfers Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsgetTransfersCapInfodoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->callRoutingContractsgetTransfersCapInfodoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsgetTransfersCapInfodoWithHttpInfo
     *
     * Get Transfers Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsgetTransfersCapInfodoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsgetTransfersCapInfodoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsremoveExpirationDatedo
     *
     * Remove Expiration Date
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsremoveExpirationDatedo($contractID)
    {
        [$response] = $this->callRoutingContractsremoveExpirationDatedoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsremoveExpirationDatedoAsync
     *
     * Remove Expiration Date
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsremoveExpirationDatedoAsync($contractID)
    {
        return $this->callRoutingContractsremoveExpirationDatedoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsremoveExpirationDatedoAsyncWithHttpInfo
     *
     * Remove Expiration Date
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsremoveExpirationDatedoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsremoveExpirationDatedoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsremoveExpirationDatedoWithHttpInfo
     *
     * Remove Expiration Date
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsremoveExpirationDatedoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsremoveExpirationDatedoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsremoveWhisperMessagedo
     *
     * Remove Whisper Message
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsremoveWhisperMessagedo($contractID)
    {
        [$response] = $this->callRoutingContractsremoveWhisperMessagedoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation callRoutingContractsremoveWhisperMessagedoAsync
     *
     * Remove Whisper Message
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsremoveWhisperMessagedoAsync($contractID)
    {
        return $this->callRoutingContractsremoveWhisperMessagedoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsremoveWhisperMessagedoAsyncWithHttpInfo
     *
     * Remove Whisper Message
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsremoveWhisperMessagedoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsremoveWhisperMessagedoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsremoveWhisperMessagedoWithHttpInfo
     *
     * Remove Whisper Message
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsremoveWhisperMessagedoWithHttpInfo($contractID)
    {
        $request = $this->callRoutingContractsremoveWhisperMessagedoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsrenamedo
     *
     * Rename
     *
     * @param  int $contractID contractID (required)
     * @param  string $contractName contractName (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsrenamedo($contractID, $contractName)
    {
        [$response] = $this->callRoutingContractsrenamedoWithHttpInfo($contractID, $contractName);
        return $response;
    }

    /**
     * Operation callRoutingContractsrenamedoAsync
     *
     * Rename
     *
     * @param  int $contractID (required)
     * @param  string $contractName (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsrenamedoAsync($contractID, $contractName)
    {
        return $this->callRoutingContractsrenamedoAsyncWithHttpInfo($contractID, $contractName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsrenamedoAsyncWithHttpInfo
     *
     * Rename
     *
     * @param  int $contractID (required)
     * @param  string $contractName (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsrenamedoAsyncWithHttpInfo($contractID, $contractName)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsrenamedoRequest($contractID, $contractName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsrenamedoWithHttpInfo
     *
     * Rename
     *
     * @param  int $contractID (required)
     * @param  string $contractName (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsrenamedoWithHttpInfo($contractID, $contractName)
    {
        $request = $this->callRoutingContractsrenamedoRequest($contractID, $contractName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsschedulePausedo
     *
     * Schedule Pause
     *
     * @param  int $contractID contractID (required)
     * @param  \DateTime $pauseDate pauseDate (required)
     * @param  \DateTime $resumeDate resumeDate (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsschedulePausedo($contractID, $pauseDate, $resumeDate)
    {
        [$response] = $this->callRoutingContractsschedulePausedoWithHttpInfo($contractID, $pauseDate, $resumeDate);
        return $response;
    }

    /**
     * Operation callRoutingContractsschedulePausedoAsync
     *
     * Schedule Pause
     *
     * @param  int $contractID (required)
     * @param  \DateTime $pauseDate (required)
     * @param  \DateTime $resumeDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsschedulePausedoAsync($contractID, $pauseDate, $resumeDate)
    {
        return $this->callRoutingContractsschedulePausedoAsyncWithHttpInfo($contractID, $pauseDate, $resumeDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsschedulePausedoAsyncWithHttpInfo
     *
     * Schedule Pause
     *
     * @param  int $contractID (required)
     * @param  \DateTime $pauseDate (required)
     * @param  \DateTime $resumeDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsschedulePausedoAsyncWithHttpInfo($contractID, $pauseDate, $resumeDate)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsschedulePausedoRequest($contractID, $pauseDate, $resumeDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsschedulePausedoWithHttpInfo
     *
     * Schedule Pause
     *
     * @param  int $contractID (required)
     * @param  \DateTime $pauseDate (required)
     * @param  \DateTime $resumeDate (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsschedulePausedoWithHttpInfo($contractID, $pauseDate, $resumeDate)
    {
        $request = $this->callRoutingContractsschedulePausedoRequest($contractID, $pauseDate, $resumeDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractssetAudioWhisperMessagedo
     *
     * Set Audio Whisper Message
     *
     * @param  string $contractID contractID (required)
     * @param  int $audioID audioID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractssetAudioWhisperMessagedo($contractID, $audioID)
    {
        [$response] = $this->callRoutingContractssetAudioWhisperMessagedoWithHttpInfo($contractID, $audioID);
        return $response;
    }

    /**
     * Operation callRoutingContractssetAudioWhisperMessagedoAsync
     *
     * Set Audio Whisper Message
     *
     * @param  string $contractID (required)
     * @param  int $audioID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractssetAudioWhisperMessagedoAsync($contractID, $audioID)
    {
        return $this->callRoutingContractssetAudioWhisperMessagedoAsyncWithHttpInfo($contractID, $audioID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractssetAudioWhisperMessagedoAsyncWithHttpInfo
     *
     * Set Audio Whisper Message
     *
     * @param  string $contractID (required)
     * @param  int $audioID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractssetAudioWhisperMessagedoAsyncWithHttpInfo($contractID, $audioID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractssetAudioWhisperMessagedoRequest($contractID, $audioID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractssetAudioWhisperMessagedoWithHttpInfo
     *
     * Set Audio Whisper Message
     *
     * @param  string $contractID (required)
     * @param  int $audioID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractssetAudioWhisperMessagedoWithHttpInfo($contractID, $audioID)
    {
        $request = $this->callRoutingContractssetAudioWhisperMessagedoRequest($contractID, $audioID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractssetExpirationDatedo
     *
     * Set Expiration Date
     *
     * @param  int $contractID contractID (required)
     * @param  \DateTime $expirationDate expirationDate (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractssetExpirationDatedo($contractID, $expirationDate)
    {
        [$response] = $this->callRoutingContractssetExpirationDatedoWithHttpInfo($contractID, $expirationDate);
        return $response;
    }

    /**
     * Operation callRoutingContractssetExpirationDatedoAsync
     *
     * Set Expiration Date
     *
     * @param  int $contractID (required)
     * @param  \DateTime $expirationDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractssetExpirationDatedoAsync($contractID, $expirationDate)
    {
        return $this->callRoutingContractssetExpirationDatedoAsyncWithHttpInfo($contractID, $expirationDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractssetExpirationDatedoAsyncWithHttpInfo
     *
     * Set Expiration Date
     *
     * @param  int $contractID (required)
     * @param  \DateTime $expirationDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractssetExpirationDatedoAsyncWithHttpInfo($contractID, $expirationDate)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractssetExpirationDatedoRequest($contractID, $expirationDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractssetExpirationDatedoWithHttpInfo
     *
     * Set Expiration Date
     *
     * @param  int $contractID (required)
     * @param  \DateTime $expirationDate (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractssetExpirationDatedoWithHttpInfo($contractID, $expirationDate)
    {
        $request = $this->callRoutingContractssetExpirationDatedoRequest($contractID, $expirationDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractssetTextToSpeechWhisperMessagedo
     *
     * Set Text-To-Speech Whisper Message
     *
     * @param  string $contractID contractID (required)
     * @param  string $message message (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractssetTextToSpeechWhisperMessagedo($contractID, $message)
    {
        [$response] = $this->callRoutingContractssetTextToSpeechWhisperMessagedoWithHttpInfo($contractID, $message);
        return $response;
    }

    /**
     * Operation callRoutingContractssetTextToSpeechWhisperMessagedoAsync
     *
     * Set Text-To-Speech Whisper Message
     *
     * @param  string $contractID (required)
     * @param  string $message (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractssetTextToSpeechWhisperMessagedoAsync($contractID, $message)
    {
        return $this->callRoutingContractssetTextToSpeechWhisperMessagedoAsyncWithHttpInfo($contractID, $message)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractssetTextToSpeechWhisperMessagedoAsyncWithHttpInfo
     *
     * Set Text-To-Speech Whisper Message
     *
     * @param  string $contractID (required)
     * @param  string $message (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractssetTextToSpeechWhisperMessagedoAsyncWithHttpInfo($contractID, $message)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractssetTextToSpeechWhisperMessagedoRequest($contractID, $message);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractssetTextToSpeechWhisperMessagedoWithHttpInfo
     *
     * Set Text-To-Speech Whisper Message
     *
     * @param  string $contractID (required)
     * @param  string $message (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractssetTextToSpeechWhisperMessagedoWithHttpInfo($contractID, $message)
    {
        $request = $this->callRoutingContractssetTextToSpeechWhisperMessagedoRequest($contractID, $message);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateAutoRechargeSettingsdo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $contractID contractID (required)
     * @param  string $enableAutoRecharge enableAutoRecharge (optional)
     * @param  float $autoChargeBalance autoChargeBalance (optional)
     * @param  float $autoChargeAmount autoChargeAmount (optional)
     * @param  string $chargeTransactionFee chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount transactionFeeAmount (optional)
     * @param  string $generateInvoice generateInvoice (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateAutoRechargeSettingsdo($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        [$response] = $this->callRoutingContractsupdateAutoRechargeSettingsdoWithHttpInfo($contractID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateAutoRechargeSettingsdoAsync
     *
     * Update Auto Recharge Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateAutoRechargeSettingsdoAsync($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        return $this->callRoutingContractsupdateAutoRechargeSettingsdoAsyncWithHttpInfo($contractID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateAutoRechargeSettingsdoAsyncWithHttpInfo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateAutoRechargeSettingsdoAsyncWithHttpInfo($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateAutoRechargeSettingsdoRequest($contractID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateAutoRechargeSettingsdoWithHttpInfo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateAutoRechargeSettingsdoWithHttpInfo($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        $request = $this->callRoutingContractsupdateAutoRechargeSettingsdoRequest($contractID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateBasicInfodo
     *
     * Update Basic Info
     *
     * @param  int $contractID contractID (required)
     * @param  string $contractName contractName (optional)
     * @param  string $transferNumber transferNumber (optional)
     * @param  string $alternativeID alternativeID (optional)
     * @param  string $notes notes (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateBasicInfodo($contractID, $contractName = null, $transferNumber = null, $alternativeID = null, $notes = null)
    {
        [$response] = $this->callRoutingContractsupdateBasicInfodoWithHttpInfo($contractID, $contractName, $transferNumber, $alternativeID, $notes);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateBasicInfodoAsync
     *
     * Update Basic Info
     *
     * @param  int $contractID (required)
     * @param  string $contractName (optional)
     * @param  string $transferNumber (optional)
     * @param  string $alternativeID (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateBasicInfodoAsync($contractID, $contractName = null, $transferNumber = null, $alternativeID = null, $notes = null)
    {
        return $this->callRoutingContractsupdateBasicInfodoAsyncWithHttpInfo($contractID, $contractName, $transferNumber, $alternativeID, $notes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateBasicInfodoAsyncWithHttpInfo
     *
     * Update Basic Info
     *
     * @param  int $contractID (required)
     * @param  string $contractName (optional)
     * @param  string $transferNumber (optional)
     * @param  string $alternativeID (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateBasicInfodoAsyncWithHttpInfo($contractID, $contractName = null, $transferNumber = null, $alternativeID = null, $notes = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateBasicInfodoRequest($contractID, $contractName, $transferNumber, $alternativeID, $notes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateBasicInfodoWithHttpInfo
     *
     * Update Basic Info
     *
     * @param  int $contractID (required)
     * @param  string $contractName (optional)
     * @param  string $transferNumber (optional)
     * @param  string $alternativeID (optional)
     * @param  string $notes (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateBasicInfodoWithHttpInfo($contractID, $contractName = null, $transferNumber = null, $alternativeID = null, $notes = null)
    {
        $request = $this->callRoutingContractsupdateBasicInfodoRequest($contractID, $contractName, $transferNumber, $alternativeID, $notes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateBillableTransfersCapdo
     *
     * Update Billable Transfers Cap
     *
     * @param  int $contractID contractID (required)
     * @param  int $hourlyBillableCap hourlyBillableCap (optional)
     * @param  int $dailyBillableCap dailyBillableCap (optional)
     * @param  int $weeklyBillableCap weeklyBillableCap (optional)
     * @param  int $monthlyBillableCap monthlyBillableCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateBillableTransfersCapdo($contractID, $hourlyBillableCap = null, $dailyBillableCap = null, $weeklyBillableCap = null, $monthlyBillableCap = null)
    {
        [$response] = $this->callRoutingContractsupdateBillableTransfersCapdoWithHttpInfo($contractID, $hourlyBillableCap, $dailyBillableCap, $weeklyBillableCap, $monthlyBillableCap);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateBillableTransfersCapdoAsync
     *
     * Update Billable Transfers Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyBillableCap (optional)
     * @param  int $dailyBillableCap (optional)
     * @param  int $weeklyBillableCap (optional)
     * @param  int $monthlyBillableCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateBillableTransfersCapdoAsync($contractID, $hourlyBillableCap = null, $dailyBillableCap = null, $weeklyBillableCap = null, $monthlyBillableCap = null)
    {
        return $this->callRoutingContractsupdateBillableTransfersCapdoAsyncWithHttpInfo($contractID, $hourlyBillableCap, $dailyBillableCap, $weeklyBillableCap, $monthlyBillableCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateBillableTransfersCapdoAsyncWithHttpInfo
     *
     * Update Billable Transfers Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyBillableCap (optional)
     * @param  int $dailyBillableCap (optional)
     * @param  int $weeklyBillableCap (optional)
     * @param  int $monthlyBillableCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateBillableTransfersCapdoAsyncWithHttpInfo($contractID, $hourlyBillableCap = null, $dailyBillableCap = null, $weeklyBillableCap = null, $monthlyBillableCap = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateBillableTransfersCapdoRequest($contractID, $hourlyBillableCap, $dailyBillableCap, $weeklyBillableCap, $monthlyBillableCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateBillableTransfersCapdoWithHttpInfo
     *
     * Update Billable Transfers Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyBillableCap (optional)
     * @param  int $dailyBillableCap (optional)
     * @param  int $weeklyBillableCap (optional)
     * @param  int $monthlyBillableCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateBillableTransfersCapdoWithHttpInfo($contractID, $hourlyBillableCap = null, $dailyBillableCap = null, $weeklyBillableCap = null, $monthlyBillableCap = null)
    {
        $request = $this->callRoutingContractsupdateBillableTransfersCapdoRequest($contractID, $hourlyBillableCap, $dailyBillableCap, $weeklyBillableCap, $monthlyBillableCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdatePortalSettingsdo
     *
     * Update Portal Settings
     *
     * @param  int $contractID contractID (required)
     * @param  string $showStatus showStatus (optional)
     * @param  string $showSchedule showSchedule (optional)
     * @param  string $showCaps showCaps (optional)
     * @param  string $showReturnSettings showReturnSettings (optional)
     * @param  string $allowStatusPause allowStatusPause (optional)
     * @param  string $allowUpdateSchedule allowUpdateSchedule (optional)
     * @param  string $allowManageCaps allowManageCaps (optional)
     * @param  string $callRecordings callRecordings (optional)
     * @param  string $hideCallerID hideCallerID (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdatePortalSettingsdo($contractID, $showStatus = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null, $callRecordings = null, $hideCallerID = null)
    {
        [$response] = $this->callRoutingContractsupdatePortalSettingsdoWithHttpInfo($contractID, $showStatus, $showSchedule, $showCaps, $showReturnSettings, $allowStatusPause, $allowUpdateSchedule, $allowManageCaps, $callRecordings, $hideCallerID);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdatePortalSettingsdoAsync
     *
     * Update Portal Settings
     *
     * @param  int $contractID (required)
     * @param  string $showStatus (optional)
     * @param  string $showSchedule (optional)
     * @param  string $showCaps (optional)
     * @param  string $showReturnSettings (optional)
     * @param  string $allowStatusPause (optional)
     * @param  string $allowUpdateSchedule (optional)
     * @param  string $allowManageCaps (optional)
     * @param  string $callRecordings (optional)
     * @param  string $hideCallerID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdatePortalSettingsdoAsync($contractID, $showStatus = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null, $callRecordings = null, $hideCallerID = null)
    {
        return $this->callRoutingContractsupdatePortalSettingsdoAsyncWithHttpInfo($contractID, $showStatus, $showSchedule, $showCaps, $showReturnSettings, $allowStatusPause, $allowUpdateSchedule, $allowManageCaps, $callRecordings, $hideCallerID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdatePortalSettingsdoAsyncWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  int $contractID (required)
     * @param  string $showStatus (optional)
     * @param  string $showSchedule (optional)
     * @param  string $showCaps (optional)
     * @param  string $showReturnSettings (optional)
     * @param  string $allowStatusPause (optional)
     * @param  string $allowUpdateSchedule (optional)
     * @param  string $allowManageCaps (optional)
     * @param  string $callRecordings (optional)
     * @param  string $hideCallerID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdatePortalSettingsdoAsyncWithHttpInfo($contractID, $showStatus = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null, $callRecordings = null, $hideCallerID = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdatePortalSettingsdoRequest($contractID, $showStatus, $showSchedule, $showCaps, $showReturnSettings, $allowStatusPause, $allowUpdateSchedule, $allowManageCaps, $callRecordings, $hideCallerID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdatePortalSettingsdoWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  int $contractID (required)
     * @param  string $showStatus (optional)
     * @param  string $showSchedule (optional)
     * @param  string $showCaps (optional)
     * @param  string $showReturnSettings (optional)
     * @param  string $allowStatusPause (optional)
     * @param  string $allowUpdateSchedule (optional)
     * @param  string $allowManageCaps (optional)
     * @param  string $callRecordings (optional)
     * @param  string $hideCallerID (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdatePortalSettingsdoWithHttpInfo($contractID, $showStatus = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null, $callRecordings = null, $hideCallerID = null)
    {
        $request = $this->callRoutingContractsupdatePortalSettingsdoRequest($contractID, $showStatus, $showSchedule, $showCaps, $showReturnSettings, $allowStatusPause, $allowUpdateSchedule, $allowManageCaps, $callRecordings, $hideCallerID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateRepeatCallsSettingsdo
     *
     * Update Repeat Calls Settings
     *
     * @param  int $contractID contractID (required)
     * @param  int $repeatCallDays repeatCallDays (optional)
     * @param  string $transferRepeat transferRepeat (optional)
     * @param  string $repeatBillable repeatBillable (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateRepeatCallsSettingsdo($contractID, $repeatCallDays = null, $transferRepeat = null, $repeatBillable = null)
    {
        [$response] = $this->callRoutingContractsupdateRepeatCallsSettingsdoWithHttpInfo($contractID, $repeatCallDays, $transferRepeat, $repeatBillable);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateRepeatCallsSettingsdoAsync
     *
     * Update Repeat Calls Settings
     *
     * @param  int $contractID (required)
     * @param  int $repeatCallDays (optional)
     * @param  string $transferRepeat (optional)
     * @param  string $repeatBillable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateRepeatCallsSettingsdoAsync($contractID, $repeatCallDays = null, $transferRepeat = null, $repeatBillable = null)
    {
        return $this->callRoutingContractsupdateRepeatCallsSettingsdoAsyncWithHttpInfo($contractID, $repeatCallDays, $transferRepeat, $repeatBillable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateRepeatCallsSettingsdoAsyncWithHttpInfo
     *
     * Update Repeat Calls Settings
     *
     * @param  int $contractID (required)
     * @param  int $repeatCallDays (optional)
     * @param  string $transferRepeat (optional)
     * @param  string $repeatBillable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateRepeatCallsSettingsdoAsyncWithHttpInfo($contractID, $repeatCallDays = null, $transferRepeat = null, $repeatBillable = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateRepeatCallsSettingsdoRequest($contractID, $repeatCallDays, $transferRepeat, $repeatBillable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateRepeatCallsSettingsdoWithHttpInfo
     *
     * Update Repeat Calls Settings
     *
     * @param  int $contractID (required)
     * @param  int $repeatCallDays (optional)
     * @param  string $transferRepeat (optional)
     * @param  string $repeatBillable (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateRepeatCallsSettingsdoWithHttpInfo($contractID, $repeatCallDays = null, $transferRepeat = null, $repeatBillable = null)
    {
        $request = $this->callRoutingContractsupdateRepeatCallsSettingsdoRequest($contractID, $repeatCallDays, $transferRepeat, $repeatBillable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateReturnsSettingsdo
     *
     * Update Returns Settings
     *
     * @param  int $contractID contractID (required)
     * @param  string $allowReturns allowReturns (optional)
     * @param  string $autoApproveReturns autoApproveReturns (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateReturnsSettingsdo($contractID, $allowReturns = null, $autoApproveReturns = null)
    {
        [$response] = $this->callRoutingContractsupdateReturnsSettingsdoWithHttpInfo($contractID, $allowReturns, $autoApproveReturns);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateReturnsSettingsdoAsync
     *
     * Update Returns Settings
     *
     * @param  int $contractID (required)
     * @param  string $allowReturns (optional)
     * @param  string $autoApproveReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateReturnsSettingsdoAsync($contractID, $allowReturns = null, $autoApproveReturns = null)
    {
        return $this->callRoutingContractsupdateReturnsSettingsdoAsyncWithHttpInfo($contractID, $allowReturns, $autoApproveReturns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateReturnsSettingsdoAsyncWithHttpInfo
     *
     * Update Returns Settings
     *
     * @param  int $contractID (required)
     * @param  string $allowReturns (optional)
     * @param  string $autoApproveReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateReturnsSettingsdoAsyncWithHttpInfo($contractID, $allowReturns = null, $autoApproveReturns = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateReturnsSettingsdoRequest($contractID, $allowReturns, $autoApproveReturns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateReturnsSettingsdoWithHttpInfo
     *
     * Update Returns Settings
     *
     * @param  int $contractID (required)
     * @param  string $allowReturns (optional)
     * @param  string $autoApproveReturns (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateReturnsSettingsdoWithHttpInfo($contractID, $allowReturns = null, $autoApproveReturns = null)
    {
        $request = $this->callRoutingContractsupdateReturnsSettingsdoRequest($contractID, $allowReturns, $autoApproveReturns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateRevenueCapdo
     *
     * Update Revenue Cap
     *
     * @param  int $contractID contractID (required)
     * @param  int $hourlyRevenueCap hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap monthlyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateRevenueCapdo($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        [$response] = $this->callRoutingContractsupdateRevenueCapdoWithHttpInfo($contractID, $hourlyRevenueCap, $dailyRevenueCap, $weeklyRevenueCap, $monthlyRevenueCap);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateRevenueCapdoAsync
     *
     * Update Revenue Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateRevenueCapdoAsync($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        return $this->callRoutingContractsupdateRevenueCapdoAsyncWithHttpInfo($contractID, $hourlyRevenueCap, $dailyRevenueCap, $weeklyRevenueCap, $monthlyRevenueCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateRevenueCapdoAsyncWithHttpInfo
     *
     * Update Revenue Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateRevenueCapdoAsyncWithHttpInfo($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateRevenueCapdoRequest($contractID, $hourlyRevenueCap, $dailyRevenueCap, $weeklyRevenueCap, $monthlyRevenueCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateRevenueCapdoWithHttpInfo
     *
     * Update Revenue Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateRevenueCapdoWithHttpInfo($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        $request = $this->callRoutingContractsupdateRevenueCapdoRequest($contractID, $hourlyRevenueCap, $dailyRevenueCap, $weeklyRevenueCap, $monthlyRevenueCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateRevenueModeldo
     *
     * Update Revenue Model
     *
     * @param  int $contractID contractID (required)
     * @param  string $revenueModel revenueModel (required)
     * @param  float $price price (required)
     * @param  string $duration duration (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateRevenueModeldo($contractID, $revenueModel, $price, $duration = null)
    {
        [$response] = $this->callRoutingContractsupdateRevenueModeldoWithHttpInfo($contractID, $revenueModel, $price, $duration);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateRevenueModeldoAsync
     *
     * Update Revenue Model
     *
     * @param  int $contractID (required)
     * @param  string $revenueModel (required)
     * @param  float $price (required)
     * @param  string $duration (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateRevenueModeldoAsync($contractID, $revenueModel, $price, $duration = null)
    {
        return $this->callRoutingContractsupdateRevenueModeldoAsyncWithHttpInfo($contractID, $revenueModel, $price, $duration)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateRevenueModeldoAsyncWithHttpInfo
     *
     * Update Revenue Model
     *
     * @param  int $contractID (required)
     * @param  string $revenueModel (required)
     * @param  float $price (required)
     * @param  string $duration (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateRevenueModeldoAsyncWithHttpInfo($contractID, $revenueModel, $price, $duration = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateRevenueModeldoRequest($contractID, $revenueModel, $price, $duration);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateRevenueModeldoWithHttpInfo
     *
     * Update Revenue Model
     *
     * @param  int $contractID (required)
     * @param  string $revenueModel (required)
     * @param  float $price (required)
     * @param  string $duration (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateRevenueModeldoWithHttpInfo($contractID, $revenueModel, $price, $duration = null)
    {
        $request = $this->callRoutingContractsupdateRevenueModeldoRequest($contractID, $revenueModel, $price, $duration);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateTransferNumberdo
     *
     * Update Transfer Number
     *
     * @param  int $contractID contractID (required)
     * @param  string $transferNumber transferNumber (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateTransferNumberdo($contractID, $transferNumber)
    {
        [$response] = $this->callRoutingContractsupdateTransferNumberdoWithHttpInfo($contractID, $transferNumber);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateTransferNumberdoAsync
     *
     * Update Transfer Number
     *
     * @param  int $contractID (required)
     * @param  string $transferNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateTransferNumberdoAsync($contractID, $transferNumber)
    {
        return $this->callRoutingContractsupdateTransferNumberdoAsyncWithHttpInfo($contractID, $transferNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateTransferNumberdoAsyncWithHttpInfo
     *
     * Update Transfer Number
     *
     * @param  int $contractID (required)
     * @param  string $transferNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateTransferNumberdoAsyncWithHttpInfo($contractID, $transferNumber)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateTransferNumberdoRequest($contractID, $transferNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateTransferNumberdoWithHttpInfo
     *
     * Update Transfer Number
     *
     * @param  int $contractID (required)
     * @param  string $transferNumber (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateTransferNumberdoWithHttpInfo($contractID, $transferNumber)
    {
        $request = $this->callRoutingContractsupdateTransferNumberdoRequest($contractID, $transferNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callRoutingContractsupdateTransfersCapdo
     *
     * Update Transfers Cap
     *
     * @param  int $contractID contractID (required)
     * @param  int $hourlyTransfersCap hourlyTransfersCap (optional)
     * @param  int $dailyTransfersCap dailyTransfersCap (optional)
     * @param  int $weeklyTransfersCap weeklyTransfersCap (optional)
     * @param  int $monthlyTransfersCap monthlyTransfersCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function callRoutingContractsupdateTransfersCapdo($contractID, $hourlyTransfersCap = null, $dailyTransfersCap = null, $weeklyTransfersCap = null, $monthlyTransfersCap = null)
    {
        [$response] = $this->callRoutingContractsupdateTransfersCapdoWithHttpInfo($contractID, $hourlyTransfersCap, $dailyTransfersCap, $weeklyTransfersCap, $monthlyTransfersCap);
        return $response;
    }

    /**
     * Operation callRoutingContractsupdateTransfersCapdoAsync
     *
     * Update Transfers Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyTransfersCap (optional)
     * @param  int $dailyTransfersCap (optional)
     * @param  int $weeklyTransfersCap (optional)
     * @param  int $monthlyTransfersCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateTransfersCapdoAsync($contractID, $hourlyTransfersCap = null, $dailyTransfersCap = null, $weeklyTransfersCap = null, $monthlyTransfersCap = null)
    {
        return $this->callRoutingContractsupdateTransfersCapdoAsyncWithHttpInfo($contractID, $hourlyTransfersCap, $dailyTransfersCap, $weeklyTransfersCap, $monthlyTransfersCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateTransfersCapdoAsyncWithHttpInfo
     *
     * Update Transfers Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyTransfersCap (optional)
     * @param  int $dailyTransfersCap (optional)
     * @param  int $weeklyTransfersCap (optional)
     * @param  int $monthlyTransfersCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callRoutingContractsupdateTransfersCapdoAsyncWithHttpInfo($contractID, $hourlyTransfersCap = null, $dailyTransfersCap = null, $weeklyTransfersCap = null, $monthlyTransfersCap = null)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->callRoutingContractsupdateTransfersCapdoRequest($contractID, $hourlyTransfersCap, $dailyTransfersCap, $weeklyTransfersCap, $monthlyTransfersCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation callRoutingContractsupdateTransfersCapdoWithHttpInfo
     *
     * Update Transfers Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyTransfersCap (optional)
     * @param  int $dailyTransfersCap (optional)
     * @param  int $weeklyTransfersCap (optional)
     * @param  int $monthlyTransfersCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function callRoutingContractsupdateTransfersCapdoWithHttpInfo($contractID, $hourlyTransfersCap = null, $dailyTransfersCap = null, $weeklyTransfersCap = null, $monthlyTransfersCap = null)
    {
        $request = $this->callRoutingContractsupdateTransfersCapdoRequest($contractID, $hourlyTransfersCap, $dailyTransfersCap, $weeklyTransfersCap, $monthlyTransfersCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index): void
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Create request for operation 'callRoutingContractsadjustCreditdo'
     *
     * @param  int $contractID (required)
     * @param  string $type (required)
     * @param  float $amount (required)
     * @param  string $charge (optional, default to 'No')
     * @param  string $generateInvoice (optional, default to 'No')
     * @param  string $note (optional)
     * @param  string $transactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsadjustCreditdoRequest($contractID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsadjustCreditdo'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling callRoutingContractsadjustCreditdo'
            );
        }
        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling callRoutingContractsadjustCreditdo'
            );
        }

        $resourcePath = '/callRoutingContracts/adjustCredit.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount);
        }
        // query params
        if ($charge !== null) {
            $queryParams['charge'] = ObjectSerializer::toQueryValue($charge);
        }
        // query params
        if ($generateInvoice !== null) {
            $queryParams['generateInvoice'] = ObjectSerializer::toQueryValue($generateInvoice);
        }
        // query params
        if ($note !== null) {
            $queryParams['note'] = ObjectSerializer::toQueryValue($note);
        }
        // query params
        if ($transactionFee !== null) {
            $queryParams['transactionFee'] = ObjectSerializer::toQueryValue($transactionFee);
        }
        // query params
        if ($transactionFeePercentage !== null) {
            $queryParams['transactionFeePercentage'] = ObjectSerializer::toQueryValue($transactionFeePercentage);
        }
        // query params
        if ($transactionFeeAmount !== null) {
            $queryParams['transactionFeeAmount'] = ObjectSerializer::toQueryValue($transactionFeeAmount);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractschangeModedo'
     *
     * @param  int $contractID (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractschangeModedoRequest($contractID, $mode)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractschangeModedo'
            );
        }
        // verify the required parameter 'mode' is set
        if ($mode === null || (is_array($mode) && count($mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mode when calling callRoutingContractschangeModedo'
            );
        }

        $resourcePath = '/callRoutingContracts/changeMode.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractschangeStatusdo'
     *
     * @param  int $contractID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractschangeStatusdoRequest($contractID, $status)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling callRoutingContractschangeStatusdo'
            );
        }

        $resourcePath = '/callRoutingContracts/changeStatus.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractscreatedo'
     *
     * @param  int $verticalID (required)
     * @param  int $advertiserID (required)
     * @param  string $contractName (required)
     * @param  float $defaultPrice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractscreatedoRequest($verticalID, $advertiserID, $contractName, $defaultPrice)
    {
        // verify the required parameter 'verticalID' is set
        if ($verticalID === null || (is_array($verticalID) && count($verticalID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verticalID when calling callRoutingContractscreatedo'
            );
        }
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling callRoutingContractscreatedo'
            );
        }
        // verify the required parameter 'contractName' is set
        if ($contractName === null || (is_array($contractName) && count($contractName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractName when calling callRoutingContractscreatedo'
            );
        }
        // verify the required parameter 'defaultPrice' is set
        if ($defaultPrice === null || (is_array($defaultPrice) && count($defaultPrice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $defaultPrice when calling callRoutingContractscreatedo'
            );
        }

        $resourcePath = '/callRoutingContracts/create.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($contractName !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contractName);
        }
        // query params
        if ($defaultPrice !== null) {
            $queryParams['defaultPrice'] = ObjectSerializer::toQueryValue($defaultPrice);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsdeletedo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsdeletedoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsdeletedo'
            );
        }

        $resourcePath = '/callRoutingContracts/delete.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsdeleteScheduledPausedo'
     *
     * @param  int $scheduledPauseID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsdeleteScheduledPausedoRequest($scheduledPauseID)
    {
        // verify the required parameter 'scheduledPauseID' is set
        if ($scheduledPauseID === null || (is_array($scheduledPauseID) && count($scheduledPauseID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scheduledPauseID when calling callRoutingContractsdeleteScheduledPausedo'
            );
        }

        $resourcePath = '/callRoutingContracts/deleteScheduledPause.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($scheduledPauseID !== null) {
            $queryParams['scheduledPauseID'] = ObjectSerializer::toQueryValue($scheduledPauseID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsenableCreditdo'
     *
     * @param  int $contractID (required)
     * @param  string $buyerLevel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsenableCreditdoRequest($contractID, $buyerLevel)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsenableCreditdo'
            );
        }
        // verify the required parameter 'buyerLevel' is set
        if ($buyerLevel === null || (is_array($buyerLevel) && count($buyerLevel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buyerLevel when calling callRoutingContractsenableCreditdo'
            );
        }

        $resourcePath = '/callRoutingContracts/enableCredit.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($buyerLevel !== null) {
            $queryParams['buyerLevel'] = ObjectSerializer::toQueryValue($buyerLevel);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetAlldo'
     *
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  string $status (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetAlldoRequest($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        $resourcePath = '/callRoutingContracts/getAll.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetBasicInfodo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetBasicInfodoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsgetBasicInfodo'
            );
        }

        $resourcePath = '/callRoutingContracts/getBasicInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetBillableTransfersCapInfodo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetBillableTransfersCapInfodoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsgetBillableTransfersCapInfodo'
            );
        }

        $resourcePath = '/callRoutingContracts/getBillableTransfersCapInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetPortalSettingsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetPortalSettingsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsgetPortalSettingsdo'
            );
        }

        $resourcePath = '/callRoutingContracts/getPortalSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetRepeatCallsSettingsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetRepeatCallsSettingsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsgetRepeatCallsSettingsdo'
            );
        }

        $resourcePath = '/callRoutingContracts/getRepeatCallsSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetReturnsSettingsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetReturnsSettingsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsgetReturnsSettingsdo'
            );
        }

        $resourcePath = '/callRoutingContracts/getReturnsSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetRevenueCapInfodo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetRevenueCapInfodoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsgetRevenueCapInfodo'
            );
        }

        $resourcePath = '/callRoutingContracts/getRevenueCapInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetScheduledPausedo'
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetScheduledPausedoRequest($contractID = null, $start = 0, $limit = 100)
    {
        $resourcePath = '/callRoutingContracts/getScheduledPause.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsgetTransfersCapInfodo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsgetTransfersCapInfodoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsgetTransfersCapInfodo'
            );
        }

        $resourcePath = '/callRoutingContracts/getTransfersCapInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsremoveExpirationDatedo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsremoveExpirationDatedoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsremoveExpirationDatedo'
            );
        }

        $resourcePath = '/callRoutingContracts/removeExpirationDate.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsremoveWhisperMessagedo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsremoveWhisperMessagedoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsremoveWhisperMessagedo'
            );
        }

        $resourcePath = '/callRoutingContracts/removeWhisperMessage.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsrenamedo'
     *
     * @param  int $contractID (required)
     * @param  string $contractName (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsrenamedoRequest($contractID, $contractName)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsrenamedo'
            );
        }
        // verify the required parameter 'contractName' is set
        if ($contractName === null || (is_array($contractName) && count($contractName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractName when calling callRoutingContractsrenamedo'
            );
        }

        $resourcePath = '/callRoutingContracts/rename.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($contractName !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contractName);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsschedulePausedo'
     *
     * @param  int $contractID (required)
     * @param  \DateTime $pauseDate (required)
     * @param  \DateTime $resumeDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsschedulePausedoRequest($contractID, $pauseDate, $resumeDate)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsschedulePausedo'
            );
        }
        // verify the required parameter 'pauseDate' is set
        if ($pauseDate === null || (is_array($pauseDate) && count($pauseDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pauseDate when calling callRoutingContractsschedulePausedo'
            );
        }
        // verify the required parameter 'resumeDate' is set
        if ($resumeDate === null || (is_array($resumeDate) && count($resumeDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resumeDate when calling callRoutingContractsschedulePausedo'
            );
        }

        $resourcePath = '/callRoutingContracts/schedulePause.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($pauseDate !== null) {
            $queryParams['pauseDate'] = ObjectSerializer::toQueryValue($pauseDate);
        }
        // query params
        if ($resumeDate !== null) {
            $queryParams['resumeDate'] = ObjectSerializer::toQueryValue($resumeDate);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractssetAudioWhisperMessagedo'
     *
     * @param  string $contractID (required)
     * @param  int $audioID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractssetAudioWhisperMessagedoRequest($contractID, $audioID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractssetAudioWhisperMessagedo'
            );
        }
        // verify the required parameter 'audioID' is set
        if ($audioID === null || (is_array($audioID) && count($audioID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audioID when calling callRoutingContractssetAudioWhisperMessagedo'
            );
        }

        $resourcePath = '/callRoutingContracts/setAudioWhisperMessage.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($audioID !== null) {
            $queryParams['audioID'] = ObjectSerializer::toQueryValue($audioID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractssetExpirationDatedo'
     *
     * @param  int $contractID (required)
     * @param  \DateTime $expirationDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractssetExpirationDatedoRequest($contractID, $expirationDate)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractssetExpirationDatedo'
            );
        }
        // verify the required parameter 'expirationDate' is set
        if ($expirationDate === null || (is_array($expirationDate) && count($expirationDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expirationDate when calling callRoutingContractssetExpirationDatedo'
            );
        }

        $resourcePath = '/callRoutingContracts/setExpirationDate.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($expirationDate !== null) {
            $queryParams['expirationDate'] = ObjectSerializer::toQueryValue($expirationDate);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractssetTextToSpeechWhisperMessagedo'
     *
     * @param  string $contractID (required)
     * @param  string $message (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractssetTextToSpeechWhisperMessagedoRequest($contractID, $message)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractssetTextToSpeechWhisperMessagedo'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling callRoutingContractssetTextToSpeechWhisperMessagedo'
            );
        }

        $resourcePath = '/callRoutingContracts/setTextToSpeechWhisperMessage.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($message !== null) {
            $queryParams['message'] = ObjectSerializer::toQueryValue($message);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateAutoRechargeSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateAutoRechargeSettingsdoRequest($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateAutoRechargeSettingsdo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateAutoRechargeSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($enableAutoRecharge !== null) {
            $queryParams['enableAutoRecharge'] = ObjectSerializer::toQueryValue($enableAutoRecharge);
        }
        // query params
        if ($autoChargeBalance !== null) {
            $queryParams['autoChargeBalance'] = ObjectSerializer::toQueryValue($autoChargeBalance);
        }
        // query params
        if ($autoChargeAmount !== null) {
            $queryParams['autoChargeAmount'] = ObjectSerializer::toQueryValue($autoChargeAmount);
        }
        // query params
        if ($chargeTransactionFee !== null) {
            $queryParams['chargeTransactionFee'] = ObjectSerializer::toQueryValue($chargeTransactionFee);
        }
        // query params
        if ($transactionFeePercentage !== null) {
            $queryParams['transactionFeePercentage'] = ObjectSerializer::toQueryValue($transactionFeePercentage);
        }
        // query params
        if ($transactionFeeAmount !== null) {
            $queryParams['transactionFeeAmount'] = ObjectSerializer::toQueryValue($transactionFeeAmount);
        }
        // query params
        if ($generateInvoice !== null) {
            $queryParams['generateInvoice'] = ObjectSerializer::toQueryValue($generateInvoice);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateBasicInfodo'
     *
     * @param  int $contractID (required)
     * @param  string $contractName (optional)
     * @param  string $transferNumber (optional)
     * @param  string $alternativeID (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateBasicInfodoRequest($contractID, $contractName = null, $transferNumber = null, $alternativeID = null, $notes = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateBasicInfodo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateBasicInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($contractName !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contractName);
        }
        // query params
        if ($transferNumber !== null) {
            $queryParams['transferNumber'] = ObjectSerializer::toQueryValue($transferNumber);
        }
        // query params
        if ($alternativeID !== null) {
            $queryParams['alternativeID'] = ObjectSerializer::toQueryValue($alternativeID);
        }
        // query params
        if ($notes !== null) {
            $queryParams['notes'] = ObjectSerializer::toQueryValue($notes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateBillableTransfersCapdo'
     *
     * @param  int $contractID (required)
     * @param  int $hourlyBillableCap (optional)
     * @param  int $dailyBillableCap (optional)
     * @param  int $weeklyBillableCap (optional)
     * @param  int $monthlyBillableCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateBillableTransfersCapdoRequest($contractID, $hourlyBillableCap = null, $dailyBillableCap = null, $weeklyBillableCap = null, $monthlyBillableCap = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateBillableTransfersCapdo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateBillableTransfersCap.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($hourlyBillableCap !== null) {
            $queryParams['hourlyBillableCap'] = ObjectSerializer::toQueryValue($hourlyBillableCap);
        }
        // query params
        if ($dailyBillableCap !== null) {
            $queryParams['dailyBillableCap'] = ObjectSerializer::toQueryValue($dailyBillableCap);
        }
        // query params
        if ($weeklyBillableCap !== null) {
            $queryParams['weeklyBillableCap'] = ObjectSerializer::toQueryValue($weeklyBillableCap);
        }
        // query params
        if ($monthlyBillableCap !== null) {
            $queryParams['monthlyBillableCap'] = ObjectSerializer::toQueryValue($monthlyBillableCap);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdatePortalSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  string $showStatus (optional)
     * @param  string $showSchedule (optional)
     * @param  string $showCaps (optional)
     * @param  string $showReturnSettings (optional)
     * @param  string $allowStatusPause (optional)
     * @param  string $allowUpdateSchedule (optional)
     * @param  string $allowManageCaps (optional)
     * @param  string $callRecordings (optional)
     * @param  string $hideCallerID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdatePortalSettingsdoRequest($contractID, $showStatus = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null, $callRecordings = null, $hideCallerID = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdatePortalSettingsdo'
            );
        }

        $resourcePath = '/callRoutingContracts/updatePortalSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($showStatus !== null) {
            $queryParams['showStatus'] = ObjectSerializer::toQueryValue($showStatus);
        }
        // query params
        if ($showSchedule !== null) {
            $queryParams['showSchedule'] = ObjectSerializer::toQueryValue($showSchedule);
        }
        // query params
        if ($showCaps !== null) {
            $queryParams['showCaps'] = ObjectSerializer::toQueryValue($showCaps);
        }
        // query params
        if ($showReturnSettings !== null) {
            $queryParams['showReturnSettings'] = ObjectSerializer::toQueryValue($showReturnSettings);
        }
        // query params
        if ($allowStatusPause !== null) {
            $queryParams['allowStatusPause'] = ObjectSerializer::toQueryValue($allowStatusPause);
        }
        // query params
        if ($allowUpdateSchedule !== null) {
            $queryParams['allowUpdateSchedule'] = ObjectSerializer::toQueryValue($allowUpdateSchedule);
        }
        // query params
        if ($allowManageCaps !== null) {
            $queryParams['allowManageCaps'] = ObjectSerializer::toQueryValue($allowManageCaps);
        }
        // query params
        if ($callRecordings !== null) {
            $queryParams['callRecordings'] = ObjectSerializer::toQueryValue($callRecordings);
        }
        // query params
        if ($hideCallerID !== null) {
            $queryParams['hideCallerID'] = ObjectSerializer::toQueryValue($hideCallerID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateRepeatCallsSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  int $repeatCallDays (optional)
     * @param  string $transferRepeat (optional)
     * @param  string $repeatBillable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateRepeatCallsSettingsdoRequest($contractID, $repeatCallDays = null, $transferRepeat = null, $repeatBillable = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateRepeatCallsSettingsdo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateRepeatCallsSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($repeatCallDays !== null) {
            $queryParams['repeatCallDays'] = ObjectSerializer::toQueryValue($repeatCallDays);
        }
        // query params
        if ($transferRepeat !== null) {
            $queryParams['transferRepeat'] = ObjectSerializer::toQueryValue($transferRepeat);
        }
        // query params
        if ($repeatBillable !== null) {
            $queryParams['repeatBillable'] = ObjectSerializer::toQueryValue($repeatBillable);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateReturnsSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  string $allowReturns (optional)
     * @param  string $autoApproveReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateReturnsSettingsdoRequest($contractID, $allowReturns = null, $autoApproveReturns = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateReturnsSettingsdo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateReturnsSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($allowReturns !== null) {
            $queryParams['allowReturns'] = ObjectSerializer::toQueryValue($allowReturns);
        }
        // query params
        if ($autoApproveReturns !== null) {
            $queryParams['autoApproveReturns'] = ObjectSerializer::toQueryValue($autoApproveReturns);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateRevenueCapdo'
     *
     * @param  int $contractID (required)
     * @param  int $hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateRevenueCapdoRequest($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateRevenueCapdo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateRevenueCap.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($hourlyRevenueCap !== null) {
            $queryParams['hourlyRevenueCap'] = ObjectSerializer::toQueryValue($hourlyRevenueCap);
        }
        // query params
        if ($dailyRevenueCap !== null) {
            $queryParams['dailyRevenueCap'] = ObjectSerializer::toQueryValue($dailyRevenueCap);
        }
        // query params
        if ($weeklyRevenueCap !== null) {
            $queryParams['weeklyRevenueCap'] = ObjectSerializer::toQueryValue($weeklyRevenueCap);
        }
        // query params
        if ($monthlyRevenueCap !== null) {
            $queryParams['monthlyRevenueCap'] = ObjectSerializer::toQueryValue($monthlyRevenueCap);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateRevenueModeldo'
     *
     * @param  int $contractID (required)
     * @param  string $revenueModel (required)
     * @param  float $price (required)
     * @param  string $duration (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateRevenueModeldoRequest($contractID, $revenueModel, $price, $duration = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateRevenueModeldo'
            );
        }
        // verify the required parameter 'revenueModel' is set
        if ($revenueModel === null || (is_array($revenueModel) && count($revenueModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revenueModel when calling callRoutingContractsupdateRevenueModeldo'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling callRoutingContractsupdateRevenueModeldo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateRevenueModel.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($revenueModel !== null) {
            $queryParams['revenueModel'] = ObjectSerializer::toQueryValue($revenueModel);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = ObjectSerializer::toQueryValue($duration);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateTransferNumberdo'
     *
     * @param  int $contractID (required)
     * @param  string $transferNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateTransferNumberdoRequest($contractID, $transferNumber)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateTransferNumberdo'
            );
        }
        // verify the required parameter 'transferNumber' is set
        if ($transferNumber === null || (is_array($transferNumber) && count($transferNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transferNumber when calling callRoutingContractsupdateTransferNumberdo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateTransferNumber.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($transferNumber !== null) {
            $queryParams['transferNumber'] = ObjectSerializer::toQueryValue($transferNumber);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'callRoutingContractsupdateTransfersCapdo'
     *
     * @param  int $contractID (required)
     * @param  int $hourlyTransfersCap (optional)
     * @param  int $dailyTransfersCap (optional)
     * @param  int $weeklyTransfersCap (optional)
     * @param  int $monthlyTransfersCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callRoutingContractsupdateTransfersCapdoRequest($contractID, $hourlyTransfersCap = null, $dailyTransfersCap = null, $weeklyTransfersCap = null, $monthlyTransfersCap = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling callRoutingContractsupdateTransfersCapdo'
            );
        }

        $resourcePath = '/callRoutingContracts/updateTransfersCap.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($hourlyTransfersCap !== null) {
            $queryParams['hourlyTransfersCap'] = ObjectSerializer::toQueryValue($hourlyTransfersCap);
        }
        // query params
        if ($dailyTransfersCap !== null) {
            $queryParams['dailyTransfersCap'] = ObjectSerializer::toQueryValue($dailyTransfersCap);
        }
        // query params
        if ($weeklyTransfersCap !== null) {
            $queryParams['weeklyTransfersCap'] = ObjectSerializer::toQueryValue($weeklyTransfersCap);
        }
        // query params
        if ($monthlyTransfersCap !== null) {
            $queryParams['monthlyTransfersCap'] = ObjectSerializer::toQueryValue($monthlyTransfersCap);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
