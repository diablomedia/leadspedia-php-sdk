<?php
/**
 * InboundCallsApi
 * PHP version 5
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Leadspedia\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Leadspedia\ApiException;
use Leadspedia\Configuration;
use Leadspedia\HeaderSelector;
use Leadspedia\ObjectSerializer;

/**
 * InboundCallsApi Class Doc Comment
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InboundCallsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client         = $client ?: new Client();
        $this->config         = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex      = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index): void
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation inboundCallsgetAlldo
     *
     * Get All
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  string $callerID callerID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $campaignID campaignID (optional)
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  int $offerID offerID (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function inboundCallsgetAlldo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->inboundCallsgetAlldoWithHttpInfo($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation inboundCallsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundCallsgetAlldoWithHttpInfo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->inboundCallsgetAlldoRequest($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundCallsgetAlldoAsync
     *
     * Get All
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetAlldoAsync($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->inboundCallsgetAlldoAsyncWithHttpInfo($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundCallsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetAlldoAsyncWithHttpInfo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->inboundCallsgetAlldoRequest($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundCallsgetAlldo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundCallsgetAlldoRequest($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling inboundCallsgetAlldo'
            );
        }

        $resourcePath = '/inboundCalls/getAll.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($callerID !== null) {
            $queryParams['callerID'] = ObjectSerializer::toQueryValue($callerID);
        }
        // query params
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliateID);
        }
        // query params
        if ($campaignID !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaignID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($offerID !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offerID);
        }
        // query params
        if ($fromDate !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($fromDate);
        }
        // query params
        if ($toDate !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($toDate);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundCallsgetInProgressdo
     *
     * Get Calls In Progress
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  string $callerID callerID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $campaignID campaignID (optional)
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  int $offerID offerID (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function inboundCallsgetInProgressdo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->inboundCallsgetInProgressdoWithHttpInfo($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation inboundCallsgetInProgressdoWithHttpInfo
     *
     * Get Calls In Progress
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundCallsgetInProgressdoWithHttpInfo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->inboundCallsgetInProgressdoRequest($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundCallsgetInProgressdoAsync
     *
     * Get Calls In Progress
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetInProgressdoAsync($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->inboundCallsgetInProgressdoAsyncWithHttpInfo($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundCallsgetInProgressdoAsyncWithHttpInfo
     *
     * Get Calls In Progress
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetInProgressdoAsyncWithHttpInfo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->inboundCallsgetInProgressdoRequest($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundCallsgetInProgressdo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundCallsgetInProgressdoRequest($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling inboundCallsgetInProgressdo'
            );
        }

        $resourcePath = '/inboundCalls/getInProgress.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($callerID !== null) {
            $queryParams['callerID'] = ObjectSerializer::toQueryValue($callerID);
        }
        // query params
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliateID);
        }
        // query params
        if ($campaignID !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaignID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($offerID !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offerID);
        }
        // query params
        if ($fromDate !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($fromDate);
        }
        // query params
        if ($toDate !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($toDate);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundCallsgetNumbersdo
     *
     * Get Numbers
     *
     * @param  string $search search (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function inboundCallsgetNumbersdo($search = null, $start = 0, $limit = 100)
    {
        list($response) = $this->inboundCallsgetNumbersdoWithHttpInfo($search, $start, $limit);
        return $response;
    }

    /**
     * Operation inboundCallsgetNumbersdoWithHttpInfo
     *
     * Get Numbers
     *
     * @param  string $search (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundCallsgetNumbersdoWithHttpInfo($search = null, $start = 0, $limit = 100)
    {
        $request = $this->inboundCallsgetNumbersdoRequest($search, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundCallsgetNumbersdoAsync
     *
     * Get Numbers
     *
     * @param  string $search (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetNumbersdoAsync($search = null, $start = 0, $limit = 100)
    {
        return $this->inboundCallsgetNumbersdoAsyncWithHttpInfo($search, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundCallsgetNumbersdoAsyncWithHttpInfo
     *
     * Get Numbers
     *
     * @param  string $search (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetNumbersdoAsyncWithHttpInfo($search = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->inboundCallsgetNumbersdoRequest($search, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundCallsgetNumbersdo'
     *
     * @param  string $search (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundCallsgetNumbersdoRequest($search = null, $start = 0, $limit = 100)
    {
        $resourcePath = '/inboundCalls/getNumbers.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundCallsgetReturneddo
     *
     * Get Returned Calls
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  string $callerID callerID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $campaignID campaignID (optional)
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  int $offerID offerID (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function inboundCallsgetReturneddo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->inboundCallsgetReturneddoWithHttpInfo($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation inboundCallsgetReturneddoWithHttpInfo
     *
     * Get Returned Calls
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundCallsgetReturneddoWithHttpInfo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->inboundCallsgetReturneddoRequest($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundCallsgetReturneddoAsync
     *
     * Get Returned Calls
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetReturneddoAsync($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->inboundCallsgetReturneddoAsyncWithHttpInfo($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundCallsgetReturneddoAsyncWithHttpInfo
     *
     * Get Returned Calls
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetReturneddoAsyncWithHttpInfo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->inboundCallsgetReturneddoRequest($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundCallsgetReturneddo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundCallsgetReturneddoRequest($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling inboundCallsgetReturneddo'
            );
        }

        $resourcePath = '/inboundCalls/getReturned.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($callerID !== null) {
            $queryParams['callerID'] = ObjectSerializer::toQueryValue($callerID);
        }
        // query params
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliateID);
        }
        // query params
        if ($campaignID !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaignID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($offerID !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offerID);
        }
        // query params
        if ($fromDate !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($fromDate);
        }
        // query params
        if ($toDate !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($toDate);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundCallsgetScrubbeddo
     *
     * Get Scrubbed Calls
     *
     * @param  \DateTime $toDate toDate (required)
     * @param  string $callerID callerID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $campaignID campaignID (optional)
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  int $offerID offerID (optional)
     * @param  \DateTime $fromDate fromDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function inboundCallsgetScrubbeddo($toDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $fromDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->inboundCallsgetScrubbeddoWithHttpInfo($toDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $fromDate, $start, $limit);
        return $response;
    }

    /**
     * Operation inboundCallsgetScrubbeddoWithHttpInfo
     *
     * Get Scrubbed Calls
     *
     * @param  \DateTime $toDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $fromDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundCallsgetScrubbeddoWithHttpInfo($toDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $fromDate = null, $start = 0, $limit = 100)
    {
        $request = $this->inboundCallsgetScrubbeddoRequest($toDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $fromDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundCallsgetScrubbeddoAsync
     *
     * Get Scrubbed Calls
     *
     * @param  \DateTime $toDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $fromDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetScrubbeddoAsync($toDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $fromDate = null, $start = 0, $limit = 100)
    {
        return $this->inboundCallsgetScrubbeddoAsyncWithHttpInfo($toDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $fromDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundCallsgetScrubbeddoAsyncWithHttpInfo
     *
     * Get Scrubbed Calls
     *
     * @param  \DateTime $toDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $fromDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetScrubbeddoAsyncWithHttpInfo($toDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $fromDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->inboundCallsgetScrubbeddoRequest($toDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $fromDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundCallsgetScrubbeddo'
     *
     * @param  \DateTime $toDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $fromDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundCallsgetScrubbeddoRequest($toDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $fromDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'toDate' is set
        if ($toDate === null || (is_array($toDate) && count($toDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $toDate when calling inboundCallsgetScrubbeddo'
            );
        }

        $resourcePath = '/inboundCalls/getScrubbed.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($callerID !== null) {
            $queryParams['callerID'] = ObjectSerializer::toQueryValue($callerID);
        }
        // query params
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliateID);
        }
        // query params
        if ($campaignID !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaignID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($offerID !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offerID);
        }
        // query params
        if ($fromDate !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($fromDate);
        }
        // query params
        if ($toDate !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($toDate);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundCallsgetTransferreddo
     *
     * Get Transferred Calls
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  string $callerID callerID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $campaignID campaignID (optional)
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  int $offerID offerID (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse2001
     */
    public function inboundCallsgetTransferreddo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->inboundCallsgetTransferreddoWithHttpInfo($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation inboundCallsgetTransferreddoWithHttpInfo
     *
     * Get Transferred Calls
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundCallsgetTransferreddoWithHttpInfo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->inboundCallsgetTransferreddoRequest($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundCallsgetTransferreddoAsync
     *
     * Get Transferred Calls
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetTransferreddoAsync($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->inboundCallsgetTransferreddoAsyncWithHttpInfo($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundCallsgetTransferreddoAsyncWithHttpInfo
     *
     * Get Transferred Calls
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundCallsgetTransferreddoAsyncWithHttpInfo($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse2001';
        $request    = $this->inboundCallsgetTransferreddoRequest($fromDate, $callerID, $affiliateID, $campaignID, $advertiserID, $contractID, $verticalID, $offerID, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundCallsgetTransferreddo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $callerID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $campaignID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  int $offerID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundCallsgetTransferreddoRequest($fromDate, $callerID = null, $affiliateID = null, $campaignID = null, $advertiserID = null, $contractID = null, $verticalID = null, $offerID = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling inboundCallsgetTransferreddo'
            );
        }

        $resourcePath = '/inboundCalls/getTransferred.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($callerID !== null) {
            $queryParams['callerID'] = ObjectSerializer::toQueryValue($callerID);
        }
        // query params
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = ObjectSerializer::toQueryValue($affiliateID);
        }
        // query params
        if ($campaignID !== null) {
            $queryParams['campaignID'] = ObjectSerializer::toQueryValue($campaignID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($offerID !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offerID);
        }
        // query params
        if ($fromDate !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($fromDate);
        }
        // query params
        if ($toDate !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($toDate);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
