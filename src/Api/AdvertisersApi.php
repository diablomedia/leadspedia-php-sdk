<?php
/**
 * AdvertisersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Leadspedia\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Leadspedia\ApiException;
use Leadspedia\Configuration;
use Leadspedia\HeaderSelector;
use Leadspedia\ObjectSerializer;

/**
 * AdvertisersApi Class Doc Comment
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdvertisersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation advertisersadjustCreditdo
     *
     * Adjust Credit
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  string $type type (required)
     * @param  float $amount amount (required)
     * @param  string $charge charge (optional, default to 'No')
     * @param  string $generateInvoice generateInvoice (optional, default to 'No')
     * @param  string $note note (optional)
     * @param  string $transactionFee transactionFee (optional)
     * @param  float $transactionFeePercentage transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount transactionFeeAmount (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersadjustCreditdo($advertiserID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        list($response) = $this->advertisersadjustCreditdoWithHttpInfo($advertiserID, $type, $amount, $charge, $generateInvoice, $note, $transactionFee, $transactionFeePercentage, $transactionFeeAmount);
        return $response;
    }

    /**
     * Operation advertisersadjustCreditdoWithHttpInfo
     *
     * Adjust Credit
     *
     * @param  int $advertiserID (required)
     * @param  string $type (required)
     * @param  float $amount (required)
     * @param  string $charge (optional, default to 'No')
     * @param  string $generateInvoice (optional, default to 'No')
     * @param  string $note (optional)
     * @param  string $transactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersadjustCreditdoWithHttpInfo($advertiserID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        $request = $this->advertisersadjustCreditdoRequest($advertiserID, $type, $amount, $charge, $generateInvoice, $note, $transactionFee, $transactionFeePercentage, $transactionFeeAmount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersadjustCreditdoAsync
     *
     * Adjust Credit
     *
     * @param  int $advertiserID (required)
     * @param  string $type (required)
     * @param  float $amount (required)
     * @param  string $charge (optional, default to 'No')
     * @param  string $generateInvoice (optional, default to 'No')
     * @param  string $note (optional)
     * @param  string $transactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersadjustCreditdoAsync($advertiserID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        return $this->advertisersadjustCreditdoAsyncWithHttpInfo($advertiserID, $type, $amount, $charge, $generateInvoice, $note, $transactionFee, $transactionFeePercentage, $transactionFeeAmount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersadjustCreditdoAsyncWithHttpInfo
     *
     * Adjust Credit
     *
     * @param  int $advertiserID (required)
     * @param  string $type (required)
     * @param  float $amount (required)
     * @param  string $charge (optional, default to 'No')
     * @param  string $generateInvoice (optional, default to 'No')
     * @param  string $note (optional)
     * @param  string $transactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersadjustCreditdoAsyncWithHttpInfo($advertiserID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersadjustCreditdoRequest($advertiserID, $type, $amount, $charge, $generateInvoice, $note, $transactionFee, $transactionFeePercentage, $transactionFeeAmount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersadjustCreditdo'
     *
     * @param  int $advertiserID (required)
     * @param  string $type (required)
     * @param  float $amount (required)
     * @param  string $charge (optional, default to 'No')
     * @param  string $generateInvoice (optional, default to 'No')
     * @param  string $note (optional)
     * @param  string $transactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersadjustCreditdoRequest($advertiserID, $type, $amount, $charge = 'No', $generateInvoice = 'No', $note = null, $transactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersadjustCreditdo'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling advertisersadjustCreditdo'
            );
        }
        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling advertisersadjustCreditdo'
            );
        }

        $resourcePath = '/advertisers/adjustCredit.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $charge,
            'charge', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $generateInvoice,
            'generateInvoice', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $note,
            'note', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionFee,
            'transactionFee', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionFeePercentage,
            'transactionFeePercentage', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionFeeAmount,
            'transactionFeeAmount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertiserschangeStatusdo
     *
     * Change Status
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  string $status status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertiserschangeStatusdo($advertiserID, $status)
    {
        list($response) = $this->advertiserschangeStatusdoWithHttpInfo($advertiserID, $status);
        return $response;
    }

    /**
     * Operation advertiserschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $advertiserID (required)
     * @param  string $status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertiserschangeStatusdoWithHttpInfo($advertiserID, $status)
    {
        $request = $this->advertiserschangeStatusdoRequest($advertiserID, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertiserschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $advertiserID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserschangeStatusdoAsync($advertiserID, $status)
    {
        return $this->advertiserschangeStatusdoAsyncWithHttpInfo($advertiserID, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertiserschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $advertiserID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserschangeStatusdoAsyncWithHttpInfo($advertiserID, $status)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertiserschangeStatusdoRequest($advertiserID, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertiserschangeStatusdo'
     *
     * @param  int $advertiserID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertiserschangeStatusdoRequest($advertiserID, $status)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertiserschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling advertiserschangeStatusdo'
            );
        }

        $resourcePath = '/advertisers/changeStatus.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertiserscreatedo
     *
     * Create
     *
     * @param  string $advertiserName advertiserName (required)
     * @param  int $accountManagerID accountManagerID (required)
     * @param  string $status status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertiserscreatedo($advertiserName, $accountManagerID, $status)
    {
        list($response) = $this->advertiserscreatedoWithHttpInfo($advertiserName, $accountManagerID, $status);
        return $response;
    }

    /**
     * Operation advertiserscreatedoWithHttpInfo
     *
     * Create
     *
     * @param  string $advertiserName (required)
     * @param  int $accountManagerID (required)
     * @param  string $status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertiserscreatedoWithHttpInfo($advertiserName, $accountManagerID, $status)
    {
        $request = $this->advertiserscreatedoRequest($advertiserName, $accountManagerID, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertiserscreatedoAsync
     *
     * Create
     *
     * @param  string $advertiserName (required)
     * @param  int $accountManagerID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserscreatedoAsync($advertiserName, $accountManagerID, $status)
    {
        return $this->advertiserscreatedoAsyncWithHttpInfo($advertiserName, $accountManagerID, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertiserscreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  string $advertiserName (required)
     * @param  int $accountManagerID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserscreatedoAsyncWithHttpInfo($advertiserName, $accountManagerID, $status)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertiserscreatedoRequest($advertiserName, $accountManagerID, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertiserscreatedo'
     *
     * @param  string $advertiserName (required)
     * @param  int $accountManagerID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertiserscreatedoRequest($advertiserName, $accountManagerID, $status)
    {
        // verify the required parameter 'advertiserName' is set
        if ($advertiserName === null || (is_array($advertiserName) && count($advertiserName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserName when calling advertiserscreatedo'
            );
        }
        // verify the required parameter 'accountManagerID' is set
        if ($accountManagerID === null || (is_array($accountManagerID) && count($accountManagerID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountManagerID when calling advertiserscreatedo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling advertiserscreatedo'
            );
        }

        $resourcePath = '/advertisers/create.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserName,
            'advertiserName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountManagerID,
            'accountManagerID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersdeletedo
     *
     * Delete
     *
     * @param  int $advertiserID advertiserID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersdeletedo($advertiserID)
    {
        list($response) = $this->advertisersdeletedoWithHttpInfo($advertiserID);
        return $response;
    }

    /**
     * Operation advertisersdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $advertiserID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersdeletedoWithHttpInfo($advertiserID)
    {
        $request = $this->advertisersdeletedoRequest($advertiserID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersdeletedoAsync
     *
     * Delete
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersdeletedoAsync($advertiserID)
    {
        return $this->advertisersdeletedoAsyncWithHttpInfo($advertiserID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersdeletedoAsyncWithHttpInfo($advertiserID)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersdeletedoRequest($advertiserID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersdeletedo'
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersdeletedoRequest($advertiserID)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersdeletedo'
            );
        }

        $resourcePath = '/advertisers/delete.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersenableCreditdo
     *
     * Enable Credit
     *
     * @param  int $advertiserID advertiserID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersenableCreditdo($advertiserID)
    {
        list($response) = $this->advertisersenableCreditdoWithHttpInfo($advertiserID);
        return $response;
    }

    /**
     * Operation advertisersenableCreditdoWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $advertiserID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersenableCreditdoWithHttpInfo($advertiserID)
    {
        $request = $this->advertisersenableCreditdoRequest($advertiserID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersenableCreditdoAsync
     *
     * Enable Credit
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersenableCreditdoAsync($advertiserID)
    {
        return $this->advertisersenableCreditdoAsyncWithHttpInfo($advertiserID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersenableCreditdoAsyncWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersenableCreditdoAsyncWithHttpInfo($advertiserID)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersenableCreditdoRequest($advertiserID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersenableCreditdo'
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersenableCreditdoRequest($advertiserID)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersenableCreditdo'
            );
        }

        $resourcePath = '/advertisers/enableCredit.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersgetAlldo
     *
     * Get All
     *
     * @param  int $advertiserID advertiserID (optional)
     * @param  string $advertiserType advertiserType (optional)
     * @param  int $accountManagerID accountManagerID (optional)
     * @param  string $status status (optional)
     * @param  string $isCreditEnabled isCreditEnabled (optional)
     * @param  string $hasCreditCardOnFile hasCreditCardOnFile (optional)
     * @param  string $search search (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\VerticalsgetAlldo200Response
     */
    public function advertisersgetAlldo($advertiserID = null, $advertiserType = null, $accountManagerID = null, $status = null, $isCreditEnabled = null, $hasCreditCardOnFile = null, $search = null, $start = 0, $limit = 100)
    {
        list($response) = $this->advertisersgetAlldoWithHttpInfo($advertiserID, $advertiserType, $accountManagerID, $status, $isCreditEnabled, $hasCreditCardOnFile, $search, $start, $limit);
        return $response;
    }

    /**
     * Operation advertisersgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  string $advertiserType (optional)
     * @param  int $accountManagerID (optional)
     * @param  string $status (optional)
     * @param  string $isCreditEnabled (optional)
     * @param  string $hasCreditCardOnFile (optional)
     * @param  string $search (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\VerticalsgetAlldo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersgetAlldoWithHttpInfo($advertiserID = null, $advertiserType = null, $accountManagerID = null, $status = null, $isCreditEnabled = null, $hasCreditCardOnFile = null, $search = null, $start = 0, $limit = 100)
    {
        $request = $this->advertisersgetAlldoRequest($advertiserID, $advertiserType, $accountManagerID, $status, $isCreditEnabled, $hasCreditCardOnFile, $search, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\VerticalsgetAlldo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\VerticalsgetAlldo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\VerticalsgetAlldo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\VerticalsgetAlldo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\VerticalsgetAlldo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersgetAlldoAsync
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  string $advertiserType (optional)
     * @param  int $accountManagerID (optional)
     * @param  string $status (optional)
     * @param  string $isCreditEnabled (optional)
     * @param  string $hasCreditCardOnFile (optional)
     * @param  string $search (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersgetAlldoAsync($advertiserID = null, $advertiserType = null, $accountManagerID = null, $status = null, $isCreditEnabled = null, $hasCreditCardOnFile = null, $search = null, $start = 0, $limit = 100)
    {
        return $this->advertisersgetAlldoAsyncWithHttpInfo($advertiserID, $advertiserType, $accountManagerID, $status, $isCreditEnabled, $hasCreditCardOnFile, $search, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  string $advertiserType (optional)
     * @param  int $accountManagerID (optional)
     * @param  string $status (optional)
     * @param  string $isCreditEnabled (optional)
     * @param  string $hasCreditCardOnFile (optional)
     * @param  string $search (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersgetAlldoAsyncWithHttpInfo($advertiserID = null, $advertiserType = null, $accountManagerID = null, $status = null, $isCreditEnabled = null, $hasCreditCardOnFile = null, $search = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\VerticalsgetAlldo200Response';
        $request = $this->advertisersgetAlldoRequest($advertiserID, $advertiserType, $accountManagerID, $status, $isCreditEnabled, $hasCreditCardOnFile, $search, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersgetAlldo'
     *
     * @param  int $advertiserID (optional)
     * @param  string $advertiserType (optional)
     * @param  int $accountManagerID (optional)
     * @param  string $status (optional)
     * @param  string $isCreditEnabled (optional)
     * @param  string $hasCreditCardOnFile (optional)
     * @param  string $search (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersgetAlldoRequest($advertiserID = null, $advertiserType = null, $accountManagerID = null, $status = null, $isCreditEnabled = null, $hasCreditCardOnFile = null, $search = null, $start = 0, $limit = 100)
    {

        $resourcePath = '/advertisers/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserType,
            'advertiserType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountManagerID,
            'accountManagerID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isCreditEnabled,
            'isCreditEnabled', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hasCreditCardOnFile,
            'hasCreditCardOnFile', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersgetInfodo
     *
     * Get Info
     *
     * @param  int $advertiserID advertiserID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\VerticalsgetAlldo200Response
     */
    public function advertisersgetInfodo($advertiserID)
    {
        list($response) = $this->advertisersgetInfodoWithHttpInfo($advertiserID);
        return $response;
    }

    /**
     * Operation advertisersgetInfodoWithHttpInfo
     *
     * Get Info
     *
     * @param  int $advertiserID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\VerticalsgetAlldo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersgetInfodoWithHttpInfo($advertiserID)
    {
        $request = $this->advertisersgetInfodoRequest($advertiserID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\VerticalsgetAlldo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\VerticalsgetAlldo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\VerticalsgetAlldo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\VerticalsgetAlldo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\VerticalsgetAlldo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersgetInfodoAsync
     *
     * Get Info
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersgetInfodoAsync($advertiserID)
    {
        return $this->advertisersgetInfodoAsyncWithHttpInfo($advertiserID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersgetInfodoAsyncWithHttpInfo
     *
     * Get Info
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersgetInfodoAsyncWithHttpInfo($advertiserID)
    {
        $returnType = '\Leadspedia\Model\VerticalsgetAlldo200Response';
        $request = $this->advertisersgetInfodoRequest($advertiserID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersgetInfodo'
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersgetInfodoRequest($advertiserID)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersgetInfodo'
            );
        }

        $resourcePath = '/advertisers/getInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertiserssearchdo
     *
     * Search
     *
     * @param  string $search search (required)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\VerticalsgetAlldo200Response
     */
    public function advertiserssearchdo($search, $start = 0, $limit = 100)
    {
        list($response) = $this->advertiserssearchdoWithHttpInfo($search, $start, $limit);
        return $response;
    }

    /**
     * Operation advertiserssearchdoWithHttpInfo
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\VerticalsgetAlldo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertiserssearchdoWithHttpInfo($search, $start = 0, $limit = 100)
    {
        $request = $this->advertiserssearchdoRequest($search, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\VerticalsgetAlldo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\VerticalsgetAlldo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\VerticalsgetAlldo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\VerticalsgetAlldo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\VerticalsgetAlldo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertiserssearchdoAsync
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserssearchdoAsync($search, $start = 0, $limit = 100)
    {
        return $this->advertiserssearchdoAsyncWithHttpInfo($search, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertiserssearchdoAsyncWithHttpInfo
     *
     * Search
     *
     * @param  string $search (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertiserssearchdoAsyncWithHttpInfo($search, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\VerticalsgetAlldo200Response';
        $request = $this->advertiserssearchdoRequest($search, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertiserssearchdo'
     *
     * @param  string $search (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertiserssearchdoRequest($search, $start = 0, $limit = 100)
    {
        // verify the required parameter 'search' is set
        if ($search === null || (is_array($search) && count($search) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search when calling advertiserssearchdo'
            );
        }

        $resourcePath = '/advertisers/search.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateAuthorizeNetCustomerProfileIDdo
     *
     * Update Authorize Net Customer Profile ID
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  string $authNetCustomerProfileID authNetCustomerProfileID (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdo($advertiserID, $authNetCustomerProfileID = null)
    {
        list($response) = $this->advertisersupdateAuthorizeNetCustomerProfileIDdoWithHttpInfo($advertiserID, $authNetCustomerProfileID);
        return $response;
    }

    /**
     * Operation advertisersupdateAuthorizeNetCustomerProfileIDdoWithHttpInfo
     *
     * Update Authorize Net Customer Profile ID
     *
     * @param  int $advertiserID (required)
     * @param  string $authNetCustomerProfileID (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdoWithHttpInfo($advertiserID, $authNetCustomerProfileID = null)
    {
        $request = $this->advertisersupdateAuthorizeNetCustomerProfileIDdoRequest($advertiserID, $authNetCustomerProfileID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateAuthorizeNetCustomerProfileIDdoAsync
     *
     * Update Authorize Net Customer Profile ID
     *
     * @param  int $advertiserID (required)
     * @param  string $authNetCustomerProfileID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdoAsync($advertiserID, $authNetCustomerProfileID = null)
    {
        return $this->advertisersupdateAuthorizeNetCustomerProfileIDdoAsyncWithHttpInfo($advertiserID, $authNetCustomerProfileID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateAuthorizeNetCustomerProfileIDdoAsyncWithHttpInfo
     *
     * Update Authorize Net Customer Profile ID
     *
     * @param  int $advertiserID (required)
     * @param  string $authNetCustomerProfileID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdoAsyncWithHttpInfo($advertiserID, $authNetCustomerProfileID = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateAuthorizeNetCustomerProfileIDdoRequest($advertiserID, $authNetCustomerProfileID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateAuthorizeNetCustomerProfileIDdo'
     *
     * @param  int $advertiserID (required)
     * @param  string $authNetCustomerProfileID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateAuthorizeNetCustomerProfileIDdoRequest($advertiserID, $authNetCustomerProfileID = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateAuthorizeNetCustomerProfileIDdo'
            );
        }

        $resourcePath = '/advertisers/updateAuthorizeNetCustomerProfileID.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authNetCustomerProfileID,
            'authNetCustomerProfileID', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateAutoRechargeSettingsdo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  string $enableAutoRecharge enableAutoRecharge (optional)
     * @param  float $autoChargeBalance autoChargeBalance (optional)
     * @param  float $autoChargeAmount autoChargeAmount (optional)
     * @param  string $chargeTransactionFee chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount transactionFeeAmount (optional)
     * @param  string $generateInvoice generateInvoice (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateAutoRechargeSettingsdo($advertiserID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        list($response) = $this->advertisersupdateAutoRechargeSettingsdoWithHttpInfo($advertiserID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);
        return $response;
    }

    /**
     * Operation advertisersupdateAutoRechargeSettingsdoWithHttpInfo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $advertiserID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateAutoRechargeSettingsdoWithHttpInfo($advertiserID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        $request = $this->advertisersupdateAutoRechargeSettingsdoRequest($advertiserID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateAutoRechargeSettingsdoAsync
     *
     * Update Auto Recharge Settings
     *
     * @param  int $advertiserID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateAutoRechargeSettingsdoAsync($advertiserID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        return $this->advertisersupdateAutoRechargeSettingsdoAsyncWithHttpInfo($advertiserID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateAutoRechargeSettingsdoAsyncWithHttpInfo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $advertiserID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateAutoRechargeSettingsdoAsyncWithHttpInfo($advertiserID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateAutoRechargeSettingsdoRequest($advertiserID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateAutoRechargeSettingsdo'
     *
     * @param  int $advertiserID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateAutoRechargeSettingsdoRequest($advertiserID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateAutoRechargeSettingsdo'
            );
        }

        $resourcePath = '/advertisers/updateAutoRechargeSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enableAutoRecharge,
            'enableAutoRecharge', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $autoChargeBalance,
            'autoChargeBalance', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $autoChargeAmount,
            'autoChargeAmount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $chargeTransactionFee,
            'chargeTransactionFee', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionFeePercentage,
            'transactionFeePercentage', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionFeeAmount,
            'transactionFeeAmount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $generateInvoice,
            'generateInvoice', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateBillingdo
     *
     * Update Billing
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  string $billingCycle billingCycle (optional)
     * @param  string $taxID taxID (optional)
     * @param  string $taxClass taxClass (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateBillingdo($advertiserID, $billingCycle = null, $taxID = null, $taxClass = null)
    {
        list($response) = $this->advertisersupdateBillingdoWithHttpInfo($advertiserID, $billingCycle, $taxID, $taxClass);
        return $response;
    }

    /**
     * Operation advertisersupdateBillingdoWithHttpInfo
     *
     * Update Billing
     *
     * @param  int $advertiserID (required)
     * @param  string $billingCycle (optional)
     * @param  string $taxID (optional)
     * @param  string $taxClass (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateBillingdoWithHttpInfo($advertiserID, $billingCycle = null, $taxID = null, $taxClass = null)
    {
        $request = $this->advertisersupdateBillingdoRequest($advertiserID, $billingCycle, $taxID, $taxClass);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateBillingdoAsync
     *
     * Update Billing
     *
     * @param  int $advertiserID (required)
     * @param  string $billingCycle (optional)
     * @param  string $taxID (optional)
     * @param  string $taxClass (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateBillingdoAsync($advertiserID, $billingCycle = null, $taxID = null, $taxClass = null)
    {
        return $this->advertisersupdateBillingdoAsyncWithHttpInfo($advertiserID, $billingCycle, $taxID, $taxClass)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateBillingdoAsyncWithHttpInfo
     *
     * Update Billing
     *
     * @param  int $advertiserID (required)
     * @param  string $billingCycle (optional)
     * @param  string $taxID (optional)
     * @param  string $taxClass (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateBillingdoAsyncWithHttpInfo($advertiserID, $billingCycle = null, $taxID = null, $taxClass = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateBillingdoRequest($advertiserID, $billingCycle, $taxID, $taxClass);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateBillingdo'
     *
     * @param  int $advertiserID (required)
     * @param  string $billingCycle (optional)
     * @param  string $taxID (optional)
     * @param  string $taxClass (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateBillingdoRequest($advertiserID, $billingCycle = null, $taxID = null, $taxClass = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateBillingdo'
            );
        }

        $resourcePath = '/advertisers/updateBilling.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billingCycle,
            'billingCycle', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxID,
            'taxID', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxClass,
            'taxClass', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateInfodo
     *
     * Update Info
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  string $advertiserName advertiserName (optional)
     * @param  string $website website (optional)
     * @param  string $alternateID alternateID (optional)
     * @param  string $source source (optional)
     * @param  string $externalCRMID externalCRMID (optional)
     * @param  int $numberOfStaff numberOfStaff (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $city city (optional)
     * @param  string $state state (optional)
     * @param  string $zipCode zipCode (optional)
     * @param  string $country country (optional)
     * @param  string $reportingUrl reportingUrl (optional)
     * @param  string $reportingUsername reportingUsername (optional)
     * @param  string $reportingPassword reportingPassword (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateInfodo($advertiserID, $advertiserName = null, $website = null, $alternateID = null, $source = null, $externalCRMID = null, $numberOfStaff = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null, $reportingUrl = null, $reportingUsername = null, $reportingPassword = null)
    {
        list($response) = $this->advertisersupdateInfodoWithHttpInfo($advertiserID, $advertiserName, $website, $alternateID, $source, $externalCRMID, $numberOfStaff, $address, $address2, $city, $state, $zipCode, $country, $reportingUrl, $reportingUsername, $reportingPassword);
        return $response;
    }

    /**
     * Operation advertisersupdateInfodoWithHttpInfo
     *
     * Update Info
     *
     * @param  int $advertiserID (required)
     * @param  string $advertiserName (optional)
     * @param  string $website (optional)
     * @param  string $alternateID (optional)
     * @param  string $source (optional)
     * @param  string $externalCRMID (optional)
     * @param  int $numberOfStaff (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zipCode (optional)
     * @param  string $country (optional)
     * @param  string $reportingUrl (optional)
     * @param  string $reportingUsername (optional)
     * @param  string $reportingPassword (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateInfodoWithHttpInfo($advertiserID, $advertiserName = null, $website = null, $alternateID = null, $source = null, $externalCRMID = null, $numberOfStaff = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null, $reportingUrl = null, $reportingUsername = null, $reportingPassword = null)
    {
        $request = $this->advertisersupdateInfodoRequest($advertiserID, $advertiserName, $website, $alternateID, $source, $externalCRMID, $numberOfStaff, $address, $address2, $city, $state, $zipCode, $country, $reportingUrl, $reportingUsername, $reportingPassword);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateInfodoAsync
     *
     * Update Info
     *
     * @param  int $advertiserID (required)
     * @param  string $advertiserName (optional)
     * @param  string $website (optional)
     * @param  string $alternateID (optional)
     * @param  string $source (optional)
     * @param  string $externalCRMID (optional)
     * @param  int $numberOfStaff (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zipCode (optional)
     * @param  string $country (optional)
     * @param  string $reportingUrl (optional)
     * @param  string $reportingUsername (optional)
     * @param  string $reportingPassword (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateInfodoAsync($advertiserID, $advertiserName = null, $website = null, $alternateID = null, $source = null, $externalCRMID = null, $numberOfStaff = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null, $reportingUrl = null, $reportingUsername = null, $reportingPassword = null)
    {
        return $this->advertisersupdateInfodoAsyncWithHttpInfo($advertiserID, $advertiserName, $website, $alternateID, $source, $externalCRMID, $numberOfStaff, $address, $address2, $city, $state, $zipCode, $country, $reportingUrl, $reportingUsername, $reportingPassword)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateInfodoAsyncWithHttpInfo
     *
     * Update Info
     *
     * @param  int $advertiserID (required)
     * @param  string $advertiserName (optional)
     * @param  string $website (optional)
     * @param  string $alternateID (optional)
     * @param  string $source (optional)
     * @param  string $externalCRMID (optional)
     * @param  int $numberOfStaff (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zipCode (optional)
     * @param  string $country (optional)
     * @param  string $reportingUrl (optional)
     * @param  string $reportingUsername (optional)
     * @param  string $reportingPassword (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateInfodoAsyncWithHttpInfo($advertiserID, $advertiserName = null, $website = null, $alternateID = null, $source = null, $externalCRMID = null, $numberOfStaff = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null, $reportingUrl = null, $reportingUsername = null, $reportingPassword = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateInfodoRequest($advertiserID, $advertiserName, $website, $alternateID, $source, $externalCRMID, $numberOfStaff, $address, $address2, $city, $state, $zipCode, $country, $reportingUrl, $reportingUsername, $reportingPassword);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateInfodo'
     *
     * @param  int $advertiserID (required)
     * @param  string $advertiserName (optional)
     * @param  string $website (optional)
     * @param  string $alternateID (optional)
     * @param  string $source (optional)
     * @param  string $externalCRMID (optional)
     * @param  int $numberOfStaff (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zipCode (optional)
     * @param  string $country (optional)
     * @param  string $reportingUrl (optional)
     * @param  string $reportingUsername (optional)
     * @param  string $reportingPassword (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateInfodoRequest($advertiserID, $advertiserName = null, $website = null, $alternateID = null, $source = null, $externalCRMID = null, $numberOfStaff = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null, $reportingUrl = null, $reportingUsername = null, $reportingPassword = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateInfodo'
            );
        }

        $resourcePath = '/advertisers/updateInfo.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserName,
            'advertiserName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $website,
            'website', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $alternateID,
            'alternateID', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalCRMID,
            'externalCRMID', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $numberOfStaff,
            'numberOfStaff', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address2,
            'address2', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $city,
            'city', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zipCode,
            'zipCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reportingUrl,
            'reportingUrl', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reportingUsername,
            'reportingUsername', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reportingPassword,
            'reportingPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateLeadsCapsdo
     *
     * Update Leads Caps
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $leadsDailyCap leadsDailyCap (optional)
     * @param  int $leadsWeeklyCap leadsWeeklyCap (optional)
     * @param  int $leadsMonthlyCap leadsMonthlyCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateLeadsCapsdo($advertiserID, $leadsDailyCap = null, $leadsWeeklyCap = null, $leadsMonthlyCap = null)
    {
        list($response) = $this->advertisersupdateLeadsCapsdoWithHttpInfo($advertiserID, $leadsDailyCap, $leadsWeeklyCap, $leadsMonthlyCap);
        return $response;
    }

    /**
     * Operation advertisersupdateLeadsCapsdoWithHttpInfo
     *
     * Update Leads Caps
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyCap (optional)
     * @param  int $leadsWeeklyCap (optional)
     * @param  int $leadsMonthlyCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateLeadsCapsdoWithHttpInfo($advertiserID, $leadsDailyCap = null, $leadsWeeklyCap = null, $leadsMonthlyCap = null)
    {
        $request = $this->advertisersupdateLeadsCapsdoRequest($advertiserID, $leadsDailyCap, $leadsWeeklyCap, $leadsMonthlyCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateLeadsCapsdoAsync
     *
     * Update Leads Caps
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyCap (optional)
     * @param  int $leadsWeeklyCap (optional)
     * @param  int $leadsMonthlyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsCapsdoAsync($advertiserID, $leadsDailyCap = null, $leadsWeeklyCap = null, $leadsMonthlyCap = null)
    {
        return $this->advertisersupdateLeadsCapsdoAsyncWithHttpInfo($advertiserID, $leadsDailyCap, $leadsWeeklyCap, $leadsMonthlyCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateLeadsCapsdoAsyncWithHttpInfo
     *
     * Update Leads Caps
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyCap (optional)
     * @param  int $leadsWeeklyCap (optional)
     * @param  int $leadsMonthlyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsCapsdoAsyncWithHttpInfo($advertiserID, $leadsDailyCap = null, $leadsWeeklyCap = null, $leadsMonthlyCap = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateLeadsCapsdoRequest($advertiserID, $leadsDailyCap, $leadsWeeklyCap, $leadsMonthlyCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateLeadsCapsdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyCap (optional)
     * @param  int $leadsWeeklyCap (optional)
     * @param  int $leadsMonthlyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateLeadsCapsdoRequest($advertiserID, $leadsDailyCap = null, $leadsWeeklyCap = null, $leadsMonthlyCap = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateLeadsCapsdo'
            );
        }

        $resourcePath = '/advertisers/updateLeadsCaps.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsDailyCap,
            'leadsDailyCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsWeeklyCap,
            'leadsWeeklyCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsMonthlyCap,
            'leadsMonthlyCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateLeadsDailyCapdo
     *
     * Update Leads Daily Cap
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $leadsDailyCap leadsDailyCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateLeadsDailyCapdo($advertiserID, $leadsDailyCap = null)
    {
        list($response) = $this->advertisersupdateLeadsDailyCapdoWithHttpInfo($advertiserID, $leadsDailyCap);
        return $response;
    }

    /**
     * Operation advertisersupdateLeadsDailyCapdoWithHttpInfo
     *
     * Update Leads Daily Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateLeadsDailyCapdoWithHttpInfo($advertiserID, $leadsDailyCap = null)
    {
        $request = $this->advertisersupdateLeadsDailyCapdoRequest($advertiserID, $leadsDailyCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateLeadsDailyCapdoAsync
     *
     * Update Leads Daily Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsDailyCapdoAsync($advertiserID, $leadsDailyCap = null)
    {
        return $this->advertisersupdateLeadsDailyCapdoAsyncWithHttpInfo($advertiserID, $leadsDailyCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateLeadsDailyCapdoAsyncWithHttpInfo
     *
     * Update Leads Daily Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsDailyCapdoAsyncWithHttpInfo($advertiserID, $leadsDailyCap = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateLeadsDailyCapdoRequest($advertiserID, $leadsDailyCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateLeadsDailyCapdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateLeadsDailyCapdoRequest($advertiserID, $leadsDailyCap = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateLeadsDailyCapdo'
            );
        }

        $resourcePath = '/advertisers/updateLeadsDailyCap.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsDailyCap,
            'leadsDailyCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateLeadsDailyRevenueCapdo
     *
     * Update Leads Daily Revenue Cap
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $leadsDailyRevenueCap leadsDailyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateLeadsDailyRevenueCapdo($advertiserID, $leadsDailyRevenueCap = null)
    {
        list($response) = $this->advertisersupdateLeadsDailyRevenueCapdoWithHttpInfo($advertiserID, $leadsDailyRevenueCap);
        return $response;
    }

    /**
     * Operation advertisersupdateLeadsDailyRevenueCapdoWithHttpInfo
     *
     * Update Leads Daily Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateLeadsDailyRevenueCapdoWithHttpInfo($advertiserID, $leadsDailyRevenueCap = null)
    {
        $request = $this->advertisersupdateLeadsDailyRevenueCapdoRequest($advertiserID, $leadsDailyRevenueCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateLeadsDailyRevenueCapdoAsync
     *
     * Update Leads Daily Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsDailyRevenueCapdoAsync($advertiserID, $leadsDailyRevenueCap = null)
    {
        return $this->advertisersupdateLeadsDailyRevenueCapdoAsyncWithHttpInfo($advertiserID, $leadsDailyRevenueCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateLeadsDailyRevenueCapdoAsyncWithHttpInfo
     *
     * Update Leads Daily Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsDailyRevenueCapdoAsyncWithHttpInfo($advertiserID, $leadsDailyRevenueCap = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateLeadsDailyRevenueCapdoRequest($advertiserID, $leadsDailyRevenueCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateLeadsDailyRevenueCapdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateLeadsDailyRevenueCapdoRequest($advertiserID, $leadsDailyRevenueCap = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateLeadsDailyRevenueCapdo'
            );
        }

        $resourcePath = '/advertisers/updateLeadsDailyRevenueCap.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsDailyRevenueCap,
            'leadsDailyRevenueCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateLeadsMonthlyCapdo
     *
     * Update Leads Monthly Cap
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $leadsMonthlyCap leadsMonthlyCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateLeadsMonthlyCapdo($advertiserID, $leadsMonthlyCap = null)
    {
        list($response) = $this->advertisersupdateLeadsMonthlyCapdoWithHttpInfo($advertiserID, $leadsMonthlyCap);
        return $response;
    }

    /**
     * Operation advertisersupdateLeadsMonthlyCapdoWithHttpInfo
     *
     * Update Leads Monthly Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsMonthlyCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateLeadsMonthlyCapdoWithHttpInfo($advertiserID, $leadsMonthlyCap = null)
    {
        $request = $this->advertisersupdateLeadsMonthlyCapdoRequest($advertiserID, $leadsMonthlyCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateLeadsMonthlyCapdoAsync
     *
     * Update Leads Monthly Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsMonthlyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsMonthlyCapdoAsync($advertiserID, $leadsMonthlyCap = null)
    {
        return $this->advertisersupdateLeadsMonthlyCapdoAsyncWithHttpInfo($advertiserID, $leadsMonthlyCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateLeadsMonthlyCapdoAsyncWithHttpInfo
     *
     * Update Leads Monthly Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsMonthlyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsMonthlyCapdoAsyncWithHttpInfo($advertiserID, $leadsMonthlyCap = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateLeadsMonthlyCapdoRequest($advertiserID, $leadsMonthlyCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateLeadsMonthlyCapdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsMonthlyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateLeadsMonthlyCapdoRequest($advertiserID, $leadsMonthlyCap = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateLeadsMonthlyCapdo'
            );
        }

        $resourcePath = '/advertisers/updateLeadsMonthlyCap.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsMonthlyCap,
            'leadsMonthlyCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateLeadsMonthlyRevenueCapdo
     *
     * Update Leads Monthly Revenue Cap
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $leadsMonthlyRevenueCap leadsMonthlyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateLeadsMonthlyRevenueCapdo($advertiserID, $leadsMonthlyRevenueCap = null)
    {
        list($response) = $this->advertisersupdateLeadsMonthlyRevenueCapdoWithHttpInfo($advertiserID, $leadsMonthlyRevenueCap);
        return $response;
    }

    /**
     * Operation advertisersupdateLeadsMonthlyRevenueCapdoWithHttpInfo
     *
     * Update Leads Monthly Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsMonthlyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateLeadsMonthlyRevenueCapdoWithHttpInfo($advertiserID, $leadsMonthlyRevenueCap = null)
    {
        $request = $this->advertisersupdateLeadsMonthlyRevenueCapdoRequest($advertiserID, $leadsMonthlyRevenueCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateLeadsMonthlyRevenueCapdoAsync
     *
     * Update Leads Monthly Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsMonthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsMonthlyRevenueCapdoAsync($advertiserID, $leadsMonthlyRevenueCap = null)
    {
        return $this->advertisersupdateLeadsMonthlyRevenueCapdoAsyncWithHttpInfo($advertiserID, $leadsMonthlyRevenueCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateLeadsMonthlyRevenueCapdoAsyncWithHttpInfo
     *
     * Update Leads Monthly Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsMonthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsMonthlyRevenueCapdoAsyncWithHttpInfo($advertiserID, $leadsMonthlyRevenueCap = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateLeadsMonthlyRevenueCapdoRequest($advertiserID, $leadsMonthlyRevenueCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateLeadsMonthlyRevenueCapdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsMonthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateLeadsMonthlyRevenueCapdoRequest($advertiserID, $leadsMonthlyRevenueCap = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateLeadsMonthlyRevenueCapdo'
            );
        }

        $resourcePath = '/advertisers/updateLeadsMonthlyRevenueCap.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsMonthlyRevenueCap,
            'leadsMonthlyRevenueCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateLeadsRevenueCapsdo
     *
     * Update Leads Revenue Caps
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $leadsDailyRevenueCap leadsDailyRevenueCap (optional)
     * @param  int $leadsWeeklyRevenueCap leadsWeeklyRevenueCap (optional)
     * @param  int $leadsMonthlyRevenueCap leadsMonthlyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateLeadsRevenueCapsdo($advertiserID, $leadsDailyRevenueCap = null, $leadsWeeklyRevenueCap = null, $leadsMonthlyRevenueCap = null)
    {
        list($response) = $this->advertisersupdateLeadsRevenueCapsdoWithHttpInfo($advertiserID, $leadsDailyRevenueCap, $leadsWeeklyRevenueCap, $leadsMonthlyRevenueCap);
        return $response;
    }

    /**
     * Operation advertisersupdateLeadsRevenueCapsdoWithHttpInfo
     *
     * Update Leads Revenue Caps
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyRevenueCap (optional)
     * @param  int $leadsWeeklyRevenueCap (optional)
     * @param  int $leadsMonthlyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateLeadsRevenueCapsdoWithHttpInfo($advertiserID, $leadsDailyRevenueCap = null, $leadsWeeklyRevenueCap = null, $leadsMonthlyRevenueCap = null)
    {
        $request = $this->advertisersupdateLeadsRevenueCapsdoRequest($advertiserID, $leadsDailyRevenueCap, $leadsWeeklyRevenueCap, $leadsMonthlyRevenueCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateLeadsRevenueCapsdoAsync
     *
     * Update Leads Revenue Caps
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyRevenueCap (optional)
     * @param  int $leadsWeeklyRevenueCap (optional)
     * @param  int $leadsMonthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsRevenueCapsdoAsync($advertiserID, $leadsDailyRevenueCap = null, $leadsWeeklyRevenueCap = null, $leadsMonthlyRevenueCap = null)
    {
        return $this->advertisersupdateLeadsRevenueCapsdoAsyncWithHttpInfo($advertiserID, $leadsDailyRevenueCap, $leadsWeeklyRevenueCap, $leadsMonthlyRevenueCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateLeadsRevenueCapsdoAsyncWithHttpInfo
     *
     * Update Leads Revenue Caps
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyRevenueCap (optional)
     * @param  int $leadsWeeklyRevenueCap (optional)
     * @param  int $leadsMonthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsRevenueCapsdoAsyncWithHttpInfo($advertiserID, $leadsDailyRevenueCap = null, $leadsWeeklyRevenueCap = null, $leadsMonthlyRevenueCap = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateLeadsRevenueCapsdoRequest($advertiserID, $leadsDailyRevenueCap, $leadsWeeklyRevenueCap, $leadsMonthlyRevenueCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateLeadsRevenueCapsdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsDailyRevenueCap (optional)
     * @param  int $leadsWeeklyRevenueCap (optional)
     * @param  int $leadsMonthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateLeadsRevenueCapsdoRequest($advertiserID, $leadsDailyRevenueCap = null, $leadsWeeklyRevenueCap = null, $leadsMonthlyRevenueCap = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateLeadsRevenueCapsdo'
            );
        }

        $resourcePath = '/advertisers/updateLeadsRevenueCaps.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsDailyRevenueCap,
            'leadsDailyRevenueCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsWeeklyRevenueCap,
            'leadsWeeklyRevenueCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsMonthlyRevenueCap,
            'leadsMonthlyRevenueCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateLeadsWeeklyCapdo
     *
     * Update Leads Weekly Cap
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $leadsWeeklyCap leadsWeeklyCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateLeadsWeeklyCapdo($advertiserID, $leadsWeeklyCap = null)
    {
        list($response) = $this->advertisersupdateLeadsWeeklyCapdoWithHttpInfo($advertiserID, $leadsWeeklyCap);
        return $response;
    }

    /**
     * Operation advertisersupdateLeadsWeeklyCapdoWithHttpInfo
     *
     * Update Leads Weekly Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsWeeklyCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateLeadsWeeklyCapdoWithHttpInfo($advertiserID, $leadsWeeklyCap = null)
    {
        $request = $this->advertisersupdateLeadsWeeklyCapdoRequest($advertiserID, $leadsWeeklyCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateLeadsWeeklyCapdoAsync
     *
     * Update Leads Weekly Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsWeeklyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsWeeklyCapdoAsync($advertiserID, $leadsWeeklyCap = null)
    {
        return $this->advertisersupdateLeadsWeeklyCapdoAsyncWithHttpInfo($advertiserID, $leadsWeeklyCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateLeadsWeeklyCapdoAsyncWithHttpInfo
     *
     * Update Leads Weekly Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsWeeklyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsWeeklyCapdoAsyncWithHttpInfo($advertiserID, $leadsWeeklyCap = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateLeadsWeeklyCapdoRequest($advertiserID, $leadsWeeklyCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateLeadsWeeklyCapdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsWeeklyCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateLeadsWeeklyCapdoRequest($advertiserID, $leadsWeeklyCap = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateLeadsWeeklyCapdo'
            );
        }

        $resourcePath = '/advertisers/updateLeadsWeeklyCap.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsWeeklyCap,
            'leadsWeeklyCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdateLeadsWeeklyRevenueCapdo
     *
     * Update Leads Weekly Revenue Cap
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $leadsWeeklyRevenueCap leadsWeeklyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdateLeadsWeeklyRevenueCapdo($advertiserID, $leadsWeeklyRevenueCap = null)
    {
        list($response) = $this->advertisersupdateLeadsWeeklyRevenueCapdoWithHttpInfo($advertiserID, $leadsWeeklyRevenueCap);
        return $response;
    }

    /**
     * Operation advertisersupdateLeadsWeeklyRevenueCapdoWithHttpInfo
     *
     * Update Leads Weekly Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsWeeklyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdateLeadsWeeklyRevenueCapdoWithHttpInfo($advertiserID, $leadsWeeklyRevenueCap = null)
    {
        $request = $this->advertisersupdateLeadsWeeklyRevenueCapdoRequest($advertiserID, $leadsWeeklyRevenueCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdateLeadsWeeklyRevenueCapdoAsync
     *
     * Update Leads Weekly Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsWeeklyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsWeeklyRevenueCapdoAsync($advertiserID, $leadsWeeklyRevenueCap = null)
    {
        return $this->advertisersupdateLeadsWeeklyRevenueCapdoAsyncWithHttpInfo($advertiserID, $leadsWeeklyRevenueCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdateLeadsWeeklyRevenueCapdoAsyncWithHttpInfo
     *
     * Update Leads Weekly Revenue Cap
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsWeeklyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdateLeadsWeeklyRevenueCapdoAsyncWithHttpInfo($advertiserID, $leadsWeeklyRevenueCap = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdateLeadsWeeklyRevenueCapdoRequest($advertiserID, $leadsWeeklyRevenueCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdateLeadsWeeklyRevenueCapdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $leadsWeeklyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdateLeadsWeeklyRevenueCapdoRequest($advertiserID, $leadsWeeklyRevenueCap = null)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersupdateLeadsWeeklyRevenueCapdo'
            );
        }

        $resourcePath = '/advertisers/updateLeadsWeeklyRevenueCap.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $advertiserID,
            'advertiserID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leadsWeeklyRevenueCap,
            'leadsWeeklyRevenueCap', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersupdatePortalSettingsdo
     *
     * Update Portal Settings
     *
     * @param  string $portalAccess portalAccess (optional)
     * @param  string $twoWayAuth twoWayAuth (optional)
     * @param  string $manageUsers manageUsers (optional)
     * @param  string $manageOffers manageOffers (optional)
     * @param  string $updateBillingInfo updateBillingInfo (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function advertisersupdatePortalSettingsdo($portalAccess = null, $twoWayAuth = null, $manageUsers = null, $manageOffers = null, $updateBillingInfo = null)
    {
        list($response) = $this->advertisersupdatePortalSettingsdoWithHttpInfo($portalAccess, $twoWayAuth, $manageUsers, $manageOffers, $updateBillingInfo);
        return $response;
    }

    /**
     * Operation advertisersupdatePortalSettingsdoWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  string $portalAccess (optional)
     * @param  string $twoWayAuth (optional)
     * @param  string $manageUsers (optional)
     * @param  string $manageOffers (optional)
     * @param  string $updateBillingInfo (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersupdatePortalSettingsdoWithHttpInfo($portalAccess = null, $twoWayAuth = null, $manageUsers = null, $manageOffers = null, $updateBillingInfo = null)
    {
        $request = $this->advertisersupdatePortalSettingsdoRequest($portalAccess, $twoWayAuth, $manageUsers, $manageOffers, $updateBillingInfo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersupdatePortalSettingsdoAsync
     *
     * Update Portal Settings
     *
     * @param  string $portalAccess (optional)
     * @param  string $twoWayAuth (optional)
     * @param  string $manageUsers (optional)
     * @param  string $manageOffers (optional)
     * @param  string $updateBillingInfo (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdatePortalSettingsdoAsync($portalAccess = null, $twoWayAuth = null, $manageUsers = null, $manageOffers = null, $updateBillingInfo = null)
    {
        return $this->advertisersupdatePortalSettingsdoAsyncWithHttpInfo($portalAccess, $twoWayAuth, $manageUsers, $manageOffers, $updateBillingInfo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersupdatePortalSettingsdoAsyncWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  string $portalAccess (optional)
     * @param  string $twoWayAuth (optional)
     * @param  string $manageUsers (optional)
     * @param  string $manageOffers (optional)
     * @param  string $updateBillingInfo (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersupdatePortalSettingsdoAsyncWithHttpInfo($portalAccess = null, $twoWayAuth = null, $manageUsers = null, $manageOffers = null, $updateBillingInfo = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->advertisersupdatePortalSettingsdoRequest($portalAccess, $twoWayAuth, $manageUsers, $manageOffers, $updateBillingInfo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersupdatePortalSettingsdo'
     *
     * @param  string $portalAccess (optional)
     * @param  string $twoWayAuth (optional)
     * @param  string $manageUsers (optional)
     * @param  string $manageOffers (optional)
     * @param  string $updateBillingInfo (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advertisersupdatePortalSettingsdoRequest($portalAccess = null, $twoWayAuth = null, $manageUsers = null, $manageOffers = null, $updateBillingInfo = null)
    {

        $resourcePath = '/advertisers/updatePortalSettings.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $portalAccess,
            'portal_access', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $twoWayAuth,
            'two_way_auth', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $manageUsers,
            'manage_users', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $manageOffers,
            'manage_offers', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateBillingInfo,
            'update_billing_info', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
