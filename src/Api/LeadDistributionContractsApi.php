<?php
/**
 * LeadDistributionContractsApi
 * PHP version 5
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Leadspedia\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Leadspedia\ApiException;
use Leadspedia\Configuration;
use Leadspedia\HeaderSelector;
use Leadspedia\ObjectSerializer;

/**
 * LeadDistributionContractsApi Class Doc Comment
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LeadDistributionContractsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client         = $client ?: new Client();
        $this->config         = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex      = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index): void
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation leadDistributionContractsaddFilterdo
     *
     * Add Filter
     *
     * @param  int $contractID contractID (required)
     * @param  int $fieldID fieldID (required)
     * @param  string $operator operator (required)
     * @param  string $value value (optional)
     * @param  \DateTime $date date (optional)
     * @param  float $miles miles (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsaddFilterdo($contractID, $fieldID, $operator, $value = null, $date = null, $miles = null): void
    {
        $this->leadDistributionContractsaddFilterdoWithHttpInfo($contractID, $fieldID, $operator, $value, $date, $miles);
    }

    /**
     * Operation leadDistributionContractsaddFilterdoWithHttpInfo
     *
     * Add Filter
     *
     * @param  int $contractID (required)
     * @param  int $fieldID (required)
     * @param  string $operator (required)
     * @param  string $value (optional)
     * @param  \DateTime $date (optional)
     * @param  float $miles (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsaddFilterdoWithHttpInfo($contractID, $fieldID, $operator, $value = null, $date = null, $miles = null)
    {
        $request = $this->leadDistributionContractsaddFilterdoRequest($contractID, $fieldID, $operator, $value, $date, $miles);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsaddFilterdoAsync
     *
     * Add Filter
     *
     * @param  int $contractID (required)
     * @param  int $fieldID (required)
     * @param  string $operator (required)
     * @param  string $value (optional)
     * @param  \DateTime $date (optional)
     * @param  float $miles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsaddFilterdoAsync($contractID, $fieldID, $operator, $value = null, $date = null, $miles = null)
    {
        return $this->leadDistributionContractsaddFilterdoAsyncWithHttpInfo($contractID, $fieldID, $operator, $value, $date, $miles)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsaddFilterdoAsyncWithHttpInfo
     *
     * Add Filter
     *
     * @param  int $contractID (required)
     * @param  int $fieldID (required)
     * @param  string $operator (required)
     * @param  string $value (optional)
     * @param  \DateTime $date (optional)
     * @param  float $miles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsaddFilterdoAsyncWithHttpInfo($contractID, $fieldID, $operator, $value = null, $date = null, $miles = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsaddFilterdoRequest($contractID, $fieldID, $operator, $value, $date, $miles);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsaddFilterdo'
     *
     * @param  int $contractID (required)
     * @param  int $fieldID (required)
     * @param  string $operator (required)
     * @param  string $value (optional)
     * @param  \DateTime $date (optional)
     * @param  float $miles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsaddFilterdoRequest($contractID, $fieldID, $operator, $value = null, $date = null, $miles = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsaddFilterdo'
            );
        }
        // verify the required parameter 'fieldID' is set
        if ($fieldID === null || (is_array($fieldID) && count($fieldID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldID when calling leadDistributionContractsaddFilterdo'
            );
        }
        // verify the required parameter 'operator' is set
        if ($operator === null || (is_array($operator) && count($operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator when calling leadDistributionContractsaddFilterdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/addFilter.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($fieldID !== null) {
            $queryParams['fieldID'] = ObjectSerializer::toQueryValue($fieldID);
        }
        // query params
        if ($operator !== null) {
            $queryParams['operator'] = ObjectSerializer::toQueryValue($operator);
        }
        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }
        // query params
        if ($miles !== null) {
            $queryParams['miles'] = ObjectSerializer::toQueryValue($miles);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsaddToOfferdo
     *
     * Add To Offer
     *
     * @param  int $contractID contractID (required)
     * @param  int $offerID offerID (required)
     * @param  int $priority priority (optional, default to 1)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsaddToOfferdo($contractID, $offerID, $priority = 1): void
    {
        $this->leadDistributionContractsaddToOfferdoWithHttpInfo($contractID, $offerID, $priority);
    }

    /**
     * Operation leadDistributionContractsaddToOfferdoWithHttpInfo
     *
     * Add To Offer
     *
     * @param  int $contractID (required)
     * @param  int $offerID (required)
     * @param  int $priority (optional, default to 1)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsaddToOfferdoWithHttpInfo($contractID, $offerID, $priority = 1)
    {
        $request = $this->leadDistributionContractsaddToOfferdoRequest($contractID, $offerID, $priority);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsaddToOfferdoAsync
     *
     * Add To Offer
     *
     * @param  int $contractID (required)
     * @param  int $offerID (required)
     * @param  int $priority (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsaddToOfferdoAsync($contractID, $offerID, $priority = 1)
    {
        return $this->leadDistributionContractsaddToOfferdoAsyncWithHttpInfo($contractID, $offerID, $priority)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsaddToOfferdoAsyncWithHttpInfo
     *
     * Add To Offer
     *
     * @param  int $contractID (required)
     * @param  int $offerID (required)
     * @param  int $priority (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsaddToOfferdoAsyncWithHttpInfo($contractID, $offerID, $priority = 1)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsaddToOfferdoRequest($contractID, $offerID, $priority);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsaddToOfferdo'
     *
     * @param  int $contractID (required)
     * @param  int $offerID (required)
     * @param  int $priority (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsaddToOfferdoRequest($contractID, $offerID, $priority = 1)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsaddToOfferdo'
            );
        }
        // verify the required parameter 'offerID' is set
        if ($offerID === null || (is_array($offerID) && count($offerID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offerID when calling leadDistributionContractsaddToOfferdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/addToOffer.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($offerID !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offerID);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsassignEmailDeliveryMethoddo
     *
     * Assign Email Delivery Method
     *
     * @param  int $contractID contractID (required)
     * @param  int $deliveryMethodID deliveryMethodID (required)
     * @param  string $emailTo emailTo (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsassignEmailDeliveryMethoddo($contractID, $deliveryMethodID, $emailTo): void
    {
        $this->leadDistributionContractsassignEmailDeliveryMethoddoWithHttpInfo($contractID, $deliveryMethodID, $emailTo);
    }

    /**
     * Operation leadDistributionContractsassignEmailDeliveryMethoddoWithHttpInfo
     *
     * Assign Email Delivery Method
     *
     * @param  int $contractID (required)
     * @param  int $deliveryMethodID (required)
     * @param  string $emailTo (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsassignEmailDeliveryMethoddoWithHttpInfo($contractID, $deliveryMethodID, $emailTo)
    {
        $request = $this->leadDistributionContractsassignEmailDeliveryMethoddoRequest($contractID, $deliveryMethodID, $emailTo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsassignEmailDeliveryMethoddoAsync
     *
     * Assign Email Delivery Method
     *
     * @param  int $contractID (required)
     * @param  int $deliveryMethodID (required)
     * @param  string $emailTo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsassignEmailDeliveryMethoddoAsync($contractID, $deliveryMethodID, $emailTo)
    {
        return $this->leadDistributionContractsassignEmailDeliveryMethoddoAsyncWithHttpInfo($contractID, $deliveryMethodID, $emailTo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsassignEmailDeliveryMethoddoAsyncWithHttpInfo
     *
     * Assign Email Delivery Method
     *
     * @param  int $contractID (required)
     * @param  int $deliveryMethodID (required)
     * @param  string $emailTo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsassignEmailDeliveryMethoddoAsyncWithHttpInfo($contractID, $deliveryMethodID, $emailTo)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsassignEmailDeliveryMethoddoRequest($contractID, $deliveryMethodID, $emailTo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsassignEmailDeliveryMethoddo'
     *
     * @param  int $contractID (required)
     * @param  int $deliveryMethodID (required)
     * @param  string $emailTo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsassignEmailDeliveryMethoddoRequest($contractID, $deliveryMethodID, $emailTo)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsassignEmailDeliveryMethoddo'
            );
        }
        // verify the required parameter 'deliveryMethodID' is set
        if ($deliveryMethodID === null || (is_array($deliveryMethodID) && count($deliveryMethodID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryMethodID when calling leadDistributionContractsassignEmailDeliveryMethoddo'
            );
        }
        // verify the required parameter 'emailTo' is set
        if ($emailTo === null || (is_array($emailTo) && count($emailTo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailTo when calling leadDistributionContractsassignEmailDeliveryMethoddo'
            );
        }

        $resourcePath = '/leadDistributionContracts/assignEmailDeliveryMethod.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($deliveryMethodID !== null) {
            $queryParams['deliveryMethodID'] = ObjectSerializer::toQueryValue($deliveryMethodID);
        }
        // query params
        if ($emailTo !== null) {
            $queryParams['email_to'] = ObjectSerializer::toQueryValue($emailTo);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsassignSMSDeliveryMethoddo
     *
     * Assign SMS Delivery Method
     *
     * @param  int $contractID contractID (required)
     * @param  int $deliveryMethodID deliveryMethodID (required)
     * @param  float $smsTo smsTo (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsassignSMSDeliveryMethoddo($contractID, $deliveryMethodID, $smsTo): void
    {
        $this->leadDistributionContractsassignSMSDeliveryMethoddoWithHttpInfo($contractID, $deliveryMethodID, $smsTo);
    }

    /**
     * Operation leadDistributionContractsassignSMSDeliveryMethoddoWithHttpInfo
     *
     * Assign SMS Delivery Method
     *
     * @param  int $contractID (required)
     * @param  int $deliveryMethodID (required)
     * @param  float $smsTo (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsassignSMSDeliveryMethoddoWithHttpInfo($contractID, $deliveryMethodID, $smsTo)
    {
        $request = $this->leadDistributionContractsassignSMSDeliveryMethoddoRequest($contractID, $deliveryMethodID, $smsTo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsassignSMSDeliveryMethoddoAsync
     *
     * Assign SMS Delivery Method
     *
     * @param  int $contractID (required)
     * @param  int $deliveryMethodID (required)
     * @param  float $smsTo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsassignSMSDeliveryMethoddoAsync($contractID, $deliveryMethodID, $smsTo)
    {
        return $this->leadDistributionContractsassignSMSDeliveryMethoddoAsyncWithHttpInfo($contractID, $deliveryMethodID, $smsTo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsassignSMSDeliveryMethoddoAsyncWithHttpInfo
     *
     * Assign SMS Delivery Method
     *
     * @param  int $contractID (required)
     * @param  int $deliveryMethodID (required)
     * @param  float $smsTo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsassignSMSDeliveryMethoddoAsyncWithHttpInfo($contractID, $deliveryMethodID, $smsTo)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsassignSMSDeliveryMethoddoRequest($contractID, $deliveryMethodID, $smsTo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsassignSMSDeliveryMethoddo'
     *
     * @param  int $contractID (required)
     * @param  int $deliveryMethodID (required)
     * @param  float $smsTo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsassignSMSDeliveryMethoddoRequest($contractID, $deliveryMethodID, $smsTo)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsassignSMSDeliveryMethoddo'
            );
        }
        // verify the required parameter 'deliveryMethodID' is set
        if ($deliveryMethodID === null || (is_array($deliveryMethodID) && count($deliveryMethodID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryMethodID when calling leadDistributionContractsassignSMSDeliveryMethoddo'
            );
        }
        // verify the required parameter 'smsTo' is set
        if ($smsTo === null || (is_array($smsTo) && count($smsTo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smsTo when calling leadDistributionContractsassignSMSDeliveryMethoddo'
            );
        }

        $resourcePath = '/leadDistributionContracts/assignSMSDeliveryMethod.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($deliveryMethodID !== null) {
            $queryParams['deliveryMethodID'] = ObjectSerializer::toQueryValue($deliveryMethodID);
        }
        // query params
        if ($smsTo !== null) {
            $queryParams['sms_to'] = ObjectSerializer::toQueryValue($smsTo);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractschangeModedo
     *
     * Change Mode
     *
     * @param  int $contractID contractID (required)
     * @param  string $mode mode (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractschangeModedo($contractID, $mode): void
    {
        $this->leadDistributionContractschangeModedoWithHttpInfo($contractID, $mode);
    }

    /**
     * Operation leadDistributionContractschangeModedoWithHttpInfo
     *
     * Change Mode
     *
     * @param  int $contractID (required)
     * @param  string $mode (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractschangeModedoWithHttpInfo($contractID, $mode)
    {
        $request = $this->leadDistributionContractschangeModedoRequest($contractID, $mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractschangeModedoAsync
     *
     * Change Mode
     *
     * @param  int $contractID (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractschangeModedoAsync($contractID, $mode)
    {
        return $this->leadDistributionContractschangeModedoAsyncWithHttpInfo($contractID, $mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractschangeModedoAsyncWithHttpInfo
     *
     * Change Mode
     *
     * @param  int $contractID (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractschangeModedoAsyncWithHttpInfo($contractID, $mode)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractschangeModedoRequest($contractID, $mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractschangeModedo'
     *
     * @param  int $contractID (required)
     * @param  string $mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractschangeModedoRequest($contractID, $mode)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractschangeModedo'
            );
        }
        // verify the required parameter 'mode' is set
        if ($mode === null || (is_array($mode) && count($mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mode when calling leadDistributionContractschangeModedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/changeMode.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractschangeStatusdo
     *
     * Change Status
     *
     * @param  int $contractID contractID (required)
     * @param  string $status status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractschangeStatusdo($contractID, $status): void
    {
        $this->leadDistributionContractschangeStatusdoWithHttpInfo($contractID, $status);
    }

    /**
     * Operation leadDistributionContractschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contractID (required)
     * @param  string $status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractschangeStatusdoWithHttpInfo($contractID, $status)
    {
        $request = $this->leadDistributionContractschangeStatusdoRequest($contractID, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $contractID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractschangeStatusdoAsync($contractID, $status)
    {
        return $this->leadDistributionContractschangeStatusdoAsyncWithHttpInfo($contractID, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contractID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractschangeStatusdoAsyncWithHttpInfo($contractID, $status)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractschangeStatusdoRequest($contractID, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractschangeStatusdo'
     *
     * @param  int $contractID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractschangeStatusdoRequest($contractID, $status)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling leadDistributionContractschangeStatusdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/changeStatus.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractscreateScheduledo
     *
     * Create Schedule
     *
     * @param  int $contractID contractID (required)
     * @param  int $cap cap (required)
     * @param  float $revenueCap revenueCap (required)
     * @param  float $price price (required)
     * @param  string $startTime startTime (required)
     * @param  string $endTime endTime (required)
     * @param  string $type type (required)
     * @param  string $monday monday (optional)
     * @param  string $tuesday tuesday (optional)
     * @param  string $wednesday wednesday (optional)
     * @param  string $thursday thursday (optional)
     * @param  string $friday friday (optional)
     * @param  string $saturday saturday (optional)
     * @param  string $sunday sunday (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractscreateScheduledo($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null): void
    {
        $this->leadDistributionContractscreateScheduledoWithHttpInfo($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday);
    }

    /**
     * Operation leadDistributionContractscreateScheduledoWithHttpInfo
     *
     * Create Schedule
     *
     * @param  int $contractID (required)
     * @param  int $cap (required)
     * @param  float $revenueCap (required)
     * @param  float $price (required)
     * @param  string $startTime (required)
     * @param  string $endTime (required)
     * @param  string $type (required)
     * @param  string $monday (optional)
     * @param  string $tuesday (optional)
     * @param  string $wednesday (optional)
     * @param  string $thursday (optional)
     * @param  string $friday (optional)
     * @param  string $saturday (optional)
     * @param  string $sunday (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractscreateScheduledoWithHttpInfo($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        $request = $this->leadDistributionContractscreateScheduledoRequest($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractscreateScheduledoAsync
     *
     * Create Schedule
     *
     * @param  int $contractID (required)
     * @param  int $cap (required)
     * @param  float $revenueCap (required)
     * @param  float $price (required)
     * @param  string $startTime (required)
     * @param  string $endTime (required)
     * @param  string $type (required)
     * @param  string $monday (optional)
     * @param  string $tuesday (optional)
     * @param  string $wednesday (optional)
     * @param  string $thursday (optional)
     * @param  string $friday (optional)
     * @param  string $saturday (optional)
     * @param  string $sunday (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractscreateScheduledoAsync($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        return $this->leadDistributionContractscreateScheduledoAsyncWithHttpInfo($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractscreateScheduledoAsyncWithHttpInfo
     *
     * Create Schedule
     *
     * @param  int $contractID (required)
     * @param  int $cap (required)
     * @param  float $revenueCap (required)
     * @param  float $price (required)
     * @param  string $startTime (required)
     * @param  string $endTime (required)
     * @param  string $type (required)
     * @param  string $monday (optional)
     * @param  string $tuesday (optional)
     * @param  string $wednesday (optional)
     * @param  string $thursday (optional)
     * @param  string $friday (optional)
     * @param  string $saturday (optional)
     * @param  string $sunday (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractscreateScheduledoAsyncWithHttpInfo($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractscreateScheduledoRequest($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractscreateScheduledo'
     *
     * @param  int $contractID (required)
     * @param  int $cap (required)
     * @param  float $revenueCap (required)
     * @param  float $price (required)
     * @param  string $startTime (required)
     * @param  string $endTime (required)
     * @param  string $type (required)
     * @param  string $monday (optional)
     * @param  string $tuesday (optional)
     * @param  string $wednesday (optional)
     * @param  string $thursday (optional)
     * @param  string $friday (optional)
     * @param  string $saturday (optional)
     * @param  string $sunday (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractscreateScheduledoRequest($contractID, $cap, $revenueCap, $price, $startTime, $endTime, $type, $monday = null, $tuesday = null, $wednesday = null, $thursday = null, $friday = null, $saturday = null, $sunday = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'cap' is set
        if ($cap === null || (is_array($cap) && count($cap) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cap when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'revenueCap' is set
        if ($revenueCap === null || (is_array($revenueCap) && count($revenueCap) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revenueCap when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'startTime' is set
        if ($startTime === null || (is_array($startTime) && count($startTime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startTime when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'endTime' is set
        if ($endTime === null || (is_array($endTime) && count($endTime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endTime when calling leadDistributionContractscreateScheduledo'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling leadDistributionContractscreateScheduledo'
            );
        }

        $resourcePath = '/leadDistributionContracts/createSchedule.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($cap !== null) {
            $queryParams['cap'] = ObjectSerializer::toQueryValue($cap);
        }
        // query params
        if ($revenueCap !== null) {
            $queryParams['revenueCap'] = ObjectSerializer::toQueryValue($revenueCap);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if ($startTime !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($startTime);
        }
        // query params
        if ($endTime !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($endTime);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($monday !== null) {
            $queryParams['Monday'] = ObjectSerializer::toQueryValue($monday);
        }
        // query params
        if ($tuesday !== null) {
            $queryParams['Tuesday'] = ObjectSerializer::toQueryValue($tuesday);
        }
        // query params
        if ($wednesday !== null) {
            $queryParams['Wednesday'] = ObjectSerializer::toQueryValue($wednesday);
        }
        // query params
        if ($thursday !== null) {
            $queryParams['Thursday'] = ObjectSerializer::toQueryValue($thursday);
        }
        // query params
        if ($friday !== null) {
            $queryParams['Friday'] = ObjectSerializer::toQueryValue($friday);
        }
        // query params
        if ($saturday !== null) {
            $queryParams['Saturday'] = ObjectSerializer::toQueryValue($saturday);
        }
        // query params
        if ($sunday !== null) {
            $queryParams['Sunday'] = ObjectSerializer::toQueryValue($sunday);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractscreatedo
     *
     * Create
     *
     * @param  int $verticalID verticalID (required)
     * @param  int $advertiserID advertiserID (required)
     * @param  string $revenueModel revenueModel (required)
     * @param  string $contractName contractName (required)
     * @param  float $defaultPrice defaultPrice (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractscreatedo($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice): void
    {
        $this->leadDistributionContractscreatedoWithHttpInfo($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice);
    }

    /**
     * Operation leadDistributionContractscreatedoWithHttpInfo
     *
     * Create
     *
     * @param  int $verticalID (required)
     * @param  int $advertiserID (required)
     * @param  string $revenueModel (required)
     * @param  string $contractName (required)
     * @param  float $defaultPrice (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractscreatedoWithHttpInfo($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice)
    {
        $request = $this->leadDistributionContractscreatedoRequest($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractscreatedoAsync
     *
     * Create
     *
     * @param  int $verticalID (required)
     * @param  int $advertiserID (required)
     * @param  string $revenueModel (required)
     * @param  string $contractName (required)
     * @param  float $defaultPrice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractscreatedoAsync($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice)
    {
        return $this->leadDistributionContractscreatedoAsyncWithHttpInfo($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractscreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  int $verticalID (required)
     * @param  int $advertiserID (required)
     * @param  string $revenueModel (required)
     * @param  string $contractName (required)
     * @param  float $defaultPrice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractscreatedoAsyncWithHttpInfo($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractscreatedoRequest($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractscreatedo'
     *
     * @param  int $verticalID (required)
     * @param  int $advertiserID (required)
     * @param  string $revenueModel (required)
     * @param  string $contractName (required)
     * @param  float $defaultPrice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractscreatedoRequest($verticalID, $advertiserID, $revenueModel, $contractName, $defaultPrice)
    {
        // verify the required parameter 'verticalID' is set
        if ($verticalID === null || (is_array($verticalID) && count($verticalID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verticalID when calling leadDistributionContractscreatedo'
            );
        }
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling leadDistributionContractscreatedo'
            );
        }
        // verify the required parameter 'revenueModel' is set
        if ($revenueModel === null || (is_array($revenueModel) && count($revenueModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revenueModel when calling leadDistributionContractscreatedo'
            );
        }
        // verify the required parameter 'contractName' is set
        if ($contractName === null || (is_array($contractName) && count($contractName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractName when calling leadDistributionContractscreatedo'
            );
        }
        // verify the required parameter 'defaultPrice' is set
        if ($defaultPrice === null || (is_array($defaultPrice) && count($defaultPrice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $defaultPrice when calling leadDistributionContractscreatedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/create.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($revenueModel !== null) {
            $queryParams['revenueModel'] = ObjectSerializer::toQueryValue($revenueModel);
        }
        // query params
        if ($contractName !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contractName);
        }
        // query params
        if ($defaultPrice !== null) {
            $queryParams['defaultPrice'] = ObjectSerializer::toQueryValue($defaultPrice);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteAllDeliveryMethodsdo
     *
     * Delete All Delivery Methods
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsdeleteAllDeliveryMethodsdo($contractID): void
    {
        $this->leadDistributionContractsdeleteAllDeliveryMethodsdoWithHttpInfo($contractID);
    }

    /**
     * Operation leadDistributionContractsdeleteAllDeliveryMethodsdoWithHttpInfo
     *
     * Delete All Delivery Methods
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteAllDeliveryMethodsdoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsdeleteAllDeliveryMethodsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteAllDeliveryMethodsdoAsync
     *
     * Delete All Delivery Methods
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteAllDeliveryMethodsdoAsync($contractID)
    {
        return $this->leadDistributionContractsdeleteAllDeliveryMethodsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteAllDeliveryMethodsdoAsyncWithHttpInfo
     *
     * Delete All Delivery Methods
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteAllDeliveryMethodsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsdeleteAllDeliveryMethodsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteAllDeliveryMethodsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteAllDeliveryMethodsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsdeleteAllDeliveryMethodsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteAllDeliveryMethods.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteAllSchedulesdo
     *
     * Delete All Schedules
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsdeleteAllSchedulesdo($contractID): void
    {
        $this->leadDistributionContractsdeleteAllSchedulesdoWithHttpInfo($contractID);
    }

    /**
     * Operation leadDistributionContractsdeleteAllSchedulesdoWithHttpInfo
     *
     * Delete All Schedules
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteAllSchedulesdoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsdeleteAllSchedulesdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteAllSchedulesdoAsync
     *
     * Delete All Schedules
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteAllSchedulesdoAsync($contractID)
    {
        return $this->leadDistributionContractsdeleteAllSchedulesdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteAllSchedulesdoAsyncWithHttpInfo
     *
     * Delete All Schedules
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteAllSchedulesdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsdeleteAllSchedulesdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteAllSchedulesdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteAllSchedulesdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsdeleteAllSchedulesdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteAllSchedules.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteDeliveryMethoddo
     *
     * Delete Delivery Method
     *
     * @param  int $deliveryMethodsContractID deliveryMethodsContractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsdeleteDeliveryMethoddo($deliveryMethodsContractID): void
    {
        $this->leadDistributionContractsdeleteDeliveryMethoddoWithHttpInfo($deliveryMethodsContractID);
    }

    /**
     * Operation leadDistributionContractsdeleteDeliveryMethoddoWithHttpInfo
     *
     * Delete Delivery Method
     *
     * @param  int $deliveryMethodsContractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteDeliveryMethoddoWithHttpInfo($deliveryMethodsContractID)
    {
        $request = $this->leadDistributionContractsdeleteDeliveryMethoddoRequest($deliveryMethodsContractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteDeliveryMethoddoAsync
     *
     * Delete Delivery Method
     *
     * @param  int $deliveryMethodsContractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteDeliveryMethoddoAsync($deliveryMethodsContractID)
    {
        return $this->leadDistributionContractsdeleteDeliveryMethoddoAsyncWithHttpInfo($deliveryMethodsContractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteDeliveryMethoddoAsyncWithHttpInfo
     *
     * Delete Delivery Method
     *
     * @param  int $deliveryMethodsContractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteDeliveryMethoddoAsyncWithHttpInfo($deliveryMethodsContractID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsdeleteDeliveryMethoddoRequest($deliveryMethodsContractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteDeliveryMethoddo'
     *
     * @param  int $deliveryMethodsContractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteDeliveryMethoddoRequest($deliveryMethodsContractID)
    {
        // verify the required parameter 'deliveryMethodsContractID' is set
        if ($deliveryMethodsContractID === null || (is_array($deliveryMethodsContractID) && count($deliveryMethodsContractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryMethodsContractID when calling leadDistributionContractsdeleteDeliveryMethoddo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteDeliveryMethod.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($deliveryMethodsContractID !== null) {
            $queryParams['deliveryMethodsContractID'] = ObjectSerializer::toQueryValue($deliveryMethodsContractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteFilterdo
     *
     * Delete Filter
     *
     * @param  int $filterID filterID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsdeleteFilterdo($filterID): void
    {
        $this->leadDistributionContractsdeleteFilterdoWithHttpInfo($filterID);
    }

    /**
     * Operation leadDistributionContractsdeleteFilterdoWithHttpInfo
     *
     * Delete Filter
     *
     * @param  int $filterID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteFilterdoWithHttpInfo($filterID)
    {
        $request = $this->leadDistributionContractsdeleteFilterdoRequest($filterID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteFilterdoAsync
     *
     * Delete Filter
     *
     * @param  int $filterID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteFilterdoAsync($filterID)
    {
        return $this->leadDistributionContractsdeleteFilterdoAsyncWithHttpInfo($filterID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteFilterdoAsyncWithHttpInfo
     *
     * Delete Filter
     *
     * @param  int $filterID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteFilterdoAsyncWithHttpInfo($filterID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsdeleteFilterdoRequest($filterID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteFilterdo'
     *
     * @param  int $filterID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteFilterdoRequest($filterID)
    {
        // verify the required parameter 'filterID' is set
        if ($filterID === null || (is_array($filterID) && count($filterID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filterID when calling leadDistributionContractsdeleteFilterdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteFilter.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($filterID !== null) {
            $queryParams['filterID'] = ObjectSerializer::toQueryValue($filterID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledPausedo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduledPauseID scheduledPauseID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsdeleteScheduledPausedo($scheduledPauseID): void
    {
        $this->leadDistributionContractsdeleteScheduledPausedoWithHttpInfo($scheduledPauseID);
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledPausedoWithHttpInfo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduledPauseID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteScheduledPausedoWithHttpInfo($scheduledPauseID)
    {
        $request = $this->leadDistributionContractsdeleteScheduledPausedoRequest($scheduledPauseID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledPausedoAsync
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduledPauseID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteScheduledPausedoAsync($scheduledPauseID)
    {
        return $this->leadDistributionContractsdeleteScheduledPausedoAsyncWithHttpInfo($scheduledPauseID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledPausedoAsyncWithHttpInfo
     *
     * Delete Scheduled Pause
     *
     * @param  int $scheduledPauseID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteScheduledPausedoAsyncWithHttpInfo($scheduledPauseID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsdeleteScheduledPausedoRequest($scheduledPauseID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteScheduledPausedo'
     *
     * @param  int $scheduledPauseID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteScheduledPausedoRequest($scheduledPauseID)
    {
        // verify the required parameter 'scheduledPauseID' is set
        if ($scheduledPauseID === null || (is_array($scheduledPauseID) && count($scheduledPauseID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scheduledPauseID when calling leadDistributionContractsdeleteScheduledPausedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteScheduledPause.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($scheduledPauseID !== null) {
            $queryParams['scheduledPauseID'] = ObjectSerializer::toQueryValue($scheduledPauseID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledo
     *
     * Delete Schedule
     *
     * @param  int $deliveryScheduleID deliveryScheduleID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsdeleteScheduledo($deliveryScheduleID): void
    {
        $this->leadDistributionContractsdeleteScheduledoWithHttpInfo($deliveryScheduleID);
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledoWithHttpInfo
     *
     * Delete Schedule
     *
     * @param  int $deliveryScheduleID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeleteScheduledoWithHttpInfo($deliveryScheduleID)
    {
        $request = $this->leadDistributionContractsdeleteScheduledoRequest($deliveryScheduleID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledoAsync
     *
     * Delete Schedule
     *
     * @param  int $deliveryScheduleID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteScheduledoAsync($deliveryScheduleID)
    {
        return $this->leadDistributionContractsdeleteScheduledoAsyncWithHttpInfo($deliveryScheduleID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeleteScheduledoAsyncWithHttpInfo
     *
     * Delete Schedule
     *
     * @param  int $deliveryScheduleID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeleteScheduledoAsyncWithHttpInfo($deliveryScheduleID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsdeleteScheduledoRequest($deliveryScheduleID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeleteScheduledo'
     *
     * @param  int $deliveryScheduleID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeleteScheduledoRequest($deliveryScheduleID)
    {
        // verify the required parameter 'deliveryScheduleID' is set
        if ($deliveryScheduleID === null || (is_array($deliveryScheduleID) && count($deliveryScheduleID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryScheduleID when calling leadDistributionContractsdeleteScheduledo'
            );
        }

        $resourcePath = '/leadDistributionContracts/deleteSchedule.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($deliveryScheduleID !== null) {
            $queryParams['deliveryScheduleID'] = ObjectSerializer::toQueryValue($deliveryScheduleID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsdeletedo
     *
     * Delete
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsdeletedo($contractID): void
    {
        $this->leadDistributionContractsdeletedoWithHttpInfo($contractID);
    }

    /**
     * Operation leadDistributionContractsdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsdeletedoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsdeletedoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsdeletedoAsync
     *
     * Delete
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeletedoAsync($contractID)
    {
        return $this->leadDistributionContractsdeletedoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsdeletedoAsyncWithHttpInfo($contractID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsdeletedoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsdeletedo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsdeletedoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsdeletedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/delete.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsenableCreditdo
     *
     * Enable Credit
     *
     * @param  int $contractID contractID (required)
     * @param  string $buyerLevel buyerLevel (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsenableCreditdo($contractID, $buyerLevel): void
    {
        $this->leadDistributionContractsenableCreditdoWithHttpInfo($contractID, $buyerLevel);
    }

    /**
     * Operation leadDistributionContractsenableCreditdoWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $contractID (required)
     * @param  string $buyerLevel (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsenableCreditdoWithHttpInfo($contractID, $buyerLevel)
    {
        $request = $this->leadDistributionContractsenableCreditdoRequest($contractID, $buyerLevel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsenableCreditdoAsync
     *
     * Enable Credit
     *
     * @param  int $contractID (required)
     * @param  string $buyerLevel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsenableCreditdoAsync($contractID, $buyerLevel)
    {
        return $this->leadDistributionContractsenableCreditdoAsyncWithHttpInfo($contractID, $buyerLevel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsenableCreditdoAsyncWithHttpInfo
     *
     * Enable Credit
     *
     * @param  int $contractID (required)
     * @param  string $buyerLevel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsenableCreditdoAsyncWithHttpInfo($contractID, $buyerLevel)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsenableCreditdoRequest($contractID, $buyerLevel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsenableCreditdo'
     *
     * @param  int $contractID (required)
     * @param  string $buyerLevel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsenableCreditdoRequest($contractID, $buyerLevel)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsenableCreditdo'
            );
        }
        // verify the required parameter 'buyerLevel' is set
        if ($buyerLevel === null || (is_array($buyerLevel) && count($buyerLevel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buyerLevel when calling leadDistributionContractsenableCreditdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/enableCredit.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($buyerLevel !== null) {
            $queryParams['buyerLevel'] = ObjectSerializer::toQueryValue($buyerLevel);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsenableMultipleDeliveryMethodsdo
     *
     * Enable Multiple Delivery Methods
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsenableMultipleDeliveryMethodsdo($contractID): void
    {
        $this->leadDistributionContractsenableMultipleDeliveryMethodsdoWithHttpInfo($contractID);
    }

    /**
     * Operation leadDistributionContractsenableMultipleDeliveryMethodsdoWithHttpInfo
     *
     * Enable Multiple Delivery Methods
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsenableMultipleDeliveryMethodsdoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsenableMultipleDeliveryMethodsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsenableMultipleDeliveryMethodsdoAsync
     *
     * Enable Multiple Delivery Methods
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsenableMultipleDeliveryMethodsdoAsync($contractID)
    {
        return $this->leadDistributionContractsenableMultipleDeliveryMethodsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsenableMultipleDeliveryMethodsdoAsyncWithHttpInfo
     *
     * Enable Multiple Delivery Methods
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsenableMultipleDeliveryMethodsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsenableMultipleDeliveryMethodsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsenableMultipleDeliveryMethodsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsenableMultipleDeliveryMethodsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsenableMultipleDeliveryMethodsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/enableMultipleDeliveryMethods.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetAlldo
     *
     * Get All
     *
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  string $status status (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetAlldo($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadDistributionContractsgetAlldoWithHttpInfo($advertiserID, $contractID, $verticalID, $status, $start, $limit);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  string $status (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetAlldoWithHttpInfo($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        $request = $this->leadDistributionContractsgetAlldoRequest($advertiserID, $contractID, $verticalID, $status, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetAlldoAsync
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  string $status (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetAlldoAsync($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        return $this->leadDistributionContractsgetAlldoAsyncWithHttpInfo($advertiserID, $contractID, $verticalID, $status, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  string $status (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetAlldoAsyncWithHttpInfo($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetAlldoRequest($advertiserID, $contractID, $verticalID, $status, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetAlldo'
     *
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  int $verticalID (optional)
     * @param  string $status (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetAlldoRequest($advertiserID = null, $contractID = null, $verticalID = null, $status = null, $start = 0, $limit = 100)
    {
        $resourcePath = '/leadDistributionContracts/getAll.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($verticalID !== null) {
            $queryParams['verticalID'] = ObjectSerializer::toQueryValue($verticalID);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetBasicInfodo
     *
     * Get Basic Info
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetBasicInfodo($contractID)
    {
        list($response) = $this->leadDistributionContractsgetBasicInfodoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetBasicInfodoWithHttpInfo
     *
     * Get Basic Info
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetBasicInfodoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsgetBasicInfodoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetBasicInfodoAsync
     *
     * Get Basic Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetBasicInfodoAsync($contractID)
    {
        return $this->leadDistributionContractsgetBasicInfodoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetBasicInfodoAsyncWithHttpInfo
     *
     * Get Basic Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetBasicInfodoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetBasicInfodoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetBasicInfodo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetBasicInfodoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsgetBasicInfodo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getBasicInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetDuplicatesSettingsdo
     *
     * Get Duplicates Settings
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetDuplicatesSettingsdo($contractID)
    {
        list($response) = $this->leadDistributionContractsgetDuplicatesSettingsdoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetDuplicatesSettingsdoWithHttpInfo
     *
     * Get Duplicates Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetDuplicatesSettingsdoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsgetDuplicatesSettingsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetDuplicatesSettingsdoAsync
     *
     * Get Duplicates Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetDuplicatesSettingsdoAsync($contractID)
    {
        return $this->leadDistributionContractsgetDuplicatesSettingsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetDuplicatesSettingsdoAsyncWithHttpInfo
     *
     * Get Duplicates Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetDuplicatesSettingsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetDuplicatesSettingsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetDuplicatesSettingsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetDuplicatesSettingsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsgetDuplicatesSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getDuplicatesSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetFiltersdo
     *
     * Get Filters
     *
     * @param  int $contractID contractID (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetFiltersdo($contractID = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadDistributionContractsgetFiltersdoWithHttpInfo($contractID, $start, $limit);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetFiltersdoWithHttpInfo
     *
     * Get Filters
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetFiltersdoWithHttpInfo($contractID = null, $start = 0, $limit = 100)
    {
        $request = $this->leadDistributionContractsgetFiltersdoRequest($contractID, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetFiltersdoAsync
     *
     * Get Filters
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetFiltersdoAsync($contractID = null, $start = 0, $limit = 100)
    {
        return $this->leadDistributionContractsgetFiltersdoAsyncWithHttpInfo($contractID, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetFiltersdoAsyncWithHttpInfo
     *
     * Get Filters
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetFiltersdoAsyncWithHttpInfo($contractID = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetFiltersdoRequest($contractID, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetFiltersdo'
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetFiltersdoRequest($contractID = null, $start = 0, $limit = 100)
    {
        $resourcePath = '/leadDistributionContracts/getFilters.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetLeadsCapInfodo
     *
     * Get Leads Cap Info
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetLeadsCapInfodo($contractID)
    {
        list($response) = $this->leadDistributionContractsgetLeadsCapInfodoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetLeadsCapInfodoWithHttpInfo
     *
     * Get Leads Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetLeadsCapInfodoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsgetLeadsCapInfodoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetLeadsCapInfodoAsync
     *
     * Get Leads Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetLeadsCapInfodoAsync($contractID)
    {
        return $this->leadDistributionContractsgetLeadsCapInfodoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetLeadsCapInfodoAsyncWithHttpInfo
     *
     * Get Leads Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetLeadsCapInfodoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetLeadsCapInfodoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetLeadsCapInfodo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetLeadsCapInfodoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsgetLeadsCapInfodo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getLeadsCapInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetLeadsSettingsdo
     *
     * Get Leads Settings
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetLeadsSettingsdo($contractID)
    {
        list($response) = $this->leadDistributionContractsgetLeadsSettingsdoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetLeadsSettingsdoWithHttpInfo
     *
     * Get Leads Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetLeadsSettingsdoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsgetLeadsSettingsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetLeadsSettingsdoAsync
     *
     * Get Leads Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetLeadsSettingsdoAsync($contractID)
    {
        return $this->leadDistributionContractsgetLeadsSettingsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetLeadsSettingsdoAsyncWithHttpInfo
     *
     * Get Leads Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetLeadsSettingsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetLeadsSettingsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetLeadsSettingsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetLeadsSettingsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsgetLeadsSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getLeadsSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetPortalSettingsdo
     *
     * Get Portal Settings
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetPortalSettingsdo($contractID)
    {
        list($response) = $this->leadDistributionContractsgetPortalSettingsdoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetPortalSettingsdoWithHttpInfo
     *
     * Get Portal Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetPortalSettingsdoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsgetPortalSettingsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetPortalSettingsdoAsync
     *
     * Get Portal Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetPortalSettingsdoAsync($contractID)
    {
        return $this->leadDistributionContractsgetPortalSettingsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetPortalSettingsdoAsyncWithHttpInfo
     *
     * Get Portal Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetPortalSettingsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetPortalSettingsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetPortalSettingsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetPortalSettingsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsgetPortalSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getPortalSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetReturnsSettingsdo
     *
     * Get Returns Settings
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetReturnsSettingsdo($contractID)
    {
        list($response) = $this->leadDistributionContractsgetReturnsSettingsdoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetReturnsSettingsdoWithHttpInfo
     *
     * Get Returns Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetReturnsSettingsdoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsgetReturnsSettingsdoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetReturnsSettingsdoAsync
     *
     * Get Returns Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetReturnsSettingsdoAsync($contractID)
    {
        return $this->leadDistributionContractsgetReturnsSettingsdoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetReturnsSettingsdoAsyncWithHttpInfo
     *
     * Get Returns Settings
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetReturnsSettingsdoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetReturnsSettingsdoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetReturnsSettingsdo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetReturnsSettingsdoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsgetReturnsSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getReturnsSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetRevenueCapInfodo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetRevenueCapInfodo($contractID)
    {
        list($response) = $this->leadDistributionContractsgetRevenueCapInfodoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetRevenueCapInfodoWithHttpInfo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetRevenueCapInfodoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsgetRevenueCapInfodoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetRevenueCapInfodoAsync
     *
     * Get Revenue Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetRevenueCapInfodoAsync($contractID)
    {
        return $this->leadDistributionContractsgetRevenueCapInfodoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetRevenueCapInfodoAsyncWithHttpInfo
     *
     * Get Revenue Cap Info
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetRevenueCapInfodoAsyncWithHttpInfo($contractID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetRevenueCapInfodoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetRevenueCapInfodo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetRevenueCapInfodoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsgetRevenueCapInfodo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getRevenueCapInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetScheduledPausedo
     *
     * Get Scheduled Pause
     *
     * @param  int $contractID contractID (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetScheduledPausedo($contractID = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadDistributionContractsgetScheduledPausedoWithHttpInfo($contractID, $start, $limit);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetScheduledPausedoWithHttpInfo
     *
     * Get Scheduled Pause
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetScheduledPausedoWithHttpInfo($contractID = null, $start = 0, $limit = 100)
    {
        $request = $this->leadDistributionContractsgetScheduledPausedoRequest($contractID, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetScheduledPausedoAsync
     *
     * Get Scheduled Pause
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetScheduledPausedoAsync($contractID = null, $start = 0, $limit = 100)
    {
        return $this->leadDistributionContractsgetScheduledPausedoAsyncWithHttpInfo($contractID, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetScheduledPausedoAsyncWithHttpInfo
     *
     * Get Scheduled Pause
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetScheduledPausedoAsyncWithHttpInfo($contractID = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetScheduledPausedoRequest($contractID, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetScheduledPausedo'
     *
     * @param  int $contractID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetScheduledPausedoRequest($contractID = null, $start = 0, $limit = 100)
    {
        $resourcePath = '/leadDistributionContracts/getScheduledPause.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsgetScheduledo
     *
     * Get Schedule
     *
     * @param  int $contractID contractID (required)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadDistributionContractsgetScheduledo($contractID, $start = 0, $limit = 100)
    {
        list($response) = $this->leadDistributionContractsgetScheduledoWithHttpInfo($contractID, $start, $limit);
        return $response;
    }

    /**
     * Operation leadDistributionContractsgetScheduledoWithHttpInfo
     *
     * Get Schedule
     *
     * @param  int $contractID (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsgetScheduledoWithHttpInfo($contractID, $start = 0, $limit = 100)
    {
        $request = $this->leadDistributionContractsgetScheduledoRequest($contractID, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsgetScheduledoAsync
     *
     * Get Schedule
     *
     * @param  int $contractID (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetScheduledoAsync($contractID, $start = 0, $limit = 100)
    {
        return $this->leadDistributionContractsgetScheduledoAsyncWithHttpInfo($contractID, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsgetScheduledoAsyncWithHttpInfo
     *
     * Get Schedule
     *
     * @param  int $contractID (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsgetScheduledoAsyncWithHttpInfo($contractID, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadDistributionContractsgetScheduledoRequest($contractID, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsgetScheduledo'
     *
     * @param  int $contractID (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsgetScheduledoRequest($contractID, $start = 0, $limit = 100)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsgetScheduledo'
            );
        }

        $resourcePath = '/leadDistributionContracts/getSchedule.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsremoveExpirationDatedo
     *
     * Remove Expiration Date
     *
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsremoveExpirationDatedo($contractID): void
    {
        $this->leadDistributionContractsremoveExpirationDatedoWithHttpInfo($contractID);
    }

    /**
     * Operation leadDistributionContractsremoveExpirationDatedoWithHttpInfo
     *
     * Remove Expiration Date
     *
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsremoveExpirationDatedoWithHttpInfo($contractID)
    {
        $request = $this->leadDistributionContractsremoveExpirationDatedoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsremoveExpirationDatedoAsync
     *
     * Remove Expiration Date
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsremoveExpirationDatedoAsync($contractID)
    {
        return $this->leadDistributionContractsremoveExpirationDatedoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsremoveExpirationDatedoAsyncWithHttpInfo
     *
     * Remove Expiration Date
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsremoveExpirationDatedoAsyncWithHttpInfo($contractID)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsremoveExpirationDatedoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsremoveExpirationDatedo'
     *
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsremoveExpirationDatedoRequest($contractID)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsremoveExpirationDatedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/removeExpirationDate.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsrenamedo
     *
     * Rename
     *
     * @param  int $contractID contractID (required)
     * @param  string $contractName contractName (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsrenamedo($contractID, $contractName): void
    {
        $this->leadDistributionContractsrenamedoWithHttpInfo($contractID, $contractName);
    }

    /**
     * Operation leadDistributionContractsrenamedoWithHttpInfo
     *
     * Rename
     *
     * @param  int $contractID (required)
     * @param  string $contractName (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsrenamedoWithHttpInfo($contractID, $contractName)
    {
        $request = $this->leadDistributionContractsrenamedoRequest($contractID, $contractName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsrenamedoAsync
     *
     * Rename
     *
     * @param  int $contractID (required)
     * @param  string $contractName (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsrenamedoAsync($contractID, $contractName)
    {
        return $this->leadDistributionContractsrenamedoAsyncWithHttpInfo($contractID, $contractName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsrenamedoAsyncWithHttpInfo
     *
     * Rename
     *
     * @param  int $contractID (required)
     * @param  string $contractName (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsrenamedoAsyncWithHttpInfo($contractID, $contractName)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsrenamedoRequest($contractID, $contractName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsrenamedo'
     *
     * @param  int $contractID (required)
     * @param  string $contractName (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsrenamedoRequest($contractID, $contractName)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsrenamedo'
            );
        }
        // verify the required parameter 'contractName' is set
        if ($contractName === null || (is_array($contractName) && count($contractName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractName when calling leadDistributionContractsrenamedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/rename.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($contractName !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contractName);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsschedulePausedo
     *
     * Schedule Pause
     *
     * @param  int $contractID contractID (required)
     * @param  \DateTime $pauseDate pauseDate (required)
     * @param  \DateTime $resumeDate resumeDate (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsschedulePausedo($contractID, $pauseDate, $resumeDate): void
    {
        $this->leadDistributionContractsschedulePausedoWithHttpInfo($contractID, $pauseDate, $resumeDate);
    }

    /**
     * Operation leadDistributionContractsschedulePausedoWithHttpInfo
     *
     * Schedule Pause
     *
     * @param  int $contractID (required)
     * @param  \DateTime $pauseDate (required)
     * @param  \DateTime $resumeDate (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsschedulePausedoWithHttpInfo($contractID, $pauseDate, $resumeDate)
    {
        $request = $this->leadDistributionContractsschedulePausedoRequest($contractID, $pauseDate, $resumeDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsschedulePausedoAsync
     *
     * Schedule Pause
     *
     * @param  int $contractID (required)
     * @param  \DateTime $pauseDate (required)
     * @param  \DateTime $resumeDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsschedulePausedoAsync($contractID, $pauseDate, $resumeDate)
    {
        return $this->leadDistributionContractsschedulePausedoAsyncWithHttpInfo($contractID, $pauseDate, $resumeDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsschedulePausedoAsyncWithHttpInfo
     *
     * Schedule Pause
     *
     * @param  int $contractID (required)
     * @param  \DateTime $pauseDate (required)
     * @param  \DateTime $resumeDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsschedulePausedoAsyncWithHttpInfo($contractID, $pauseDate, $resumeDate)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsschedulePausedoRequest($contractID, $pauseDate, $resumeDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsschedulePausedo'
     *
     * @param  int $contractID (required)
     * @param  \DateTime $pauseDate (required)
     * @param  \DateTime $resumeDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsschedulePausedoRequest($contractID, $pauseDate, $resumeDate)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsschedulePausedo'
            );
        }
        // verify the required parameter 'pauseDate' is set
        if ($pauseDate === null || (is_array($pauseDate) && count($pauseDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pauseDate when calling leadDistributionContractsschedulePausedo'
            );
        }
        // verify the required parameter 'resumeDate' is set
        if ($resumeDate === null || (is_array($resumeDate) && count($resumeDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resumeDate when calling leadDistributionContractsschedulePausedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/schedulePause.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($pauseDate !== null) {
            $queryParams['pauseDate'] = ObjectSerializer::toQueryValue($pauseDate);
        }
        // query params
        if ($resumeDate !== null) {
            $queryParams['resumeDate'] = ObjectSerializer::toQueryValue($resumeDate);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractssetExpirationDatedo
     *
     * Set Expiration Date
     *
     * @param  int $contractID contractID (required)
     * @param  \DateTime $expirationDate expirationDate (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractssetExpirationDatedo($contractID, $expirationDate): void
    {
        $this->leadDistributionContractssetExpirationDatedoWithHttpInfo($contractID, $expirationDate);
    }

    /**
     * Operation leadDistributionContractssetExpirationDatedoWithHttpInfo
     *
     * Set Expiration Date
     *
     * @param  int $contractID (required)
     * @param  \DateTime $expirationDate (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractssetExpirationDatedoWithHttpInfo($contractID, $expirationDate)
    {
        $request = $this->leadDistributionContractssetExpirationDatedoRequest($contractID, $expirationDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractssetExpirationDatedoAsync
     *
     * Set Expiration Date
     *
     * @param  int $contractID (required)
     * @param  \DateTime $expirationDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractssetExpirationDatedoAsync($contractID, $expirationDate)
    {
        return $this->leadDistributionContractssetExpirationDatedoAsyncWithHttpInfo($contractID, $expirationDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractssetExpirationDatedoAsyncWithHttpInfo
     *
     * Set Expiration Date
     *
     * @param  int $contractID (required)
     * @param  \DateTime $expirationDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractssetExpirationDatedoAsyncWithHttpInfo($contractID, $expirationDate)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractssetExpirationDatedoRequest($contractID, $expirationDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractssetExpirationDatedo'
     *
     * @param  int $contractID (required)
     * @param  \DateTime $expirationDate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractssetExpirationDatedoRequest($contractID, $expirationDate)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractssetExpirationDatedo'
            );
        }
        // verify the required parameter 'expirationDate' is set
        if ($expirationDate === null || (is_array($expirationDate) && count($expirationDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expirationDate when calling leadDistributionContractssetExpirationDatedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/setExpirationDate.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($expirationDate !== null) {
            $queryParams['expirationDate'] = ObjectSerializer::toQueryValue($expirationDate);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractssetPricedo
     *
     * Set Price
     *
     * @param  int $contractID contractID (required)
     * @param  float $price price (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractssetPricedo($contractID, $price): void
    {
        $this->leadDistributionContractssetPricedoWithHttpInfo($contractID, $price);
    }

    /**
     * Operation leadDistributionContractssetPricedoWithHttpInfo
     *
     * Set Price
     *
     * @param  int $contractID (required)
     * @param  float $price (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractssetPricedoWithHttpInfo($contractID, $price)
    {
        $request = $this->leadDistributionContractssetPricedoRequest($contractID, $price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractssetPricedoAsync
     *
     * Set Price
     *
     * @param  int $contractID (required)
     * @param  float $price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractssetPricedoAsync($contractID, $price)
    {
        return $this->leadDistributionContractssetPricedoAsyncWithHttpInfo($contractID, $price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractssetPricedoAsyncWithHttpInfo
     *
     * Set Price
     *
     * @param  int $contractID (required)
     * @param  float $price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractssetPricedoAsyncWithHttpInfo($contractID, $price)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractssetPricedoRequest($contractID, $price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractssetPricedo'
     *
     * @param  int $contractID (required)
     * @param  float $price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractssetPricedoRequest($contractID, $price)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractssetPricedo'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling leadDistributionContractssetPricedo'
            );
        }

        $resourcePath = '/leadDistributionContracts/setPrice.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateAutoRechargeSettingsdo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $contractID contractID (required)
     * @param  string $enableAutoRecharge enableAutoRecharge (optional)
     * @param  float $autoChargeBalance autoChargeBalance (optional)
     * @param  float $autoChargeAmount autoChargeAmount (optional)
     * @param  string $chargeTransactionFee chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount transactionFeeAmount (optional)
     * @param  string $generateInvoice generateInvoice (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateAutoRechargeSettingsdo($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null): void
    {
        $this->leadDistributionContractsupdateAutoRechargeSettingsdoWithHttpInfo($contractID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);
    }

    /**
     * Operation leadDistributionContractsupdateAutoRechargeSettingsdoWithHttpInfo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateAutoRechargeSettingsdoWithHttpInfo($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        $request = $this->leadDistributionContractsupdateAutoRechargeSettingsdoRequest($contractID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateAutoRechargeSettingsdoAsync
     *
     * Update Auto Recharge Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateAutoRechargeSettingsdoAsync($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        return $this->leadDistributionContractsupdateAutoRechargeSettingsdoAsyncWithHttpInfo($contractID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateAutoRechargeSettingsdoAsyncWithHttpInfo
     *
     * Update Auto Recharge Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateAutoRechargeSettingsdoAsyncWithHttpInfo($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateAutoRechargeSettingsdoRequest($contractID, $enableAutoRecharge, $autoChargeBalance, $autoChargeAmount, $chargeTransactionFee, $transactionFeePercentage, $transactionFeeAmount, $generateInvoice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateAutoRechargeSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  string $enableAutoRecharge (optional)
     * @param  float $autoChargeBalance (optional)
     * @param  float $autoChargeAmount (optional)
     * @param  string $chargeTransactionFee (optional)
     * @param  float $transactionFeePercentage (optional)
     * @param  float $transactionFeeAmount (optional)
     * @param  string $generateInvoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateAutoRechargeSettingsdoRequest($contractID, $enableAutoRecharge = null, $autoChargeBalance = null, $autoChargeAmount = null, $chargeTransactionFee = null, $transactionFeePercentage = null, $transactionFeeAmount = null, $generateInvoice = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdateAutoRechargeSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateAutoRechargeSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($enableAutoRecharge !== null) {
            $queryParams['enableAutoRecharge'] = ObjectSerializer::toQueryValue($enableAutoRecharge);
        }
        // query params
        if ($autoChargeBalance !== null) {
            $queryParams['autoChargeBalance'] = ObjectSerializer::toQueryValue($autoChargeBalance);
        }
        // query params
        if ($autoChargeAmount !== null) {
            $queryParams['autoChargeAmount'] = ObjectSerializer::toQueryValue($autoChargeAmount);
        }
        // query params
        if ($chargeTransactionFee !== null) {
            $queryParams['chargeTransactionFee'] = ObjectSerializer::toQueryValue($chargeTransactionFee);
        }
        // query params
        if ($transactionFeePercentage !== null) {
            $queryParams['transactionFeePercentage'] = ObjectSerializer::toQueryValue($transactionFeePercentage);
        }
        // query params
        if ($transactionFeeAmount !== null) {
            $queryParams['transactionFeeAmount'] = ObjectSerializer::toQueryValue($transactionFeeAmount);
        }
        // query params
        if ($generateInvoice !== null) {
            $queryParams['generateInvoice'] = ObjectSerializer::toQueryValue($generateInvoice);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateBasicInfodo
     *
     * Update Basic Info
     *
     * @param  int $contractID contractID (required)
     * @param  string $contractName contractName (optional)
     * @param  string $alternativeID alternativeID (optional)
     * @param  string $notes notes (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateBasicInfodo($contractID, $contractName = null, $alternativeID = null, $notes = null): void
    {
        $this->leadDistributionContractsupdateBasicInfodoWithHttpInfo($contractID, $contractName, $alternativeID, $notes);
    }

    /**
     * Operation leadDistributionContractsupdateBasicInfodoWithHttpInfo
     *
     * Update Basic Info
     *
     * @param  int $contractID (required)
     * @param  string $contractName (optional)
     * @param  string $alternativeID (optional)
     * @param  string $notes (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateBasicInfodoWithHttpInfo($contractID, $contractName = null, $alternativeID = null, $notes = null)
    {
        $request = $this->leadDistributionContractsupdateBasicInfodoRequest($contractID, $contractName, $alternativeID, $notes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateBasicInfodoAsync
     *
     * Update Basic Info
     *
     * @param  int $contractID (required)
     * @param  string $contractName (optional)
     * @param  string $alternativeID (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateBasicInfodoAsync($contractID, $contractName = null, $alternativeID = null, $notes = null)
    {
        return $this->leadDistributionContractsupdateBasicInfodoAsyncWithHttpInfo($contractID, $contractName, $alternativeID, $notes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateBasicInfodoAsyncWithHttpInfo
     *
     * Update Basic Info
     *
     * @param  int $contractID (required)
     * @param  string $contractName (optional)
     * @param  string $alternativeID (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateBasicInfodoAsyncWithHttpInfo($contractID, $contractName = null, $alternativeID = null, $notes = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateBasicInfodoRequest($contractID, $contractName, $alternativeID, $notes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateBasicInfodo'
     *
     * @param  int $contractID (required)
     * @param  string $contractName (optional)
     * @param  string $alternativeID (optional)
     * @param  string $notes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateBasicInfodoRequest($contractID, $contractName = null, $alternativeID = null, $notes = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdateBasicInfodo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateBasicInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($contractName !== null) {
            $queryParams['contractName'] = ObjectSerializer::toQueryValue($contractName);
        }
        // query params
        if ($alternativeID !== null) {
            $queryParams['alternativeID'] = ObjectSerializer::toQueryValue($alternativeID);
        }
        // query params
        if ($notes !== null) {
            $queryParams['notes'] = ObjectSerializer::toQueryValue($notes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateDistributionPrioritydo
     *
     * Update Distribution Priority
     *
     * @param  int $contractID contractID (required)
     * @param  int $offerID offerID (required)
     * @param  int $priority priority (optional, default to 1)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateDistributionPrioritydo($contractID, $offerID, $priority = 1): void
    {
        $this->leadDistributionContractsupdateDistributionPrioritydoWithHttpInfo($contractID, $offerID, $priority);
    }

    /**
     * Operation leadDistributionContractsupdateDistributionPrioritydoWithHttpInfo
     *
     * Update Distribution Priority
     *
     * @param  int $contractID (required)
     * @param  int $offerID (required)
     * @param  int $priority (optional, default to 1)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateDistributionPrioritydoWithHttpInfo($contractID, $offerID, $priority = 1)
    {
        $request = $this->leadDistributionContractsupdateDistributionPrioritydoRequest($contractID, $offerID, $priority);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateDistributionPrioritydoAsync
     *
     * Update Distribution Priority
     *
     * @param  int $contractID (required)
     * @param  int $offerID (required)
     * @param  int $priority (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateDistributionPrioritydoAsync($contractID, $offerID, $priority = 1)
    {
        return $this->leadDistributionContractsupdateDistributionPrioritydoAsyncWithHttpInfo($contractID, $offerID, $priority)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateDistributionPrioritydoAsyncWithHttpInfo
     *
     * Update Distribution Priority
     *
     * @param  int $contractID (required)
     * @param  int $offerID (required)
     * @param  int $priority (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateDistributionPrioritydoAsyncWithHttpInfo($contractID, $offerID, $priority = 1)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateDistributionPrioritydoRequest($contractID, $offerID, $priority);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateDistributionPrioritydo'
     *
     * @param  int $contractID (required)
     * @param  int $offerID (required)
     * @param  int $priority (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateDistributionPrioritydoRequest($contractID, $offerID, $priority = 1)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdateDistributionPrioritydo'
            );
        }
        // verify the required parameter 'offerID' is set
        if ($offerID === null || (is_array($offerID) && count($offerID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offerID when calling leadDistributionContractsupdateDistributionPrioritydo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateDistributionPriority.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($offerID !== null) {
            $queryParams['offerID'] = ObjectSerializer::toQueryValue($offerID);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateDuplicatesSettingsdo
     *
     * Update Duplicates Settings
     *
     * @param  int $contractID contractID (required)
     * @param  string $enableDuplicateCheck enableDuplicateCheck (optional)
     * @param  int $numberOfDays numberOfDays (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateDuplicatesSettingsdo($contractID, $enableDuplicateCheck = null, $numberOfDays = null): void
    {
        $this->leadDistributionContractsupdateDuplicatesSettingsdoWithHttpInfo($contractID, $enableDuplicateCheck, $numberOfDays);
    }

    /**
     * Operation leadDistributionContractsupdateDuplicatesSettingsdoWithHttpInfo
     *
     * Update Duplicates Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableDuplicateCheck (optional)
     * @param  int $numberOfDays (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateDuplicatesSettingsdoWithHttpInfo($contractID, $enableDuplicateCheck = null, $numberOfDays = null)
    {
        $request = $this->leadDistributionContractsupdateDuplicatesSettingsdoRequest($contractID, $enableDuplicateCheck, $numberOfDays);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateDuplicatesSettingsdoAsync
     *
     * Update Duplicates Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableDuplicateCheck (optional)
     * @param  int $numberOfDays (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateDuplicatesSettingsdoAsync($contractID, $enableDuplicateCheck = null, $numberOfDays = null)
    {
        return $this->leadDistributionContractsupdateDuplicatesSettingsdoAsyncWithHttpInfo($contractID, $enableDuplicateCheck, $numberOfDays)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateDuplicatesSettingsdoAsyncWithHttpInfo
     *
     * Update Duplicates Settings
     *
     * @param  int $contractID (required)
     * @param  string $enableDuplicateCheck (optional)
     * @param  int $numberOfDays (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateDuplicatesSettingsdoAsyncWithHttpInfo($contractID, $enableDuplicateCheck = null, $numberOfDays = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateDuplicatesSettingsdoRequest($contractID, $enableDuplicateCheck, $numberOfDays);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateDuplicatesSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  string $enableDuplicateCheck (optional)
     * @param  int $numberOfDays (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateDuplicatesSettingsdoRequest($contractID, $enableDuplicateCheck = null, $numberOfDays = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdateDuplicatesSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateDuplicatesSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($enableDuplicateCheck !== null) {
            $queryParams['enableDuplicateCheck'] = ObjectSerializer::toQueryValue($enableDuplicateCheck);
        }
        // query params
        if ($numberOfDays !== null) {
            $queryParams['numberOfDays'] = ObjectSerializer::toQueryValue($numberOfDays);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateLeadsCapdo
     *
     * Update Leads Cap
     *
     * @param  int $contractID contractID (required)
     * @param  int $hourlyLeadsCap hourlyLeadsCap (optional)
     * @param  int $dailyLeadsCap dailyLeadsCap (optional)
     * @param  int $weeklyLeadsCap weeklyLeadsCap (optional)
     * @param  int $monthlyLeadsCap monthlyLeadsCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateLeadsCapdo($contractID, $hourlyLeadsCap = null, $dailyLeadsCap = null, $weeklyLeadsCap = null, $monthlyLeadsCap = null): void
    {
        $this->leadDistributionContractsupdateLeadsCapdoWithHttpInfo($contractID, $hourlyLeadsCap, $dailyLeadsCap, $weeklyLeadsCap, $monthlyLeadsCap);
    }

    /**
     * Operation leadDistributionContractsupdateLeadsCapdoWithHttpInfo
     *
     * Update Leads Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyLeadsCap (optional)
     * @param  int $dailyLeadsCap (optional)
     * @param  int $weeklyLeadsCap (optional)
     * @param  int $monthlyLeadsCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateLeadsCapdoWithHttpInfo($contractID, $hourlyLeadsCap = null, $dailyLeadsCap = null, $weeklyLeadsCap = null, $monthlyLeadsCap = null)
    {
        $request = $this->leadDistributionContractsupdateLeadsCapdoRequest($contractID, $hourlyLeadsCap, $dailyLeadsCap, $weeklyLeadsCap, $monthlyLeadsCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateLeadsCapdoAsync
     *
     * Update Leads Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyLeadsCap (optional)
     * @param  int $dailyLeadsCap (optional)
     * @param  int $weeklyLeadsCap (optional)
     * @param  int $monthlyLeadsCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateLeadsCapdoAsync($contractID, $hourlyLeadsCap = null, $dailyLeadsCap = null, $weeklyLeadsCap = null, $monthlyLeadsCap = null)
    {
        return $this->leadDistributionContractsupdateLeadsCapdoAsyncWithHttpInfo($contractID, $hourlyLeadsCap, $dailyLeadsCap, $weeklyLeadsCap, $monthlyLeadsCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateLeadsCapdoAsyncWithHttpInfo
     *
     * Update Leads Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyLeadsCap (optional)
     * @param  int $dailyLeadsCap (optional)
     * @param  int $weeklyLeadsCap (optional)
     * @param  int $monthlyLeadsCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateLeadsCapdoAsyncWithHttpInfo($contractID, $hourlyLeadsCap = null, $dailyLeadsCap = null, $weeklyLeadsCap = null, $monthlyLeadsCap = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateLeadsCapdoRequest($contractID, $hourlyLeadsCap, $dailyLeadsCap, $weeklyLeadsCap, $monthlyLeadsCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateLeadsCapdo'
     *
     * @param  int $contractID (required)
     * @param  int $hourlyLeadsCap (optional)
     * @param  int $dailyLeadsCap (optional)
     * @param  int $weeklyLeadsCap (optional)
     * @param  int $monthlyLeadsCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateLeadsCapdoRequest($contractID, $hourlyLeadsCap = null, $dailyLeadsCap = null, $weeklyLeadsCap = null, $monthlyLeadsCap = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdateLeadsCapdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateLeadsCap.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($hourlyLeadsCap !== null) {
            $queryParams['hourlyLeadsCap'] = ObjectSerializer::toQueryValue($hourlyLeadsCap);
        }
        // query params
        if ($dailyLeadsCap !== null) {
            $queryParams['dailyLeadsCap'] = ObjectSerializer::toQueryValue($dailyLeadsCap);
        }
        // query params
        if ($weeklyLeadsCap !== null) {
            $queryParams['weeklyLeadsCap'] = ObjectSerializer::toQueryValue($weeklyLeadsCap);
        }
        // query params
        if ($monthlyLeadsCap !== null) {
            $queryParams['monthlyLeadsCap'] = ObjectSerializer::toQueryValue($monthlyLeadsCap);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateLeadsSettingsdo
     *
     * Update Leads Settings
     *
     * @param  int $contractID contractID (required)
     * @param  int $minimumLeadAge minimumLeadAge (optional)
     * @param  int $maximumLeadAge maximumLeadAge (optional)
     * @param  int $maximumPostErrors maximumPostErrors (optional)
     * @param  int $timeLeadsPosts timeLeadsPosts (optional)
     * @param  string $allowQueueLeads allowQueueLeads (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateLeadsSettingsdo($contractID, $minimumLeadAge = null, $maximumLeadAge = null, $maximumPostErrors = null, $timeLeadsPosts = null, $allowQueueLeads = null): void
    {
        $this->leadDistributionContractsupdateLeadsSettingsdoWithHttpInfo($contractID, $minimumLeadAge, $maximumLeadAge, $maximumPostErrors, $timeLeadsPosts, $allowQueueLeads);
    }

    /**
     * Operation leadDistributionContractsupdateLeadsSettingsdoWithHttpInfo
     *
     * Update Leads Settings
     *
     * @param  int $contractID (required)
     * @param  int $minimumLeadAge (optional)
     * @param  int $maximumLeadAge (optional)
     * @param  int $maximumPostErrors (optional)
     * @param  int $timeLeadsPosts (optional)
     * @param  string $allowQueueLeads (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateLeadsSettingsdoWithHttpInfo($contractID, $minimumLeadAge = null, $maximumLeadAge = null, $maximumPostErrors = null, $timeLeadsPosts = null, $allowQueueLeads = null)
    {
        $request = $this->leadDistributionContractsupdateLeadsSettingsdoRequest($contractID, $minimumLeadAge, $maximumLeadAge, $maximumPostErrors, $timeLeadsPosts, $allowQueueLeads);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateLeadsSettingsdoAsync
     *
     * Update Leads Settings
     *
     * @param  int $contractID (required)
     * @param  int $minimumLeadAge (optional)
     * @param  int $maximumLeadAge (optional)
     * @param  int $maximumPostErrors (optional)
     * @param  int $timeLeadsPosts (optional)
     * @param  string $allowQueueLeads (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateLeadsSettingsdoAsync($contractID, $minimumLeadAge = null, $maximumLeadAge = null, $maximumPostErrors = null, $timeLeadsPosts = null, $allowQueueLeads = null)
    {
        return $this->leadDistributionContractsupdateLeadsSettingsdoAsyncWithHttpInfo($contractID, $minimumLeadAge, $maximumLeadAge, $maximumPostErrors, $timeLeadsPosts, $allowQueueLeads)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateLeadsSettingsdoAsyncWithHttpInfo
     *
     * Update Leads Settings
     *
     * @param  int $contractID (required)
     * @param  int $minimumLeadAge (optional)
     * @param  int $maximumLeadAge (optional)
     * @param  int $maximumPostErrors (optional)
     * @param  int $timeLeadsPosts (optional)
     * @param  string $allowQueueLeads (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateLeadsSettingsdoAsyncWithHttpInfo($contractID, $minimumLeadAge = null, $maximumLeadAge = null, $maximumPostErrors = null, $timeLeadsPosts = null, $allowQueueLeads = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateLeadsSettingsdoRequest($contractID, $minimumLeadAge, $maximumLeadAge, $maximumPostErrors, $timeLeadsPosts, $allowQueueLeads);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateLeadsSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  int $minimumLeadAge (optional)
     * @param  int $maximumLeadAge (optional)
     * @param  int $maximumPostErrors (optional)
     * @param  int $timeLeadsPosts (optional)
     * @param  string $allowQueueLeads (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateLeadsSettingsdoRequest($contractID, $minimumLeadAge = null, $maximumLeadAge = null, $maximumPostErrors = null, $timeLeadsPosts = null, $allowQueueLeads = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdateLeadsSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateLeadsSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($minimumLeadAge !== null) {
            $queryParams['minimumLeadAge'] = ObjectSerializer::toQueryValue($minimumLeadAge);
        }
        // query params
        if ($maximumLeadAge !== null) {
            $queryParams['maximumLeadAge'] = ObjectSerializer::toQueryValue($maximumLeadAge);
        }
        // query params
        if ($maximumPostErrors !== null) {
            $queryParams['maximumPostErrors'] = ObjectSerializer::toQueryValue($maximumPostErrors);
        }
        // query params
        if ($timeLeadsPosts !== null) {
            $queryParams['timeLeadsPosts'] = ObjectSerializer::toQueryValue($timeLeadsPosts);
        }
        // query params
        if ($allowQueueLeads !== null) {
            $queryParams['allowQueueLeads'] = ObjectSerializer::toQueryValue($allowQueueLeads);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdatePortalSettingsdo
     *
     * Update Portal Settings
     *
     * @param  int $contractID contractID (required)
     * @param  string $showStatus showStatus (optional)
     * @param  string $showLeadData showLeadData (optional)
     * @param  string $showSchedule showSchedule (optional)
     * @param  string $showCaps showCaps (optional)
     * @param  string $showReturnSettings showReturnSettings (optional)
     * @param  string $allowStatusPause allowStatusPause (optional)
     * @param  string $allowUpdateSchedule allowUpdateSchedule (optional)
     * @param  string $allowManageCaps allowManageCaps (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdatePortalSettingsdo($contractID, $showStatus = null, $showLeadData = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null): void
    {
        $this->leadDistributionContractsupdatePortalSettingsdoWithHttpInfo($contractID, $showStatus, $showLeadData, $showSchedule, $showCaps, $showReturnSettings, $allowStatusPause, $allowUpdateSchedule, $allowManageCaps);
    }

    /**
     * Operation leadDistributionContractsupdatePortalSettingsdoWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  int $contractID (required)
     * @param  string $showStatus (optional)
     * @param  string $showLeadData (optional)
     * @param  string $showSchedule (optional)
     * @param  string $showCaps (optional)
     * @param  string $showReturnSettings (optional)
     * @param  string $allowStatusPause (optional)
     * @param  string $allowUpdateSchedule (optional)
     * @param  string $allowManageCaps (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdatePortalSettingsdoWithHttpInfo($contractID, $showStatus = null, $showLeadData = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null)
    {
        $request = $this->leadDistributionContractsupdatePortalSettingsdoRequest($contractID, $showStatus, $showLeadData, $showSchedule, $showCaps, $showReturnSettings, $allowStatusPause, $allowUpdateSchedule, $allowManageCaps);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdatePortalSettingsdoAsync
     *
     * Update Portal Settings
     *
     * @param  int $contractID (required)
     * @param  string $showStatus (optional)
     * @param  string $showLeadData (optional)
     * @param  string $showSchedule (optional)
     * @param  string $showCaps (optional)
     * @param  string $showReturnSettings (optional)
     * @param  string $allowStatusPause (optional)
     * @param  string $allowUpdateSchedule (optional)
     * @param  string $allowManageCaps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdatePortalSettingsdoAsync($contractID, $showStatus = null, $showLeadData = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null)
    {
        return $this->leadDistributionContractsupdatePortalSettingsdoAsyncWithHttpInfo($contractID, $showStatus, $showLeadData, $showSchedule, $showCaps, $showReturnSettings, $allowStatusPause, $allowUpdateSchedule, $allowManageCaps)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdatePortalSettingsdoAsyncWithHttpInfo
     *
     * Update Portal Settings
     *
     * @param  int $contractID (required)
     * @param  string $showStatus (optional)
     * @param  string $showLeadData (optional)
     * @param  string $showSchedule (optional)
     * @param  string $showCaps (optional)
     * @param  string $showReturnSettings (optional)
     * @param  string $allowStatusPause (optional)
     * @param  string $allowUpdateSchedule (optional)
     * @param  string $allowManageCaps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdatePortalSettingsdoAsyncWithHttpInfo($contractID, $showStatus = null, $showLeadData = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdatePortalSettingsdoRequest($contractID, $showStatus, $showLeadData, $showSchedule, $showCaps, $showReturnSettings, $allowStatusPause, $allowUpdateSchedule, $allowManageCaps);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdatePortalSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  string $showStatus (optional)
     * @param  string $showLeadData (optional)
     * @param  string $showSchedule (optional)
     * @param  string $showCaps (optional)
     * @param  string $showReturnSettings (optional)
     * @param  string $allowStatusPause (optional)
     * @param  string $allowUpdateSchedule (optional)
     * @param  string $allowManageCaps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdatePortalSettingsdoRequest($contractID, $showStatus = null, $showLeadData = null, $showSchedule = null, $showCaps = null, $showReturnSettings = null, $allowStatusPause = null, $allowUpdateSchedule = null, $allowManageCaps = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdatePortalSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updatePortalSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($showStatus !== null) {
            $queryParams['showStatus'] = ObjectSerializer::toQueryValue($showStatus);
        }
        // query params
        if ($showLeadData !== null) {
            $queryParams['showLeadData'] = ObjectSerializer::toQueryValue($showLeadData);
        }
        // query params
        if ($showSchedule !== null) {
            $queryParams['showSchedule'] = ObjectSerializer::toQueryValue($showSchedule);
        }
        // query params
        if ($showCaps !== null) {
            $queryParams['showCaps'] = ObjectSerializer::toQueryValue($showCaps);
        }
        // query params
        if ($showReturnSettings !== null) {
            $queryParams['showReturnSettings'] = ObjectSerializer::toQueryValue($showReturnSettings);
        }
        // query params
        if ($allowStatusPause !== null) {
            $queryParams['allowStatusPause'] = ObjectSerializer::toQueryValue($allowStatusPause);
        }
        // query params
        if ($allowUpdateSchedule !== null) {
            $queryParams['allowUpdateSchedule'] = ObjectSerializer::toQueryValue($allowUpdateSchedule);
        }
        // query params
        if ($allowManageCaps !== null) {
            $queryParams['allowManageCaps'] = ObjectSerializer::toQueryValue($allowManageCaps);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateReturnsSettingsdo
     *
     * Update Returns Settings
     *
     * @param  int $contractID contractID (required)
     * @param  string $allowReturns allowReturns (optional)
     * @param  string $autoApproveReturns autoApproveReturns (optional)
     * @param  string $replaceReturns replaceReturns (optional)
     * @param  string $replacementNonReturnable replacementNonReturnable (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateReturnsSettingsdo($contractID, $allowReturns = null, $autoApproveReturns = null, $replaceReturns = null, $replacementNonReturnable = null): void
    {
        $this->leadDistributionContractsupdateReturnsSettingsdoWithHttpInfo($contractID, $allowReturns, $autoApproveReturns, $replaceReturns, $replacementNonReturnable);
    }

    /**
     * Operation leadDistributionContractsupdateReturnsSettingsdoWithHttpInfo
     *
     * Update Returns Settings
     *
     * @param  int $contractID (required)
     * @param  string $allowReturns (optional)
     * @param  string $autoApproveReturns (optional)
     * @param  string $replaceReturns (optional)
     * @param  string $replacementNonReturnable (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateReturnsSettingsdoWithHttpInfo($contractID, $allowReturns = null, $autoApproveReturns = null, $replaceReturns = null, $replacementNonReturnable = null)
    {
        $request = $this->leadDistributionContractsupdateReturnsSettingsdoRequest($contractID, $allowReturns, $autoApproveReturns, $replaceReturns, $replacementNonReturnable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateReturnsSettingsdoAsync
     *
     * Update Returns Settings
     *
     * @param  int $contractID (required)
     * @param  string $allowReturns (optional)
     * @param  string $autoApproveReturns (optional)
     * @param  string $replaceReturns (optional)
     * @param  string $replacementNonReturnable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateReturnsSettingsdoAsync($contractID, $allowReturns = null, $autoApproveReturns = null, $replaceReturns = null, $replacementNonReturnable = null)
    {
        return $this->leadDistributionContractsupdateReturnsSettingsdoAsyncWithHttpInfo($contractID, $allowReturns, $autoApproveReturns, $replaceReturns, $replacementNonReturnable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateReturnsSettingsdoAsyncWithHttpInfo
     *
     * Update Returns Settings
     *
     * @param  int $contractID (required)
     * @param  string $allowReturns (optional)
     * @param  string $autoApproveReturns (optional)
     * @param  string $replaceReturns (optional)
     * @param  string $replacementNonReturnable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateReturnsSettingsdoAsyncWithHttpInfo($contractID, $allowReturns = null, $autoApproveReturns = null, $replaceReturns = null, $replacementNonReturnable = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateReturnsSettingsdoRequest($contractID, $allowReturns, $autoApproveReturns, $replaceReturns, $replacementNonReturnable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateReturnsSettingsdo'
     *
     * @param  int $contractID (required)
     * @param  string $allowReturns (optional)
     * @param  string $autoApproveReturns (optional)
     * @param  string $replaceReturns (optional)
     * @param  string $replacementNonReturnable (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateReturnsSettingsdoRequest($contractID, $allowReturns = null, $autoApproveReturns = null, $replaceReturns = null, $replacementNonReturnable = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdateReturnsSettingsdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateReturnsSettings.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($allowReturns !== null) {
            $queryParams['allowReturns'] = ObjectSerializer::toQueryValue($allowReturns);
        }
        // query params
        if ($autoApproveReturns !== null) {
            $queryParams['autoApproveReturns'] = ObjectSerializer::toQueryValue($autoApproveReturns);
        }
        // query params
        if ($replaceReturns !== null) {
            $queryParams['replaceReturns'] = ObjectSerializer::toQueryValue($replaceReturns);
        }
        // query params
        if ($replacementNonReturnable !== null) {
            $queryParams['replacementNonReturnable'] = ObjectSerializer::toQueryValue($replacementNonReturnable);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateRevenueCapdo
     *
     * Update Revenue Cap
     *
     * @param  int $contractID contractID (required)
     * @param  int $hourlyRevenueCap hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap monthlyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateRevenueCapdo($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null): void
    {
        $this->leadDistributionContractsupdateRevenueCapdoWithHttpInfo($contractID, $hourlyRevenueCap, $dailyRevenueCap, $weeklyRevenueCap, $monthlyRevenueCap);
    }

    /**
     * Operation leadDistributionContractsupdateRevenueCapdoWithHttpInfo
     *
     * Update Revenue Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateRevenueCapdoWithHttpInfo($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        $request = $this->leadDistributionContractsupdateRevenueCapdoRequest($contractID, $hourlyRevenueCap, $dailyRevenueCap, $weeklyRevenueCap, $monthlyRevenueCap);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateRevenueCapdoAsync
     *
     * Update Revenue Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateRevenueCapdoAsync($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        return $this->leadDistributionContractsupdateRevenueCapdoAsyncWithHttpInfo($contractID, $hourlyRevenueCap, $dailyRevenueCap, $weeklyRevenueCap, $monthlyRevenueCap)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateRevenueCapdoAsyncWithHttpInfo
     *
     * Update Revenue Cap
     *
     * @param  int $contractID (required)
     * @param  int $hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateRevenueCapdoAsyncWithHttpInfo($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateRevenueCapdoRequest($contractID, $hourlyRevenueCap, $dailyRevenueCap, $weeklyRevenueCap, $monthlyRevenueCap);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateRevenueCapdo'
     *
     * @param  int $contractID (required)
     * @param  int $hourlyRevenueCap (optional)
     * @param  int $dailyRevenueCap (optional)
     * @param  int $weeklyRevenueCap (optional)
     * @param  int $monthlyRevenueCap (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateRevenueCapdoRequest($contractID, $hourlyRevenueCap = null, $dailyRevenueCap = null, $weeklyRevenueCap = null, $monthlyRevenueCap = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadDistributionContractsupdateRevenueCapdo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateRevenueCap.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contractID !== null) {
            $queryParams['contractID'] = ObjectSerializer::toQueryValue($contractID);
        }
        // query params
        if ($hourlyRevenueCap !== null) {
            $queryParams['hourlyRevenueCap'] = ObjectSerializer::toQueryValue($hourlyRevenueCap);
        }
        // query params
        if ($dailyRevenueCap !== null) {
            $queryParams['dailyRevenueCap'] = ObjectSerializer::toQueryValue($dailyRevenueCap);
        }
        // query params
        if ($weeklyRevenueCap !== null) {
            $queryParams['weeklyRevenueCap'] = ObjectSerializer::toQueryValue($weeklyRevenueCap);
        }
        // query params
        if ($monthlyRevenueCap !== null) {
            $queryParams['monthlyRevenueCap'] = ObjectSerializer::toQueryValue($monthlyRevenueCap);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadDistributionContractsupdateScheduledo
     *
     * Update Schedule
     *
     * @param  int $deliveryScheduleID deliveryScheduleID (required)
     * @param  int $cap cap (optional)
     * @param  float $revenueCap revenueCap (optional)
     * @param  float $price price (optional)
     * @param  string $startTime startTime (optional)
     * @param  string $endTime endTime (optional)
     * @param  string $type type (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadDistributionContractsupdateScheduledo($deliveryScheduleID, $cap = null, $revenueCap = null, $price = null, $startTime = null, $endTime = null, $type = null): void
    {
        $this->leadDistributionContractsupdateScheduledoWithHttpInfo($deliveryScheduleID, $cap, $revenueCap, $price, $startTime, $endTime, $type);
    }

    /**
     * Operation leadDistributionContractsupdateScheduledoWithHttpInfo
     *
     * Update Schedule
     *
     * @param  int $deliveryScheduleID (required)
     * @param  int $cap (optional)
     * @param  float $revenueCap (optional)
     * @param  float $price (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $type (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadDistributionContractsupdateScheduledoWithHttpInfo($deliveryScheduleID, $cap = null, $revenueCap = null, $price = null, $startTime = null, $endTime = null, $type = null)
    {
        $request = $this->leadDistributionContractsupdateScheduledoRequest($deliveryScheduleID, $cap, $revenueCap, $price, $startTime, $endTime, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadDistributionContractsupdateScheduledoAsync
     *
     * Update Schedule
     *
     * @param  int $deliveryScheduleID (required)
     * @param  int $cap (optional)
     * @param  float $revenueCap (optional)
     * @param  float $price (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateScheduledoAsync($deliveryScheduleID, $cap = null, $revenueCap = null, $price = null, $startTime = null, $endTime = null, $type = null)
    {
        return $this->leadDistributionContractsupdateScheduledoAsyncWithHttpInfo($deliveryScheduleID, $cap, $revenueCap, $price, $startTime, $endTime, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadDistributionContractsupdateScheduledoAsyncWithHttpInfo
     *
     * Update Schedule
     *
     * @param  int $deliveryScheduleID (required)
     * @param  int $cap (optional)
     * @param  float $revenueCap (optional)
     * @param  float $price (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadDistributionContractsupdateScheduledoAsyncWithHttpInfo($deliveryScheduleID, $cap = null, $revenueCap = null, $price = null, $startTime = null, $endTime = null, $type = null)
    {
        $returnType = '';
        $request    = $this->leadDistributionContractsupdateScheduledoRequest($deliveryScheduleID, $cap, $revenueCap, $price, $startTime, $endTime, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadDistributionContractsupdateScheduledo'
     *
     * @param  int $deliveryScheduleID (required)
     * @param  int $cap (optional)
     * @param  float $revenueCap (optional)
     * @param  float $price (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadDistributionContractsupdateScheduledoRequest($deliveryScheduleID, $cap = null, $revenueCap = null, $price = null, $startTime = null, $endTime = null, $type = null)
    {
        // verify the required parameter 'deliveryScheduleID' is set
        if ($deliveryScheduleID === null || (is_array($deliveryScheduleID) && count($deliveryScheduleID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryScheduleID when calling leadDistributionContractsupdateScheduledo'
            );
        }

        $resourcePath = '/leadDistributionContracts/updateSchedule.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($deliveryScheduleID !== null) {
            $queryParams['deliveryScheduleID'] = ObjectSerializer::toQueryValue($deliveryScheduleID);
        }
        // query params
        if ($cap !== null) {
            $queryParams['cap'] = ObjectSerializer::toQueryValue($cap);
        }
        // query params
        if ($revenueCap !== null) {
            $queryParams['revenueCap'] = ObjectSerializer::toQueryValue($revenueCap);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if ($startTime !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($startTime);
        }
        // query params
        if ($endTime !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($endTime);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
