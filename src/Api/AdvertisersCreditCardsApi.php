<?php
/**
 * AdvertisersCreditCardsApi
 * PHP version 5
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Leadspedia\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Leadspedia\ApiException;
use Leadspedia\Configuration;
use Leadspedia\HeaderSelector;
use Leadspedia\ObjectSerializer;

/**
 * AdvertisersCreditCardsApi Class Doc Comment
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdvertisersCreditCardsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client         = $client ?: new Client();
        $this->config         = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex      = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index): void
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation advertisersCreditCardsadddo
     *
     * Add
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  string $cardNumber cardNumber (required)
     * @param  string $nameOnCard nameOnCard (required)
     * @param  string $expMonth expMonth (required)
     * @param  string $expYear expYear (required)
     * @param  string $cvv cvv (required)
     * @param  string $address address (required)
     * @param  string $city city (required)
     * @param  string $state state (required)
     * @param  string $zipCode zipCode (required)
     * @param  string $country country (required)
     * @param  string $address2 address2 (optional)
     * @param  string $defaultCard defaultCard (optional, default to 'No')
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersCreditCardsadddo($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2 = null, $defaultCard = 'No'): void
    {
        $this->advertisersCreditCardsadddoWithHttpInfo($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2, $defaultCard);
    }

    /**
     * Operation advertisersCreditCardsadddoWithHttpInfo
     *
     * Add
     *
     * @param  int $advertiserID (required)
     * @param  string $cardNumber (required)
     * @param  string $nameOnCard (required)
     * @param  string $expMonth (required)
     * @param  string $expYear (required)
     * @param  string $cvv (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zipCode (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     * @param  string $defaultCard (optional, default to 'No')
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsadddoWithHttpInfo($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2 = null, $defaultCard = 'No')
    {
        $request = $this->advertisersCreditCardsadddoRequest($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2, $defaultCard);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsadddoAsync
     *
     * Add
     *
     * @param  int $advertiserID (required)
     * @param  string $cardNumber (required)
     * @param  string $nameOnCard (required)
     * @param  string $expMonth (required)
     * @param  string $expYear (required)
     * @param  string $cvv (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zipCode (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     * @param  string $defaultCard (optional, default to 'No')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsadddoAsync($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2 = null, $defaultCard = 'No')
    {
        return $this->advertisersCreditCardsadddoAsyncWithHttpInfo($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2, $defaultCard)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsadddoAsyncWithHttpInfo
     *
     * Add
     *
     * @param  int $advertiserID (required)
     * @param  string $cardNumber (required)
     * @param  string $nameOnCard (required)
     * @param  string $expMonth (required)
     * @param  string $expYear (required)
     * @param  string $cvv (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zipCode (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     * @param  string $defaultCard (optional, default to 'No')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsadddoAsyncWithHttpInfo($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2 = null, $defaultCard = 'No')
    {
        $returnType = '';
        $request    = $this->advertisersCreditCardsadddoRequest($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2, $defaultCard);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsadddo'
     *
     * @param  int $advertiserID (required)
     * @param  string $cardNumber (required)
     * @param  string $nameOnCard (required)
     * @param  string $expMonth (required)
     * @param  string $expYear (required)
     * @param  string $cvv (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zipCode (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     * @param  string $defaultCard (optional, default to 'No')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsadddoRequest($advertiserID, $cardNumber, $nameOnCard, $expMonth, $expYear, $cvv, $address, $city, $state, $zipCode, $country, $address2 = null, $defaultCard = 'No')
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'cardNumber' is set
        if ($cardNumber === null || (is_array($cardNumber) && count($cardNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cardNumber when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'nameOnCard' is set
        if ($nameOnCard === null || (is_array($nameOnCard) && count($nameOnCard) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nameOnCard when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'expMonth' is set
        if ($expMonth === null || (is_array($expMonth) && count($expMonth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expMonth when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'expYear' is set
        if ($expYear === null || (is_array($expYear) && count($expYear) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expYear when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'cvv' is set
        if ($cvv === null || (is_array($cvv) && count($cvv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvv when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'zipCode' is set
        if ($zipCode === null || (is_array($zipCode) && count($zipCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zipCode when calling advertisersCreditCardsadddo'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling advertisersCreditCardsadddo'
            );
        }

        $resourcePath = '/advertisersCreditCards/add.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($cardNumber !== null) {
            $queryParams['cardNumber'] = ObjectSerializer::toQueryValue($cardNumber);
        }
        // query params
        if ($nameOnCard !== null) {
            $queryParams['nameOnCard'] = ObjectSerializer::toQueryValue($nameOnCard);
        }
        // query params
        if ($expMonth !== null) {
            $queryParams['expMonth'] = ObjectSerializer::toQueryValue($expMonth);
        }
        // query params
        if ($expYear !== null) {
            $queryParams['expYear'] = ObjectSerializer::toQueryValue($expYear);
        }
        // query params
        if ($cvv !== null) {
            $queryParams['cvv'] = ObjectSerializer::toQueryValue($cvv);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($zipCode !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zipCode);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($defaultCard !== null) {
            $queryParams['defaultCard'] = ObjectSerializer::toQueryValue($defaultCard);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsdeletedo
     *
     * Delete
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $creditCardID creditCardID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersCreditCardsdeletedo($advertiserID, $creditCardID): void
    {
        $this->advertisersCreditCardsdeletedoWithHttpInfo($advertiserID, $creditCardID);
    }

    /**
     * Operation advertisersCreditCardsdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsdeletedoWithHttpInfo($advertiserID, $creditCardID)
    {
        $request = $this->advertisersCreditCardsdeletedoRequest($advertiserID, $creditCardID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsdeletedoAsync
     *
     * Delete
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsdeletedoAsync($advertiserID, $creditCardID)
    {
        return $this->advertisersCreditCardsdeletedoAsyncWithHttpInfo($advertiserID, $creditCardID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsdeletedoAsyncWithHttpInfo($advertiserID, $creditCardID)
    {
        $returnType = '';
        $request    = $this->advertisersCreditCardsdeletedoRequest($advertiserID, $creditCardID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsdeletedo'
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsdeletedoRequest($advertiserID, $creditCardID)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersCreditCardsdeletedo'
            );
        }
        // verify the required parameter 'creditCardID' is set
        if ($creditCardID === null || (is_array($creditCardID) && count($creditCardID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditCardID when calling advertisersCreditCardsdeletedo'
            );
        }

        $resourcePath = '/advertisersCreditCards/delete.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($creditCardID !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($creditCardID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsgetAlldo
     *
     * Get All
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function advertisersCreditCardsgetAlldo($advertiserID, $start = 0, $limit = 100)
    {
        list($response) = $this->advertisersCreditCardsgetAlldoWithHttpInfo($advertiserID, $start, $limit);
        return $response;
    }

    /**
     * Operation advertisersCreditCardsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiserID (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsgetAlldoWithHttpInfo($advertiserID, $start = 0, $limit = 100)
    {
        $request = $this->advertisersCreditCardsgetAlldoRequest($advertiserID, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsgetAlldoAsync
     *
     * Get All
     *
     * @param  int $advertiserID (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetAlldoAsync($advertiserID, $start = 0, $limit = 100)
    {
        return $this->advertisersCreditCardsgetAlldoAsyncWithHttpInfo($advertiserID, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $advertiserID (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetAlldoAsyncWithHttpInfo($advertiserID, $start = 0, $limit = 100)
    {
        $returnType = 'object';
        $request    = $this->advertisersCreditCardsgetAlldoRequest($advertiserID, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsgetAlldo'
     *
     * @param  int $advertiserID (required)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsgetAlldoRequest($advertiserID, $start = 0, $limit = 100)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersCreditCardsgetAlldo'
            );
        }

        $resourcePath = '/advertisersCreditCards/getAll.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsgetDefaultdo
     *
     * Get Default
     *
     * @param  int $advertiserID advertiserID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function advertisersCreditCardsgetDefaultdo($advertiserID)
    {
        list($response) = $this->advertisersCreditCardsgetDefaultdoWithHttpInfo($advertiserID);
        return $response;
    }

    /**
     * Operation advertisersCreditCardsgetDefaultdoWithHttpInfo
     *
     * Get Default
     *
     * @param  int $advertiserID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsgetDefaultdoWithHttpInfo($advertiserID)
    {
        $request = $this->advertisersCreditCardsgetDefaultdoRequest($advertiserID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsgetDefaultdoAsync
     *
     * Get Default
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetDefaultdoAsync($advertiserID)
    {
        return $this->advertisersCreditCardsgetDefaultdoAsyncWithHttpInfo($advertiserID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsgetDefaultdoAsyncWithHttpInfo
     *
     * Get Default
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetDefaultdoAsyncWithHttpInfo($advertiserID)
    {
        $returnType = 'object';
        $request    = $this->advertisersCreditCardsgetDefaultdoRequest($advertiserID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsgetDefaultdo'
     *
     * @param  int $advertiserID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsgetDefaultdoRequest($advertiserID)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersCreditCardsgetDefaultdo'
            );
        }

        $resourcePath = '/advertisersCreditCards/getDefault.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsgetInfodo
     *
     * Get Info
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $creditCardID creditCardID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function advertisersCreditCardsgetInfodo($advertiserID, $creditCardID)
    {
        list($response) = $this->advertisersCreditCardsgetInfodoWithHttpInfo($advertiserID, $creditCardID);
        return $response;
    }

    /**
     * Operation advertisersCreditCardsgetInfodoWithHttpInfo
     *
     * Get Info
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsgetInfodoWithHttpInfo($advertiserID, $creditCardID)
    {
        $request = $this->advertisersCreditCardsgetInfodoRequest($advertiserID, $creditCardID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsgetInfodoAsync
     *
     * Get Info
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetInfodoAsync($advertiserID, $creditCardID)
    {
        return $this->advertisersCreditCardsgetInfodoAsyncWithHttpInfo($advertiserID, $creditCardID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsgetInfodoAsyncWithHttpInfo
     *
     * Get Info
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsgetInfodoAsyncWithHttpInfo($advertiserID, $creditCardID)
    {
        $returnType = 'object';
        $request    = $this->advertisersCreditCardsgetInfodoRequest($advertiserID, $creditCardID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsgetInfodo'
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsgetInfodoRequest($advertiserID, $creditCardID)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersCreditCardsgetInfodo'
            );
        }
        // verify the required parameter 'creditCardID' is set
        if ($creditCardID === null || (is_array($creditCardID) && count($creditCardID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditCardID when calling advertisersCreditCardsgetInfodo'
            );
        }

        $resourcePath = '/advertisersCreditCards/getInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($creditCardID !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($creditCardID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardssetDefaultdo
     *
     * Set Default
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  int $creditCardID creditCardID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersCreditCardssetDefaultdo($advertiserID, $creditCardID): void
    {
        $this->advertisersCreditCardssetDefaultdoWithHttpInfo($advertiserID, $creditCardID);
    }

    /**
     * Operation advertisersCreditCardssetDefaultdoWithHttpInfo
     *
     * Set Default
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardssetDefaultdoWithHttpInfo($advertiserID, $creditCardID)
    {
        $request = $this->advertisersCreditCardssetDefaultdoRequest($advertiserID, $creditCardID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardssetDefaultdoAsync
     *
     * Set Default
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardssetDefaultdoAsync($advertiserID, $creditCardID)
    {
        return $this->advertisersCreditCardssetDefaultdoAsyncWithHttpInfo($advertiserID, $creditCardID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardssetDefaultdoAsyncWithHttpInfo
     *
     * Set Default
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardssetDefaultdoAsyncWithHttpInfo($advertiserID, $creditCardID)
    {
        $returnType = '';
        $request    = $this->advertisersCreditCardssetDefaultdoRequest($advertiserID, $creditCardID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardssetDefaultdo'
     *
     * @param  int $advertiserID (required)
     * @param  int $creditCardID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardssetDefaultdoRequest($advertiserID, $creditCardID)
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersCreditCardssetDefaultdo'
            );
        }
        // verify the required parameter 'creditCardID' is set
        if ($creditCardID === null || (is_array($creditCardID) && count($creditCardID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditCardID when calling advertisersCreditCardssetDefaultdo'
            );
        }

        $resourcePath = '/advertisersCreditCards/setDefault.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($creditCardID !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($creditCardID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsupdatePaymentProfileIDdo
     *
     * Update Payment Profile ID
     *
     * @param  int $creditCardID creditCardID (required)
     * @param  int $advertiserID advertiserID (required)
     * @param  string $paymentProfileID paymentProfileID (optional)
     * @param  string $expMonth expMonth (optional)
     * @param  string $expYear expYear (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $city city (optional)
     * @param  string $state state (optional)
     * @param  string $zipCode zipCode (optional)
     * @param  string $country country (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersCreditCardsupdatePaymentProfileIDdo($creditCardID, $advertiserID, $paymentProfileID = null, $expMonth = null, $expYear = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null): void
    {
        $this->advertisersCreditCardsupdatePaymentProfileIDdoWithHttpInfo($creditCardID, $advertiserID, $paymentProfileID, $expMonth, $expYear, $address, $address2, $city, $state, $zipCode, $country);
    }

    /**
     * Operation advertisersCreditCardsupdatePaymentProfileIDdoWithHttpInfo
     *
     * Update Payment Profile ID
     *
     * @param  int $creditCardID (required)
     * @param  int $advertiserID (required)
     * @param  string $paymentProfileID (optional)
     * @param  string $expMonth (optional)
     * @param  string $expYear (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zipCode (optional)
     * @param  string $country (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsupdatePaymentProfileIDdoWithHttpInfo($creditCardID, $advertiserID, $paymentProfileID = null, $expMonth = null, $expYear = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null)
    {
        $request = $this->advertisersCreditCardsupdatePaymentProfileIDdoRequest($creditCardID, $advertiserID, $paymentProfileID, $expMonth, $expYear, $address, $address2, $city, $state, $zipCode, $country);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsupdatePaymentProfileIDdoAsync
     *
     * Update Payment Profile ID
     *
     * @param  int $creditCardID (required)
     * @param  int $advertiserID (required)
     * @param  string $paymentProfileID (optional)
     * @param  string $expMonth (optional)
     * @param  string $expYear (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zipCode (optional)
     * @param  string $country (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsupdatePaymentProfileIDdoAsync($creditCardID, $advertiserID, $paymentProfileID = null, $expMonth = null, $expYear = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null)
    {
        return $this->advertisersCreditCardsupdatePaymentProfileIDdoAsyncWithHttpInfo($creditCardID, $advertiserID, $paymentProfileID, $expMonth, $expYear, $address, $address2, $city, $state, $zipCode, $country)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsupdatePaymentProfileIDdoAsyncWithHttpInfo
     *
     * Update Payment Profile ID
     *
     * @param  int $creditCardID (required)
     * @param  int $advertiserID (required)
     * @param  string $paymentProfileID (optional)
     * @param  string $expMonth (optional)
     * @param  string $expYear (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zipCode (optional)
     * @param  string $country (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsupdatePaymentProfileIDdoAsyncWithHttpInfo($creditCardID, $advertiserID, $paymentProfileID = null, $expMonth = null, $expYear = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null)
    {
        $returnType = '';
        $request    = $this->advertisersCreditCardsupdatePaymentProfileIDdoRequest($creditCardID, $advertiserID, $paymentProfileID, $expMonth, $expYear, $address, $address2, $city, $state, $zipCode, $country);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsupdatePaymentProfileIDdo'
     *
     * @param  int $creditCardID (required)
     * @param  int $advertiserID (required)
     * @param  string $paymentProfileID (optional)
     * @param  string $expMonth (optional)
     * @param  string $expYear (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $city (optional)
     * @param  string $state (optional)
     * @param  string $zipCode (optional)
     * @param  string $country (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsupdatePaymentProfileIDdoRequest($creditCardID, $advertiserID, $paymentProfileID = null, $expMonth = null, $expYear = null, $address = null, $address2 = null, $city = null, $state = null, $zipCode = null, $country = null)
    {
        // verify the required parameter 'creditCardID' is set
        if ($creditCardID === null || (is_array($creditCardID) && count($creditCardID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditCardID when calling advertisersCreditCardsupdatePaymentProfileIDdo'
            );
        }
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersCreditCardsupdatePaymentProfileIDdo'
            );
        }

        $resourcePath = '/advertisersCreditCards/updatePaymentProfileID.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($creditCardID !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($creditCardID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($paymentProfileID !== null) {
            $queryParams['paymentProfileID'] = ObjectSerializer::toQueryValue($paymentProfileID);
        }
        // query params
        if ($expMonth !== null) {
            $queryParams['expMonth'] = ObjectSerializer::toQueryValue($expMonth);
        }
        // query params
        if ($expYear !== null) {
            $queryParams['expYear'] = ObjectSerializer::toQueryValue($expYear);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($zipCode !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zipCode);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersCreditCardsupdatedo
     *
     * Update
     *
     * @param  int $creditCardID creditCardID (required)
     * @param  int $advertiserID advertiserID (required)
     * @param  string $nameOnCard nameOnCard (required)
     * @param  string $expMonth expMonth (required)
     * @param  string $expYear expYear (required)
     * @param  string $address address (required)
     * @param  string $city city (required)
     * @param  string $state state (required)
     * @param  string $zipCode zipCode (required)
     * @param  string $country country (required)
     * @param  string $address2 address2 (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersCreditCardsupdatedo($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2 = null): void
    {
        $this->advertisersCreditCardsupdatedoWithHttpInfo($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2);
    }

    /**
     * Operation advertisersCreditCardsupdatedoWithHttpInfo
     *
     * Update
     *
     * @param  int $creditCardID (required)
     * @param  int $advertiserID (required)
     * @param  string $nameOnCard (required)
     * @param  string $expMonth (required)
     * @param  string $expYear (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zipCode (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersCreditCardsupdatedoWithHttpInfo($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2 = null)
    {
        $request = $this->advertisersCreditCardsupdatedoRequest($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersCreditCardsupdatedoAsync
     *
     * Update
     *
     * @param  int $creditCardID (required)
     * @param  int $advertiserID (required)
     * @param  string $nameOnCard (required)
     * @param  string $expMonth (required)
     * @param  string $expYear (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zipCode (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsupdatedoAsync($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2 = null)
    {
        return $this->advertisersCreditCardsupdatedoAsyncWithHttpInfo($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersCreditCardsupdatedoAsyncWithHttpInfo
     *
     * Update
     *
     * @param  int $creditCardID (required)
     * @param  int $advertiserID (required)
     * @param  string $nameOnCard (required)
     * @param  string $expMonth (required)
     * @param  string $expYear (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zipCode (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersCreditCardsupdatedoAsyncWithHttpInfo($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2 = null)
    {
        $returnType = '';
        $request    = $this->advertisersCreditCardsupdatedoRequest($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersCreditCardsupdatedo'
     *
     * @param  int $creditCardID (required)
     * @param  int $advertiserID (required)
     * @param  string $nameOnCard (required)
     * @param  string $expMonth (required)
     * @param  string $expYear (required)
     * @param  string $address (required)
     * @param  string $city (required)
     * @param  string $state (required)
     * @param  string $zipCode (required)
     * @param  string $country (required)
     * @param  string $address2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersCreditCardsupdatedoRequest($creditCardID, $advertiserID, $nameOnCard, $expMonth, $expYear, $address, $city, $state, $zipCode, $country, $address2 = null)
    {
        // verify the required parameter 'creditCardID' is set
        if ($creditCardID === null || (is_array($creditCardID) && count($creditCardID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditCardID when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'nameOnCard' is set
        if ($nameOnCard === null || (is_array($nameOnCard) && count($nameOnCard) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nameOnCard when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'expMonth' is set
        if ($expMonth === null || (is_array($expMonth) && count($expMonth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expMonth when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'expYear' is set
        if ($expYear === null || (is_array($expYear) && count($expYear) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expYear when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'zipCode' is set
        if ($zipCode === null || (is_array($zipCode) && count($zipCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zipCode when calling advertisersCreditCardsupdatedo'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling advertisersCreditCardsupdatedo'
            );
        }

        $resourcePath = '/advertisersCreditCards/update.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($creditCardID !== null) {
            $queryParams['creditCardID'] = ObjectSerializer::toQueryValue($creditCardID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($nameOnCard !== null) {
            $queryParams['nameOnCard'] = ObjectSerializer::toQueryValue($nameOnCard);
        }
        // query params
        if ($expMonth !== null) {
            $queryParams['expMonth'] = ObjectSerializer::toQueryValue($expMonth);
        }
        // query params
        if ($expYear !== null) {
            $queryParams['expYear'] = ObjectSerializer::toQueryValue($expYear);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($zipCode !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zipCode);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
