<?php
/**
 * AdvertisersContactsApi
 * PHP version 5
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Leadspedia\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Leadspedia\ApiException;
use Leadspedia\Configuration;
use Leadspedia\HeaderSelector;
use Leadspedia\ObjectSerializer;

/**
 * AdvertisersContactsApi Class Doc Comment
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdvertisersContactsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client         = $client ?: new Client();
        $this->config         = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex      = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index): void
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation advertisersContactschangePassworddo
     *
     * Change Password
     *
     * @param  int $contactID contactID (required)
     * @param  string $oldPassword oldPassword (required)
     * @param  string $newPassword newPassword (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersContactschangePassworddo($contactID, $oldPassword, $newPassword): void
    {
        $this->advertisersContactschangePassworddoWithHttpInfo($contactID, $oldPassword, $newPassword);
    }

    /**
     * Operation advertisersContactschangePassworddoWithHttpInfo
     *
     * Change Password
     *
     * @param  int $contactID (required)
     * @param  string $oldPassword (required)
     * @param  string $newPassword (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersContactschangePassworddoWithHttpInfo($contactID, $oldPassword, $newPassword)
    {
        $request = $this->advertisersContactschangePassworddoRequest($contactID, $oldPassword, $newPassword);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersContactschangePassworddoAsync
     *
     * Change Password
     *
     * @param  int $contactID (required)
     * @param  string $oldPassword (required)
     * @param  string $newPassword (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactschangePassworddoAsync($contactID, $oldPassword, $newPassword)
    {
        return $this->advertisersContactschangePassworddoAsyncWithHttpInfo($contactID, $oldPassword, $newPassword)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersContactschangePassworddoAsyncWithHttpInfo
     *
     * Change Password
     *
     * @param  int $contactID (required)
     * @param  string $oldPassword (required)
     * @param  string $newPassword (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactschangePassworddoAsyncWithHttpInfo($contactID, $oldPassword, $newPassword)
    {
        $returnType = '';
        $request    = $this->advertisersContactschangePassworddoRequest($contactID, $oldPassword, $newPassword);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersContactschangePassworddo'
     *
     * @param  int $contactID (required)
     * @param  string $oldPassword (required)
     * @param  string $newPassword (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersContactschangePassworddoRequest($contactID, $oldPassword, $newPassword)
    {
        // verify the required parameter 'contactID' is set
        if ($contactID === null || (is_array($contactID) && count($contactID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactID when calling advertisersContactschangePassworddo'
            );
        }
        // verify the required parameter 'oldPassword' is set
        if ($oldPassword === null || (is_array($oldPassword) && count($oldPassword) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oldPassword when calling advertisersContactschangePassworddo'
            );
        }
        // verify the required parameter 'newPassword' is set
        if ($newPassword === null || (is_array($newPassword) && count($newPassword) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newPassword when calling advertisersContactschangePassworddo'
            );
        }

        $resourcePath = '/advertisersContacts/changePassword.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contactID !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contactID);
        }
        // query params
        if ($oldPassword !== null) {
            $queryParams['oldPassword'] = ObjectSerializer::toQueryValue($oldPassword);
        }
        // query params
        if ($newPassword !== null) {
            $queryParams['newPassword'] = ObjectSerializer::toQueryValue($newPassword);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersContactschangeStatusdo
     *
     * Change Status
     *
     * @param  int $contactID contactID (required)
     * @param  string $status status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersContactschangeStatusdo($contactID, $status): void
    {
        $this->advertisersContactschangeStatusdoWithHttpInfo($contactID, $status);
    }

    /**
     * Operation advertisersContactschangeStatusdoWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contactID (required)
     * @param  string $status (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersContactschangeStatusdoWithHttpInfo($contactID, $status)
    {
        $request = $this->advertisersContactschangeStatusdoRequest($contactID, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersContactschangeStatusdoAsync
     *
     * Change Status
     *
     * @param  int $contactID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactschangeStatusdoAsync($contactID, $status)
    {
        return $this->advertisersContactschangeStatusdoAsyncWithHttpInfo($contactID, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersContactschangeStatusdoAsyncWithHttpInfo
     *
     * Change Status
     *
     * @param  int $contactID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactschangeStatusdoAsyncWithHttpInfo($contactID, $status)
    {
        $returnType = '';
        $request    = $this->advertisersContactschangeStatusdoRequest($contactID, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersContactschangeStatusdo'
     *
     * @param  int $contactID (required)
     * @param  string $status (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersContactschangeStatusdoRequest($contactID, $status)
    {
        // verify the required parameter 'contactID' is set
        if ($contactID === null || (is_array($contactID) && count($contactID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactID when calling advertisersContactschangeStatusdo'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling advertisersContactschangeStatusdo'
            );
        }

        $resourcePath = '/advertisersContacts/changeStatus.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contactID !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contactID);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersContactscreatedo
     *
     * Create
     *
     * @param  int $advertiserID advertiserID (required)
     * @param  string $firstName firstName (required)
     * @param  string $lastName lastName (required)
     * @param  string $emailAddress emailAddress (required)
     * @param  string $password password (required)
     * @param  string $jobTitle jobTitle (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $portalAccess portalAccess (optional, default to 'No')
     * @param  string $status status (optional, default to 'Active')
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersContactscreatedo($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle = null, $phoneNumber = null, $portalAccess = 'No', $status = 'Active'): void
    {
        $this->advertisersContactscreatedoWithHttpInfo($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle, $phoneNumber, $portalAccess, $status);
    }

    /**
     * Operation advertisersContactscreatedoWithHttpInfo
     *
     * Create
     *
     * @param  int $advertiserID (required)
     * @param  string $firstName (required)
     * @param  string $lastName (required)
     * @param  string $emailAddress (required)
     * @param  string $password (required)
     * @param  string $jobTitle (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $portalAccess (optional, default to 'No')
     * @param  string $status (optional, default to 'Active')
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersContactscreatedoWithHttpInfo($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle = null, $phoneNumber = null, $portalAccess = 'No', $status = 'Active')
    {
        $request = $this->advertisersContactscreatedoRequest($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle, $phoneNumber, $portalAccess, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersContactscreatedoAsync
     *
     * Create
     *
     * @param  int $advertiserID (required)
     * @param  string $firstName (required)
     * @param  string $lastName (required)
     * @param  string $emailAddress (required)
     * @param  string $password (required)
     * @param  string $jobTitle (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $portalAccess (optional, default to 'No')
     * @param  string $status (optional, default to 'Active')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactscreatedoAsync($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle = null, $phoneNumber = null, $portalAccess = 'No', $status = 'Active')
    {
        return $this->advertisersContactscreatedoAsyncWithHttpInfo($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle, $phoneNumber, $portalAccess, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersContactscreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  int $advertiserID (required)
     * @param  string $firstName (required)
     * @param  string $lastName (required)
     * @param  string $emailAddress (required)
     * @param  string $password (required)
     * @param  string $jobTitle (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $portalAccess (optional, default to 'No')
     * @param  string $status (optional, default to 'Active')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactscreatedoAsyncWithHttpInfo($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle = null, $phoneNumber = null, $portalAccess = 'No', $status = 'Active')
    {
        $returnType = '';
        $request    = $this->advertisersContactscreatedoRequest($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle, $phoneNumber, $portalAccess, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersContactscreatedo'
     *
     * @param  int $advertiserID (required)
     * @param  string $firstName (required)
     * @param  string $lastName (required)
     * @param  string $emailAddress (required)
     * @param  string $password (required)
     * @param  string $jobTitle (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $portalAccess (optional, default to 'No')
     * @param  string $status (optional, default to 'Active')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersContactscreatedoRequest($advertiserID, $firstName, $lastName, $emailAddress, $password, $jobTitle = null, $phoneNumber = null, $portalAccess = 'No', $status = 'Active')
    {
        // verify the required parameter 'advertiserID' is set
        if ($advertiserID === null || (is_array($advertiserID) && count($advertiserID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiserID when calling advertisersContactscreatedo'
            );
        }
        // verify the required parameter 'firstName' is set
        if ($firstName === null || (is_array($firstName) && count($firstName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firstName when calling advertisersContactscreatedo'
            );
        }
        // verify the required parameter 'lastName' is set
        if ($lastName === null || (is_array($lastName) && count($lastName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lastName when calling advertisersContactscreatedo'
            );
        }
        // verify the required parameter 'emailAddress' is set
        if ($emailAddress === null || (is_array($emailAddress) && count($emailAddress) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailAddress when calling advertisersContactscreatedo'
            );
        }
        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling advertisersContactscreatedo'
            );
        }

        $resourcePath = '/advertisersContacts/create.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($firstName !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($firstName);
        }
        // query params
        if ($lastName !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($lastName);
        }
        // query params
        if ($emailAddress !== null) {
            $queryParams['emailAddress'] = ObjectSerializer::toQueryValue($emailAddress);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($jobTitle !== null) {
            $queryParams['jobTitle'] = ObjectSerializer::toQueryValue($jobTitle);
        }
        // query params
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = ObjectSerializer::toQueryValue($phoneNumber);
        }
        // query params
        if ($portalAccess !== null) {
            $queryParams['portalAccess'] = ObjectSerializer::toQueryValue($portalAccess);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersContactsdeletedo
     *
     * Delete
     *
     * @param  int $contactID contactID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersContactsdeletedo($contactID): void
    {
        $this->advertisersContactsdeletedoWithHttpInfo($contactID);
    }

    /**
     * Operation advertisersContactsdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $contactID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersContactsdeletedoWithHttpInfo($contactID)
    {
        $request = $this->advertisersContactsdeletedoRequest($contactID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersContactsdeletedoAsync
     *
     * Delete
     *
     * @param  int $contactID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsdeletedoAsync($contactID)
    {
        return $this->advertisersContactsdeletedoAsyncWithHttpInfo($contactID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersContactsdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $contactID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsdeletedoAsyncWithHttpInfo($contactID)
    {
        $returnType = '';
        $request    = $this->advertisersContactsdeletedoRequest($contactID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersContactsdeletedo'
     *
     * @param  int $contactID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersContactsdeletedoRequest($contactID)
    {
        // verify the required parameter 'contactID' is set
        if ($contactID === null || (is_array($contactID) && count($contactID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactID when calling advertisersContactsdeletedo'
            );
        }

        $resourcePath = '/advertisersContacts/delete.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contactID !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contactID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersContactsgetAlldo
     *
     * Get All
     *
     * @param  int $contactID contactID (optional)
     * @param  int $advertiserID advertiserID (optional)
     * @param  string $portalAccess portalAccess (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function advertisersContactsgetAlldo($contactID = null, $advertiserID = null, $portalAccess = null, $start = 0, $limit = 100)
    {
        list($response) = $this->advertisersContactsgetAlldoWithHttpInfo($contactID, $advertiserID, $portalAccess, $start, $limit);
        return $response;
    }

    /**
     * Operation advertisersContactsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $contactID (optional)
     * @param  int $advertiserID (optional)
     * @param  string $portalAccess (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersContactsgetAlldoWithHttpInfo($contactID = null, $advertiserID = null, $portalAccess = null, $start = 0, $limit = 100)
    {
        $request = $this->advertisersContactsgetAlldoRequest($contactID, $advertiserID, $portalAccess, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersContactsgetAlldoAsync
     *
     * Get All
     *
     * @param  int $contactID (optional)
     * @param  int $advertiserID (optional)
     * @param  string $portalAccess (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsgetAlldoAsync($contactID = null, $advertiserID = null, $portalAccess = null, $start = 0, $limit = 100)
    {
        return $this->advertisersContactsgetAlldoAsyncWithHttpInfo($contactID, $advertiserID, $portalAccess, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersContactsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $contactID (optional)
     * @param  int $advertiserID (optional)
     * @param  string $portalAccess (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsgetAlldoAsyncWithHttpInfo($contactID = null, $advertiserID = null, $portalAccess = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->advertisersContactsgetAlldoRequest($contactID, $advertiserID, $portalAccess, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersContactsgetAlldo'
     *
     * @param  int $contactID (optional)
     * @param  int $advertiserID (optional)
     * @param  string $portalAccess (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersContactsgetAlldoRequest($contactID = null, $advertiserID = null, $portalAccess = null, $start = 0, $limit = 100)
    {
        $resourcePath = '/advertisersContacts/getAll.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contactID !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contactID);
        }
        // query params
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = ObjectSerializer::toQueryValue($advertiserID);
        }
        // query params
        if ($portalAccess !== null) {
            $queryParams['portalAccess'] = ObjectSerializer::toQueryValue($portalAccess);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersContactsgetInfodo
     *
     * Get Info
     *
     * @param  int $contactID contactID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function advertisersContactsgetInfodo($contactID)
    {
        list($response) = $this->advertisersContactsgetInfodoWithHttpInfo($contactID);
        return $response;
    }

    /**
     * Operation advertisersContactsgetInfodoWithHttpInfo
     *
     * Get Info
     *
     * @param  int $contactID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersContactsgetInfodoWithHttpInfo($contactID)
    {
        $request = $this->advertisersContactsgetInfodoRequest($contactID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersContactsgetInfodoAsync
     *
     * Get Info
     *
     * @param  int $contactID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsgetInfodoAsync($contactID)
    {
        return $this->advertisersContactsgetInfodoAsyncWithHttpInfo($contactID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersContactsgetInfodoAsyncWithHttpInfo
     *
     * Get Info
     *
     * @param  int $contactID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsgetInfodoAsyncWithHttpInfo($contactID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->advertisersContactsgetInfodoRequest($contactID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersContactsgetInfodo'
     *
     * @param  int $contactID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersContactsgetInfodoRequest($contactID)
    {
        // verify the required parameter 'contactID' is set
        if ($contactID === null || (is_array($contactID) && count($contactID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactID when calling advertisersContactsgetInfodo'
            );
        }

        $resourcePath = '/advertisersContacts/getInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contactID !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contactID);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersContactsupdatedo
     *
     * Update
     *
     * @param  int $contactID contactID (required)
     * @param  string $firstName firstName (optional)
     * @param  string $lastName lastName (optional)
     * @param  string $jobTitle jobTitle (optional)
     * @param  string $emailAddress emailAddress (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $officePhone officePhone (optional)
     * @param  string $ext ext (optional)
     * @param  string $portalAccess portalAccess (optional)
     * @param  string $role role (optional)
     * @param  string $massEmail massEmail (optional)
     * @param  string $permissionAccount permissionAccount (optional)
     * @param  string $permissionBilling permissionBilling (optional)
     * @param  string $permissionOffers permissionOffers (optional)
     * @param  string $permissionReports permissionReports (optional)
     * @param  string $permissionUsers permissionUsers (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersContactsupdatedo($contactID, $firstName = null, $lastName = null, $jobTitle = null, $emailAddress = null, $phoneNumber = null, $officePhone = null, $ext = null, $portalAccess = null, $role = null, $massEmail = null, $permissionAccount = null, $permissionBilling = null, $permissionOffers = null, $permissionReports = null, $permissionUsers = null): void
    {
        $this->advertisersContactsupdatedoWithHttpInfo($contactID, $firstName, $lastName, $jobTitle, $emailAddress, $phoneNumber, $officePhone, $ext, $portalAccess, $role, $massEmail, $permissionAccount, $permissionBilling, $permissionOffers, $permissionReports, $permissionUsers);
    }

    /**
     * Operation advertisersContactsupdatedoWithHttpInfo
     *
     * Update
     *
     * @param  int $contactID (required)
     * @param  string $firstName (optional)
     * @param  string $lastName (optional)
     * @param  string $jobTitle (optional)
     * @param  string $emailAddress (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $officePhone (optional)
     * @param  string $ext (optional)
     * @param  string $portalAccess (optional)
     * @param  string $role (optional)
     * @param  string $massEmail (optional)
     * @param  string $permissionAccount (optional)
     * @param  string $permissionBilling (optional)
     * @param  string $permissionOffers (optional)
     * @param  string $permissionReports (optional)
     * @param  string $permissionUsers (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersContactsupdatedoWithHttpInfo($contactID, $firstName = null, $lastName = null, $jobTitle = null, $emailAddress = null, $phoneNumber = null, $officePhone = null, $ext = null, $portalAccess = null, $role = null, $massEmail = null, $permissionAccount = null, $permissionBilling = null, $permissionOffers = null, $permissionReports = null, $permissionUsers = null)
    {
        $request = $this->advertisersContactsupdatedoRequest($contactID, $firstName, $lastName, $jobTitle, $emailAddress, $phoneNumber, $officePhone, $ext, $portalAccess, $role, $massEmail, $permissionAccount, $permissionBilling, $permissionOffers, $permissionReports, $permissionUsers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersContactsupdatedoAsync
     *
     * Update
     *
     * @param  int $contactID (required)
     * @param  string $firstName (optional)
     * @param  string $lastName (optional)
     * @param  string $jobTitle (optional)
     * @param  string $emailAddress (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $officePhone (optional)
     * @param  string $ext (optional)
     * @param  string $portalAccess (optional)
     * @param  string $role (optional)
     * @param  string $massEmail (optional)
     * @param  string $permissionAccount (optional)
     * @param  string $permissionBilling (optional)
     * @param  string $permissionOffers (optional)
     * @param  string $permissionReports (optional)
     * @param  string $permissionUsers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsupdatedoAsync($contactID, $firstName = null, $lastName = null, $jobTitle = null, $emailAddress = null, $phoneNumber = null, $officePhone = null, $ext = null, $portalAccess = null, $role = null, $massEmail = null, $permissionAccount = null, $permissionBilling = null, $permissionOffers = null, $permissionReports = null, $permissionUsers = null)
    {
        return $this->advertisersContactsupdatedoAsyncWithHttpInfo($contactID, $firstName, $lastName, $jobTitle, $emailAddress, $phoneNumber, $officePhone, $ext, $portalAccess, $role, $massEmail, $permissionAccount, $permissionBilling, $permissionOffers, $permissionReports, $permissionUsers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersContactsupdatedoAsyncWithHttpInfo
     *
     * Update
     *
     * @param  int $contactID (required)
     * @param  string $firstName (optional)
     * @param  string $lastName (optional)
     * @param  string $jobTitle (optional)
     * @param  string $emailAddress (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $officePhone (optional)
     * @param  string $ext (optional)
     * @param  string $portalAccess (optional)
     * @param  string $role (optional)
     * @param  string $massEmail (optional)
     * @param  string $permissionAccount (optional)
     * @param  string $permissionBilling (optional)
     * @param  string $permissionOffers (optional)
     * @param  string $permissionReports (optional)
     * @param  string $permissionUsers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsupdatedoAsyncWithHttpInfo($contactID, $firstName = null, $lastName = null, $jobTitle = null, $emailAddress = null, $phoneNumber = null, $officePhone = null, $ext = null, $portalAccess = null, $role = null, $massEmail = null, $permissionAccount = null, $permissionBilling = null, $permissionOffers = null, $permissionReports = null, $permissionUsers = null)
    {
        $returnType = '';
        $request    = $this->advertisersContactsupdatedoRequest($contactID, $firstName, $lastName, $jobTitle, $emailAddress, $phoneNumber, $officePhone, $ext, $portalAccess, $role, $massEmail, $permissionAccount, $permissionBilling, $permissionOffers, $permissionReports, $permissionUsers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersContactsupdatedo'
     *
     * @param  int $contactID (required)
     * @param  string $firstName (optional)
     * @param  string $lastName (optional)
     * @param  string $jobTitle (optional)
     * @param  string $emailAddress (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $officePhone (optional)
     * @param  string $ext (optional)
     * @param  string $portalAccess (optional)
     * @param  string $role (optional)
     * @param  string $massEmail (optional)
     * @param  string $permissionAccount (optional)
     * @param  string $permissionBilling (optional)
     * @param  string $permissionOffers (optional)
     * @param  string $permissionReports (optional)
     * @param  string $permissionUsers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersContactsupdatedoRequest($contactID, $firstName = null, $lastName = null, $jobTitle = null, $emailAddress = null, $phoneNumber = null, $officePhone = null, $ext = null, $portalAccess = null, $role = null, $massEmail = null, $permissionAccount = null, $permissionBilling = null, $permissionOffers = null, $permissionReports = null, $permissionUsers = null)
    {
        // verify the required parameter 'contactID' is set
        if ($contactID === null || (is_array($contactID) && count($contactID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactID when calling advertisersContactsupdatedo'
            );
        }

        $resourcePath = '/advertisersContacts/update.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($contactID !== null) {
            $queryParams['contactID'] = ObjectSerializer::toQueryValue($contactID);
        }
        // query params
        if ($firstName !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($firstName);
        }
        // query params
        if ($lastName !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($lastName);
        }
        // query params
        if ($jobTitle !== null) {
            $queryParams['jobTitle'] = ObjectSerializer::toQueryValue($jobTitle);
        }
        // query params
        if ($emailAddress !== null) {
            $queryParams['emailAddress'] = ObjectSerializer::toQueryValue($emailAddress);
        }
        // query params
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = ObjectSerializer::toQueryValue($phoneNumber);
        }
        // query params
        if ($officePhone !== null) {
            $queryParams['officePhone'] = ObjectSerializer::toQueryValue($officePhone);
        }
        // query params
        if ($ext !== null) {
            $queryParams['ext'] = ObjectSerializer::toQueryValue($ext);
        }
        // query params
        if ($portalAccess !== null) {
            $queryParams['portalAccess'] = ObjectSerializer::toQueryValue($portalAccess);
        }
        // query params
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if ($massEmail !== null) {
            $queryParams['massEmail'] = ObjectSerializer::toQueryValue($massEmail);
        }
        // query params
        if ($permissionAccount !== null) {
            $queryParams['permission_account'] = ObjectSerializer::toQueryValue($permissionAccount);
        }
        // query params
        if ($permissionBilling !== null) {
            $queryParams['permission_billing'] = ObjectSerializer::toQueryValue($permissionBilling);
        }
        // query params
        if ($permissionOffers !== null) {
            $queryParams['permission_offers'] = ObjectSerializer::toQueryValue($permissionOffers);
        }
        // query params
        if ($permissionReports !== null) {
            $queryParams['permission_reports'] = ObjectSerializer::toQueryValue($permissionReports);
        }
        // query params
        if ($permissionUsers !== null) {
            $queryParams['permission_users'] = ObjectSerializer::toQueryValue($permissionUsers);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advertisersContactsverifyCredentialsdo
     *
     * Verify Credentials
     *
     * @param  string $emailAddress emailAddress (required)
     * @param  string $password password (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function advertisersContactsverifyCredentialsdo($emailAddress, $password): void
    {
        $this->advertisersContactsverifyCredentialsdoWithHttpInfo($emailAddress, $password);
    }

    /**
     * Operation advertisersContactsverifyCredentialsdoWithHttpInfo
     *
     * Verify Credentials
     *
     * @param  string $emailAddress (required)
     * @param  string $password (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advertisersContactsverifyCredentialsdoWithHttpInfo($emailAddress, $password)
    {
        $request = $this->advertisersContactsverifyCredentialsdoRequest($emailAddress, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advertisersContactsverifyCredentialsdoAsync
     *
     * Verify Credentials
     *
     * @param  string $emailAddress (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsverifyCredentialsdoAsync($emailAddress, $password)
    {
        return $this->advertisersContactsverifyCredentialsdoAsyncWithHttpInfo($emailAddress, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advertisersContactsverifyCredentialsdoAsyncWithHttpInfo
     *
     * Verify Credentials
     *
     * @param  string $emailAddress (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advertisersContactsverifyCredentialsdoAsyncWithHttpInfo($emailAddress, $password)
    {
        $returnType = '';
        $request    = $this->advertisersContactsverifyCredentialsdoRequest($emailAddress, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advertisersContactsverifyCredentialsdo'
     *
     * @param  string $emailAddress (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advertisersContactsverifyCredentialsdoRequest($emailAddress, $password)
    {
        // verify the required parameter 'emailAddress' is set
        if ($emailAddress === null || (is_array($emailAddress) && count($emailAddress) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailAddress when calling advertisersContactsverifyCredentialsdo'
            );
        }
        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling advertisersContactsverifyCredentialsdo'
            );
        }

        $resourcePath = '/advertisersContacts/verifyCredentials.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if ($emailAddress !== null) {
            $queryParams['emailAddress'] = ObjectSerializer::toQueryValue($emailAddress);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
