<?php
/**
 * ContractFieldRevenueRulesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Leadspedia\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Leadspedia\ApiException;
use Leadspedia\Configuration;
use Leadspedia\HeaderSelector;
use Leadspedia\ObjectSerializer;

/**
 * ContractFieldRevenueRulesApi Class Doc Comment
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContractFieldRevenueRulesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation contractFieldRevenueRulescreatedo
     *
     * Create
     *
     * @param  int $contractID contractID (required)
     * @param  int $fieldID fieldID (required)
     * @param  string $fieldValue fieldValue (required)
     * @param  float $price price (required)
     * @param  float $effectivePriceRate effectivePriceRate (optional)
     * @param  float $effectivePriceAmount effectivePriceAmount (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function contractFieldRevenueRulescreatedo($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        list($response) = $this->contractFieldRevenueRulescreatedoWithHttpInfo($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate, $effectivePriceAmount);
        return $response;
    }

    /**
     * Operation contractFieldRevenueRulescreatedoWithHttpInfo
     *
     * Create
     *
     * @param  int $contractID (required)
     * @param  int $fieldID (required)
     * @param  string $fieldValue (required)
     * @param  float $price (required)
     * @param  float $effectivePriceRate (optional)
     * @param  float $effectivePriceAmount (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractFieldRevenueRulescreatedoWithHttpInfo($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        $request = $this->contractFieldRevenueRulescreatedoRequest($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate, $effectivePriceAmount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contractFieldRevenueRulescreatedoAsync
     *
     * Create
     *
     * @param  int $contractID (required)
     * @param  int $fieldID (required)
     * @param  string $fieldValue (required)
     * @param  float $price (required)
     * @param  float $effectivePriceRate (optional)
     * @param  float $effectivePriceAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractFieldRevenueRulescreatedoAsync($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        return $this->contractFieldRevenueRulescreatedoAsyncWithHttpInfo($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate, $effectivePriceAmount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contractFieldRevenueRulescreatedoAsyncWithHttpInfo
     *
     * Create
     *
     * @param  int $contractID (required)
     * @param  int $fieldID (required)
     * @param  string $fieldValue (required)
     * @param  float $price (required)
     * @param  float $effectivePriceRate (optional)
     * @param  float $effectivePriceAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractFieldRevenueRulescreatedoAsyncWithHttpInfo($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->contractFieldRevenueRulescreatedoRequest($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate, $effectivePriceAmount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contractFieldRevenueRulescreatedo'
     *
     * @param  int $contractID (required)
     * @param  int $fieldID (required)
     * @param  string $fieldValue (required)
     * @param  float $price (required)
     * @param  float $effectivePriceRate (optional)
     * @param  float $effectivePriceAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractFieldRevenueRulescreatedoRequest($contractID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling contractFieldRevenueRulescreatedo'
            );
        }
        // verify the required parameter 'fieldID' is set
        if ($fieldID === null || (is_array($fieldID) && count($fieldID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldID when calling contractFieldRevenueRulescreatedo'
            );
        }
        // verify the required parameter 'fieldValue' is set
        if ($fieldValue === null || (is_array($fieldValue) && count($fieldValue) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldValue when calling contractFieldRevenueRulescreatedo'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling contractFieldRevenueRulescreatedo'
            );
        }

        $resourcePath = '/contractFieldRevenueRules/create.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contractID,
            'contractID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fieldID,
            'fieldID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fieldValue,
            'fieldValue', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $price,
            'price', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectivePriceRate,
            'effectivePriceRate', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectivePriceAmount,
            'effectivePriceAmount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractFieldRevenueRulesdeletedo
     *
     * Delete
     *
     * @param  int $fieldRevenueRuleID fieldRevenueRuleID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function contractFieldRevenueRulesdeletedo($fieldRevenueRuleID)
    {
        list($response) = $this->contractFieldRevenueRulesdeletedoWithHttpInfo($fieldRevenueRuleID);
        return $response;
    }

    /**
     * Operation contractFieldRevenueRulesdeletedoWithHttpInfo
     *
     * Delete
     *
     * @param  int $fieldRevenueRuleID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractFieldRevenueRulesdeletedoWithHttpInfo($fieldRevenueRuleID)
    {
        $request = $this->contractFieldRevenueRulesdeletedoRequest($fieldRevenueRuleID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contractFieldRevenueRulesdeletedoAsync
     *
     * Delete
     *
     * @param  int $fieldRevenueRuleID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractFieldRevenueRulesdeletedoAsync($fieldRevenueRuleID)
    {
        return $this->contractFieldRevenueRulesdeletedoAsyncWithHttpInfo($fieldRevenueRuleID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contractFieldRevenueRulesdeletedoAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  int $fieldRevenueRuleID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractFieldRevenueRulesdeletedoAsyncWithHttpInfo($fieldRevenueRuleID)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->contractFieldRevenueRulesdeletedoRequest($fieldRevenueRuleID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contractFieldRevenueRulesdeletedo'
     *
     * @param  int $fieldRevenueRuleID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractFieldRevenueRulesdeletedoRequest($fieldRevenueRuleID)
    {
        // verify the required parameter 'fieldRevenueRuleID' is set
        if ($fieldRevenueRuleID === null || (is_array($fieldRevenueRuleID) && count($fieldRevenueRuleID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldRevenueRuleID when calling contractFieldRevenueRulesdeletedo'
            );
        }

        $resourcePath = '/contractFieldRevenueRules/delete.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fieldRevenueRuleID,
            'fieldRevenueRuleID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractFieldRevenueRulesgetAlldo
     *
     * Get All
     *
     * @param  int $contractID contractID (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\VerticalsgetAlldo200Response
     */
    public function contractFieldRevenueRulesgetAlldo($contractID = null)
    {
        list($response) = $this->contractFieldRevenueRulesgetAlldoWithHttpInfo($contractID);
        return $response;
    }

    /**
     * Operation contractFieldRevenueRulesgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  int $contractID (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\VerticalsgetAlldo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractFieldRevenueRulesgetAlldoWithHttpInfo($contractID = null)
    {
        $request = $this->contractFieldRevenueRulesgetAlldoRequest($contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\VerticalsgetAlldo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\VerticalsgetAlldo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\VerticalsgetAlldo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\VerticalsgetAlldo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\VerticalsgetAlldo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contractFieldRevenueRulesgetAlldoAsync
     *
     * Get All
     *
     * @param  int $contractID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractFieldRevenueRulesgetAlldoAsync($contractID = null)
    {
        return $this->contractFieldRevenueRulesgetAlldoAsyncWithHttpInfo($contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contractFieldRevenueRulesgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  int $contractID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractFieldRevenueRulesgetAlldoAsyncWithHttpInfo($contractID = null)
    {
        $returnType = '\Leadspedia\Model\VerticalsgetAlldo200Response';
        $request = $this->contractFieldRevenueRulesgetAlldoRequest($contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contractFieldRevenueRulesgetAlldo'
     *
     * @param  int $contractID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractFieldRevenueRulesgetAlldoRequest($contractID = null)
    {

        $resourcePath = '/contractFieldRevenueRules/getAll.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contractID,
            'contractID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractFieldRevenueRulesupdatedo
     *
     * Update
     *
     * @param  int $fieldRevenueRuleID fieldRevenueRuleID (required)
     * @param  int $fieldID fieldID (required)
     * @param  string $fieldValue fieldValue (required)
     * @param  float $price price (required)
     * @param  float $effectivePriceRate effectivePriceRate (optional)
     * @param  float $effectivePriceAmount effectivePriceAmount (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\Affiliatescreatedo200Response
     */
    public function contractFieldRevenueRulesupdatedo($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        list($response) = $this->contractFieldRevenueRulesupdatedoWithHttpInfo($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate, $effectivePriceAmount);
        return $response;
    }

    /**
     * Operation contractFieldRevenueRulesupdatedoWithHttpInfo
     *
     * Update
     *
     * @param  int $fieldRevenueRuleID (required)
     * @param  int $fieldID (required)
     * @param  string $fieldValue (required)
     * @param  float $price (required)
     * @param  float $effectivePriceRate (optional)
     * @param  float $effectivePriceAmount (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\Affiliatescreatedo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractFieldRevenueRulesupdatedoWithHttpInfo($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        $request = $this->contractFieldRevenueRulesupdatedoRequest($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate, $effectivePriceAmount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\Affiliatescreatedo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Leadspedia\Model\Affiliatescreatedo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\Affiliatescreatedo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\Affiliatescreatedo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contractFieldRevenueRulesupdatedoAsync
     *
     * Update
     *
     * @param  int $fieldRevenueRuleID (required)
     * @param  int $fieldID (required)
     * @param  string $fieldValue (required)
     * @param  float $price (required)
     * @param  float $effectivePriceRate (optional)
     * @param  float $effectivePriceAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractFieldRevenueRulesupdatedoAsync($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        return $this->contractFieldRevenueRulesupdatedoAsyncWithHttpInfo($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate, $effectivePriceAmount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contractFieldRevenueRulesupdatedoAsyncWithHttpInfo
     *
     * Update
     *
     * @param  int $fieldRevenueRuleID (required)
     * @param  int $fieldID (required)
     * @param  string $fieldValue (required)
     * @param  float $price (required)
     * @param  float $effectivePriceRate (optional)
     * @param  float $effectivePriceAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractFieldRevenueRulesupdatedoAsyncWithHttpInfo($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        $returnType = '\Leadspedia\Model\Affiliatescreatedo200Response';
        $request = $this->contractFieldRevenueRulesupdatedoRequest($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate, $effectivePriceAmount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contractFieldRevenueRulesupdatedo'
     *
     * @param  int $fieldRevenueRuleID (required)
     * @param  int $fieldID (required)
     * @param  string $fieldValue (required)
     * @param  float $price (required)
     * @param  float $effectivePriceRate (optional)
     * @param  float $effectivePriceAmount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractFieldRevenueRulesupdatedoRequest($fieldRevenueRuleID, $fieldID, $fieldValue, $price, $effectivePriceRate = null, $effectivePriceAmount = null)
    {
        // verify the required parameter 'fieldRevenueRuleID' is set
        if ($fieldRevenueRuleID === null || (is_array($fieldRevenueRuleID) && count($fieldRevenueRuleID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldRevenueRuleID when calling contractFieldRevenueRulesupdatedo'
            );
        }
        // verify the required parameter 'fieldID' is set
        if ($fieldID === null || (is_array($fieldID) && count($fieldID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldID when calling contractFieldRevenueRulesupdatedo'
            );
        }
        // verify the required parameter 'fieldValue' is set
        if ($fieldValue === null || (is_array($fieldValue) && count($fieldValue) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldValue when calling contractFieldRevenueRulesupdatedo'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling contractFieldRevenueRulesupdatedo'
            );
        }

        $resourcePath = '/contractFieldRevenueRules/update.do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fieldRevenueRuleID,
            'fieldRevenueRuleID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fieldID,
            'fieldID', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fieldValue,
            'fieldValue', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $price,
            'price', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectivePriceRate,
            'effectivePriceRate', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectivePriceAmount,
            'effectivePriceAmount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
