<?php
/**
 * LeadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LeadsPedia API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Leadspedia\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Leadspedia\ApiException;
use Leadspedia\Configuration;
use Leadspedia\HeaderSelector;
use Leadspedia\ObjectSerializer;

/**
 * LeadsApi Class Doc Comment
 *
 * @category Class
 * @package  Leadspedia
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LeadsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client         = $client ?: new Client();
        $this->config         = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex      = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index): void
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation leadsapproveReturndo
     *
     * Approve Return
     *
     * @param  string $leadID leadID (required)
     * @param  int $contractID contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsapproveReturndo($leadID, $contractID): void
    {
        $this->leadsapproveReturndoWithHttpInfo($leadID, $contractID);
    }

    /**
     * Operation leadsapproveReturndoWithHttpInfo
     *
     * Approve Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsapproveReturndoWithHttpInfo($leadID, $contractID)
    {
        $request = $this->leadsapproveReturndoRequest($leadID, $contractID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsapproveReturndoAsync
     *
     * Approve Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsapproveReturndoAsync($leadID, $contractID)
    {
        return $this->leadsapproveReturndoAsyncWithHttpInfo($leadID, $contractID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsapproveReturndoAsyncWithHttpInfo
     *
     * Approve Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsapproveReturndoAsyncWithHttpInfo($leadID, $contractID)
    {
        $returnType = '';
        $request    = $this->leadsapproveReturndoRequest($leadID, $contractID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsapproveReturndo'
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsapproveReturndoRequest($leadID, $contractID)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsapproveReturndo'
            );
        }
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadsapproveReturndo'
            );
        }

        $resourcePath = '/leads/approveReturn.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($contractID)) {
            $contractID = ObjectSerializer::serializeCollection($contractID, '', true);
        }
        if ($contractID !== null) {
            $queryParams['contractID'] = $contractID;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetAlldo
     *
     * Get All
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  int $campaignID campaignID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  string $paid paid (optional)
     * @param  string $scrubbed scrubbed (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetAlldo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $paid = null, $scrubbed = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadsgetAlldoWithHttpInfo($fromDate, $campaignID, $affiliateID, $verticalID, $paid, $scrubbed, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation leadsgetAlldoWithHttpInfo
     *
     * Get All
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  string $paid (optional)
     * @param  string $scrubbed (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetAlldoWithHttpInfo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $paid = null, $scrubbed = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->leadsgetAlldoRequest($fromDate, $campaignID, $affiliateID, $verticalID, $paid, $scrubbed, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetAlldoAsync
     *
     * Get All
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  string $paid (optional)
     * @param  string $scrubbed (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetAlldoAsync($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $paid = null, $scrubbed = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->leadsgetAlldoAsyncWithHttpInfo($fromDate, $campaignID, $affiliateID, $verticalID, $paid, $scrubbed, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetAlldoAsyncWithHttpInfo
     *
     * Get All
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  string $paid (optional)
     * @param  string $scrubbed (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetAlldoAsyncWithHttpInfo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $paid = null, $scrubbed = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetAlldoRequest($fromDate, $campaignID, $affiliateID, $verticalID, $paid, $scrubbed, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetAlldo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  string $paid (optional)
     * @param  string $scrubbed (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetAlldoRequest($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $paid = null, $scrubbed = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling leadsgetAlldo'
            );
        }

        $resourcePath = '/leads/getAll.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($campaignID)) {
            $campaignID = ObjectSerializer::serializeCollection($campaignID, '', true);
        }
        if ($campaignID !== null) {
            $queryParams['campaignID'] = $campaignID;
        }
        // query params
        if (is_array($affiliateID)) {
            $affiliateID = ObjectSerializer::serializeCollection($affiliateID, '', true);
        }
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = $affiliateID;
        }
        // query params
        if (is_array($verticalID)) {
            $verticalID = ObjectSerializer::serializeCollection($verticalID, '', true);
        }
        if ($verticalID !== null) {
            $queryParams['verticalID'] = $verticalID;
        }
        // query params
        if (is_array($paid)) {
            $paid = ObjectSerializer::serializeCollection($paid, '', true);
        }
        if ($paid !== null) {
            $queryParams['paid'] = $paid;
        }
        // query params
        if (is_array($scrubbed)) {
            $scrubbed = ObjectSerializer::serializeCollection($scrubbed, '', true);
        }
        if ($scrubbed !== null) {
            $queryParams['scrubbed'] = $scrubbed;
        }
        // query params
        if (is_array($fromDate)) {
            $fromDate = ObjectSerializer::serializeCollection($fromDate, '', true);
        }
        if ($fromDate !== null) {
            $queryParams['fromDate'] = $fromDate;
        }
        // query params
        if (is_array($toDate)) {
            $toDate = ObjectSerializer::serializeCollection($toDate, '', true);
        }
        if ($toDate !== null) {
            $queryParams['toDate'] = $toDate;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetLeadDatado
     *
     * Get Lead Data
     *
     * @param  string $leadID leadID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetLeadDatado($leadID)
    {
        list($response) = $this->leadsgetLeadDatadoWithHttpInfo($leadID);
        return $response;
    }

    /**
     * Operation leadsgetLeadDatadoWithHttpInfo
     *
     * Get Lead Data
     *
     * @param  string $leadID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetLeadDatadoWithHttpInfo($leadID)
    {
        $request = $this->leadsgetLeadDatadoRequest($leadID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetLeadDatadoAsync
     *
     * Get Lead Data
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetLeadDatadoAsync($leadID)
    {
        return $this->leadsgetLeadDatadoAsyncWithHttpInfo($leadID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetLeadDatadoAsyncWithHttpInfo
     *
     * Get Lead Data
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetLeadDatadoAsyncWithHttpInfo($leadID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetLeadDatadoRequest($leadID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetLeadDatado'
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetLeadDatadoRequest($leadID)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsgetLeadDatado'
            );
        }

        $resourcePath = '/leads/getLeadData.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetLeadInfodo
     *
     * Get Lead Info
     *
     * @param  string $leadID leadID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetLeadInfodo($leadID)
    {
        list($response) = $this->leadsgetLeadInfodoWithHttpInfo($leadID);
        return $response;
    }

    /**
     * Operation leadsgetLeadInfodoWithHttpInfo
     *
     * Get Lead Info
     *
     * @param  string $leadID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetLeadInfodoWithHttpInfo($leadID)
    {
        $request = $this->leadsgetLeadInfodoRequest($leadID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetLeadInfodoAsync
     *
     * Get Lead Info
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetLeadInfodoAsync($leadID)
    {
        return $this->leadsgetLeadInfodoAsyncWithHttpInfo($leadID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetLeadInfodoAsyncWithHttpInfo
     *
     * Get Lead Info
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetLeadInfodoAsyncWithHttpInfo($leadID)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetLeadInfodoRequest($leadID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetLeadInfodo'
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetLeadInfodoRequest($leadID)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsgetLeadInfodo'
            );
        }

        $resourcePath = '/leads/getLeadInfo.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetQueuedo
     *
     * Get Queue
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  int $campaignID campaignID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetQueuedo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadsgetQueuedoWithHttpInfo($fromDate, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation leadsgetQueuedoWithHttpInfo
     *
     * Get Queue
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetQueuedoWithHttpInfo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->leadsgetQueuedoRequest($fromDate, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetQueuedoAsync
     *
     * Get Queue
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetQueuedoAsync($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->leadsgetQueuedoAsyncWithHttpInfo($fromDate, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetQueuedoAsyncWithHttpInfo
     *
     * Get Queue
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetQueuedoAsyncWithHttpInfo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetQueuedoRequest($fromDate, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetQueuedo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetQueuedoRequest($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling leadsgetQueuedo'
            );
        }

        $resourcePath = '/leads/getQueue.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($campaignID)) {
            $campaignID = ObjectSerializer::serializeCollection($campaignID, '', true);
        }
        if ($campaignID !== null) {
            $queryParams['campaignID'] = $campaignID;
        }
        // query params
        if (is_array($affiliateID)) {
            $affiliateID = ObjectSerializer::serializeCollection($affiliateID, '', true);
        }
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = $affiliateID;
        }
        // query params
        if (is_array($verticalID)) {
            $verticalID = ObjectSerializer::serializeCollection($verticalID, '', true);
        }
        if ($verticalID !== null) {
            $queryParams['verticalID'] = $verticalID;
        }
        // query params
        if (is_array($fromDate)) {
            $fromDate = ObjectSerializer::serializeCollection($fromDate, '', true);
        }
        if ($fromDate !== null) {
            $queryParams['fromDate'] = $fromDate;
        }
        // query params
        if (is_array($toDate)) {
            $toDate = ObjectSerializer::serializeCollection($toDate, '', true);
        }
        if ($toDate !== null) {
            $queryParams['toDate'] = $toDate;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetReturnsdo
     *
     * Get Returns
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  int $campaignID campaignID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  string $status status (optional)
     * @param  int $returnReasonID returnReasonID (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetReturnsdo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $status = null, $returnReasonID = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadsgetReturnsdoWithHttpInfo($fromDate, $campaignID, $affiliateID, $verticalID, $advertiserID, $contractID, $status, $returnReasonID, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation leadsgetReturnsdoWithHttpInfo
     *
     * Get Returns
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  string $status (optional)
     * @param  int $returnReasonID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetReturnsdoWithHttpInfo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $status = null, $returnReasonID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->leadsgetReturnsdoRequest($fromDate, $campaignID, $affiliateID, $verticalID, $advertiserID, $contractID, $status, $returnReasonID, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetReturnsdoAsync
     *
     * Get Returns
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  string $status (optional)
     * @param  int $returnReasonID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetReturnsdoAsync($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $status = null, $returnReasonID = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->leadsgetReturnsdoAsyncWithHttpInfo($fromDate, $campaignID, $affiliateID, $verticalID, $advertiserID, $contractID, $status, $returnReasonID, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetReturnsdoAsyncWithHttpInfo
     *
     * Get Returns
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  string $status (optional)
     * @param  int $returnReasonID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetReturnsdoAsyncWithHttpInfo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $status = null, $returnReasonID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetReturnsdoRequest($fromDate, $campaignID, $affiliateID, $verticalID, $advertiserID, $contractID, $status, $returnReasonID, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetReturnsdo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  string $status (optional)
     * @param  int $returnReasonID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetReturnsdoRequest($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $status = null, $returnReasonID = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling leadsgetReturnsdo'
            );
        }

        $resourcePath = '/leads/getReturns.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($campaignID)) {
            $campaignID = ObjectSerializer::serializeCollection($campaignID, '', true);
        }
        if ($campaignID !== null) {
            $queryParams['campaignID'] = $campaignID;
        }
        // query params
        if (is_array($affiliateID)) {
            $affiliateID = ObjectSerializer::serializeCollection($affiliateID, '', true);
        }
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = $affiliateID;
        }
        // query params
        if (is_array($verticalID)) {
            $verticalID = ObjectSerializer::serializeCollection($verticalID, '', true);
        }
        if ($verticalID !== null) {
            $queryParams['verticalID'] = $verticalID;
        }
        // query params
        if (is_array($advertiserID)) {
            $advertiserID = ObjectSerializer::serializeCollection($advertiserID, '', true);
        }
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = $advertiserID;
        }
        // query params
        if (is_array($contractID)) {
            $contractID = ObjectSerializer::serializeCollection($contractID, '', true);
        }
        if ($contractID !== null) {
            $queryParams['contractID'] = $contractID;
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if (is_array($returnReasonID)) {
            $returnReasonID = ObjectSerializer::serializeCollection($returnReasonID, '', true);
        }
        if ($returnReasonID !== null) {
            $queryParams['returnReasonID'] = $returnReasonID;
        }
        // query params
        if (is_array($fromDate)) {
            $fromDate = ObjectSerializer::serializeCollection($fromDate, '', true);
        }
        if ($fromDate !== null) {
            $queryParams['fromDate'] = $fromDate;
        }
        // query params
        if (is_array($toDate)) {
            $toDate = ObjectSerializer::serializeCollection($toDate, '', true);
        }
        if ($toDate !== null) {
            $queryParams['toDate'] = $toDate;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetReviewdo
     *
     * Get Review
     *
     * @param  string $leadID leadID (optional)
     * @param  int $campaignID campaignID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetReviewdo($leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadsgetReviewdoWithHttpInfo($leadID, $campaignID, $affiliateID, $verticalID, $start, $limit);
        return $response;
    }

    /**
     * Operation leadsgetReviewdoWithHttpInfo
     *
     * Get Review
     *
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetReviewdoWithHttpInfo($leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $start = 0, $limit = 100)
    {
        $request = $this->leadsgetReviewdoRequest($leadID, $campaignID, $affiliateID, $verticalID, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetReviewdoAsync
     *
     * Get Review
     *
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetReviewdoAsync($leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $start = 0, $limit = 100)
    {
        return $this->leadsgetReviewdoAsyncWithHttpInfo($leadID, $campaignID, $affiliateID, $verticalID, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetReviewdoAsyncWithHttpInfo
     *
     * Get Review
     *
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetReviewdoAsyncWithHttpInfo($leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetReviewdoRequest($leadID, $campaignID, $affiliateID, $verticalID, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetReviewdo'
     *
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetReviewdoRequest($leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $start = 0, $limit = 100)
    {
        $resourcePath = '/leads/getReview.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($campaignID)) {
            $campaignID = ObjectSerializer::serializeCollection($campaignID, '', true);
        }
        if ($campaignID !== null) {
            $queryParams['campaignID'] = $campaignID;
        }
        // query params
        if (is_array($affiliateID)) {
            $affiliateID = ObjectSerializer::serializeCollection($affiliateID, '', true);
        }
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = $affiliateID;
        }
        // query params
        if (is_array($verticalID)) {
            $verticalID = ObjectSerializer::serializeCollection($verticalID, '', true);
        }
        if ($verticalID !== null) {
            $queryParams['verticalID'] = $verticalID;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetScrubbeddo
     *
     * Get Scrubbed
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  int $campaignID campaignID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetScrubbeddo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadsgetScrubbeddoWithHttpInfo($fromDate, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation leadsgetScrubbeddoWithHttpInfo
     *
     * Get Scrubbed
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetScrubbeddoWithHttpInfo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->leadsgetScrubbeddoRequest($fromDate, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetScrubbeddoAsync
     *
     * Get Scrubbed
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetScrubbeddoAsync($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->leadsgetScrubbeddoAsyncWithHttpInfo($fromDate, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetScrubbeddoAsyncWithHttpInfo
     *
     * Get Scrubbed
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetScrubbeddoAsyncWithHttpInfo($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetScrubbeddoRequest($fromDate, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetScrubbeddo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetScrubbeddoRequest($fromDate, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling leadsgetScrubbeddo'
            );
        }

        $resourcePath = '/leads/getScrubbed.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($campaignID)) {
            $campaignID = ObjectSerializer::serializeCollection($campaignID, '', true);
        }
        if ($campaignID !== null) {
            $queryParams['campaignID'] = $campaignID;
        }
        // query params
        if (is_array($affiliateID)) {
            $affiliateID = ObjectSerializer::serializeCollection($affiliateID, '', true);
        }
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = $affiliateID;
        }
        // query params
        if (is_array($verticalID)) {
            $verticalID = ObjectSerializer::serializeCollection($verticalID, '', true);
        }
        if ($verticalID !== null) {
            $queryParams['verticalID'] = $verticalID;
        }
        // query params
        if (is_array($fromDate)) {
            $fromDate = ObjectSerializer::serializeCollection($fromDate, '', true);
        }
        if ($fromDate !== null) {
            $queryParams['fromDate'] = $fromDate;
        }
        // query params
        if (is_array($toDate)) {
            $toDate = ObjectSerializer::serializeCollection($toDate, '', true);
        }
        if ($toDate !== null) {
            $queryParams['toDate'] = $toDate;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetSolddo
     *
     * Get Sold
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  string $leadID leadID (optional)
     * @param  int $campaignID campaignID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  int $advertiserID advertiserID (optional)
     * @param  int $contractID contractID (optional)
     * @param  string $returned returned (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetSolddo($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $returned = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadsgetSolddoWithHttpInfo($fromDate, $leadID, $campaignID, $affiliateID, $verticalID, $advertiserID, $contractID, $returned, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation leadsgetSolddoWithHttpInfo
     *
     * Get Sold
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  string $returned (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetSolddoWithHttpInfo($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $returned = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->leadsgetSolddoRequest($fromDate, $leadID, $campaignID, $affiliateID, $verticalID, $advertiserID, $contractID, $returned, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetSolddoAsync
     *
     * Get Sold
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  string $returned (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetSolddoAsync($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $returned = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->leadsgetSolddoAsyncWithHttpInfo($fromDate, $leadID, $campaignID, $affiliateID, $verticalID, $advertiserID, $contractID, $returned, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetSolddoAsyncWithHttpInfo
     *
     * Get Sold
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  string $returned (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetSolddoAsyncWithHttpInfo($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $returned = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetSolddoRequest($fromDate, $leadID, $campaignID, $affiliateID, $verticalID, $advertiserID, $contractID, $returned, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetSolddo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  int $advertiserID (optional)
     * @param  int $contractID (optional)
     * @param  string $returned (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetSolddoRequest($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $advertiserID = null, $contractID = null, $returned = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling leadsgetSolddo'
            );
        }

        $resourcePath = '/leads/getSold.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($campaignID)) {
            $campaignID = ObjectSerializer::serializeCollection($campaignID, '', true);
        }
        if ($campaignID !== null) {
            $queryParams['campaignID'] = $campaignID;
        }
        // query params
        if (is_array($affiliateID)) {
            $affiliateID = ObjectSerializer::serializeCollection($affiliateID, '', true);
        }
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = $affiliateID;
        }
        // query params
        if (is_array($verticalID)) {
            $verticalID = ObjectSerializer::serializeCollection($verticalID, '', true);
        }
        if ($verticalID !== null) {
            $queryParams['verticalID'] = $verticalID;
        }
        // query params
        if (is_array($advertiserID)) {
            $advertiserID = ObjectSerializer::serializeCollection($advertiserID, '', true);
        }
        if ($advertiserID !== null) {
            $queryParams['advertiserID'] = $advertiserID;
        }
        // query params
        if (is_array($contractID)) {
            $contractID = ObjectSerializer::serializeCollection($contractID, '', true);
        }
        if ($contractID !== null) {
            $queryParams['contractID'] = $contractID;
        }
        // query params
        if (is_array($returned)) {
            $returned = ObjectSerializer::serializeCollection($returned, '', true);
        }
        if ($returned !== null) {
            $queryParams['returned'] = $returned;
        }
        // query params
        if (is_array($fromDate)) {
            $fromDate = ObjectSerializer::serializeCollection($fromDate, '', true);
        }
        if ($fromDate !== null) {
            $queryParams['fromDate'] = $fromDate;
        }
        // query params
        if (is_array($toDate)) {
            $toDate = ObjectSerializer::serializeCollection($toDate, '', true);
        }
        if ($toDate !== null) {
            $queryParams['toDate'] = $toDate;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsgetTrashdo
     *
     * Get Trash
     *
     * @param  \DateTime $fromDate fromDate (required)
     * @param  string $leadID leadID (optional)
     * @param  int $campaignID campaignID (optional)
     * @param  int $affiliateID affiliateID (optional)
     * @param  int $verticalID verticalID (optional)
     * @param  \DateTime $toDate toDate (optional)
     * @param  int $start start (optional, default to 0)
     * @param  int $limit limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Leadspedia\Model\InlineResponse200
     */
    public function leadsgetTrashdo($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        list($response) = $this->leadsgetTrashdoWithHttpInfo($fromDate, $leadID, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);
        return $response;
    }

    /**
     * Operation leadsgetTrashdoWithHttpInfo
     *
     * Get Trash
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Leadspedia\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsgetTrashdoWithHttpInfo($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $request = $this->leadsgetTrashdoRequest($fromDate, $leadID, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Leadspedia\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Leadspedia\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType   = '\Leadspedia\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Leadspedia\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadsgetTrashdoAsync
     *
     * Get Trash
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetTrashdoAsync($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        return $this->leadsgetTrashdoAsyncWithHttpInfo($fromDate, $leadID, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsgetTrashdoAsyncWithHttpInfo
     *
     * Get Trash
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsgetTrashdoAsyncWithHttpInfo($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        $returnType = '\Leadspedia\Model\InlineResponse200';
        $request    = $this->leadsgetTrashdoRequest($fromDate, $leadID, $campaignID, $affiliateID, $verticalID, $toDate, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsgetTrashdo'
     *
     * @param  \DateTime $fromDate (required)
     * @param  string $leadID (optional)
     * @param  int $campaignID (optional)
     * @param  int $affiliateID (optional)
     * @param  int $verticalID (optional)
     * @param  \DateTime $toDate (optional)
     * @param  int $start (optional, default to 0)
     * @param  int $limit (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsgetTrashdoRequest($fromDate, $leadID = null, $campaignID = null, $affiliateID = null, $verticalID = null, $toDate = null, $start = 0, $limit = 100)
    {
        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling leadsgetTrashdo'
            );
        }

        $resourcePath = '/leads/getTrash.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($campaignID)) {
            $campaignID = ObjectSerializer::serializeCollection($campaignID, '', true);
        }
        if ($campaignID !== null) {
            $queryParams['campaignID'] = $campaignID;
        }
        // query params
        if (is_array($affiliateID)) {
            $affiliateID = ObjectSerializer::serializeCollection($affiliateID, '', true);
        }
        if ($affiliateID !== null) {
            $queryParams['affiliateID'] = $affiliateID;
        }
        // query params
        if (is_array($verticalID)) {
            $verticalID = ObjectSerializer::serializeCollection($verticalID, '', true);
        }
        if ($verticalID !== null) {
            $queryParams['verticalID'] = $verticalID;
        }
        // query params
        if (is_array($fromDate)) {
            $fromDate = ObjectSerializer::serializeCollection($fromDate, '', true);
        }
        if ($fromDate !== null) {
            $queryParams['fromDate'] = $fromDate;
        }
        // query params
        if (is_array($toDate)) {
            $toDate = ObjectSerializer::serializeCollection($toDate, '', true);
        }
        if ($toDate !== null) {
            $queryParams['toDate'] = $toDate;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsrejectReturndo
     *
     * Reject Return
     *
     * @param  string $leadID leadID (required)
     * @param  int $contractID contractID (required)
     * @param  int $rejectReasonID rejectReasonID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsrejectReturndo($leadID, $contractID, $rejectReasonID): void
    {
        $this->leadsrejectReturndoWithHttpInfo($leadID, $contractID, $rejectReasonID);
    }

    /**
     * Operation leadsrejectReturndoWithHttpInfo
     *
     * Reject Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $rejectReasonID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsrejectReturndoWithHttpInfo($leadID, $contractID, $rejectReasonID)
    {
        $request = $this->leadsrejectReturndoRequest($leadID, $contractID, $rejectReasonID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsrejectReturndoAsync
     *
     * Reject Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $rejectReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsrejectReturndoAsync($leadID, $contractID, $rejectReasonID)
    {
        return $this->leadsrejectReturndoAsyncWithHttpInfo($leadID, $contractID, $rejectReasonID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsrejectReturndoAsyncWithHttpInfo
     *
     * Reject Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $rejectReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsrejectReturndoAsyncWithHttpInfo($leadID, $contractID, $rejectReasonID)
    {
        $returnType = '';
        $request    = $this->leadsrejectReturndoRequest($leadID, $contractID, $rejectReasonID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsrejectReturndo'
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $rejectReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsrejectReturndoRequest($leadID, $contractID, $rejectReasonID)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsrejectReturndo'
            );
        }
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadsrejectReturndo'
            );
        }
        // verify the required parameter 'rejectReasonID' is set
        if ($rejectReasonID === null || (is_array($rejectReasonID) && count($rejectReasonID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rejectReasonID when calling leadsrejectReturndo'
            );
        }

        $resourcePath = '/leads/rejectReturn.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($contractID)) {
            $contractID = ObjectSerializer::serializeCollection($contractID, '', true);
        }
        if ($contractID !== null) {
            $queryParams['contractID'] = $contractID;
        }
        // query params
        if (is_array($rejectReasonID)) {
            $rejectReasonID = ObjectSerializer::serializeCollection($rejectReasonID, '', true);
        }
        if ($rejectReasonID !== null) {
            $queryParams['rejectReasonID'] = $rejectReasonID;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsrequestReturndo
     *
     * Request Return
     *
     * @param  string $leadID leadID (required)
     * @param  int $contractID contractID (required)
     * @param  int $returnReasonID returnReasonID (required)
     * @param  string $returnNotes returnNotes (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsrequestReturndo($leadID, $contractID, $returnReasonID, $returnNotes = null): void
    {
        $this->leadsrequestReturndoWithHttpInfo($leadID, $contractID, $returnReasonID, $returnNotes);
    }

    /**
     * Operation leadsrequestReturndoWithHttpInfo
     *
     * Request Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $returnReasonID (required)
     * @param  string $returnNotes (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsrequestReturndoWithHttpInfo($leadID, $contractID, $returnReasonID, $returnNotes = null)
    {
        $request = $this->leadsrequestReturndoRequest($leadID, $contractID, $returnReasonID, $returnNotes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsrequestReturndoAsync
     *
     * Request Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $returnReasonID (required)
     * @param  string $returnNotes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsrequestReturndoAsync($leadID, $contractID, $returnReasonID, $returnNotes = null)
    {
        return $this->leadsrequestReturndoAsyncWithHttpInfo($leadID, $contractID, $returnReasonID, $returnNotes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsrequestReturndoAsyncWithHttpInfo
     *
     * Request Return
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $returnReasonID (required)
     * @param  string $returnNotes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsrequestReturndoAsyncWithHttpInfo($leadID, $contractID, $returnReasonID, $returnNotes = null)
    {
        $returnType = '';
        $request    = $this->leadsrequestReturndoRequest($leadID, $contractID, $returnReasonID, $returnNotes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsrequestReturndo'
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $returnReasonID (required)
     * @param  string $returnNotes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsrequestReturndoRequest($leadID, $contractID, $returnReasonID, $returnNotes = null)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsrequestReturndo'
            );
        }
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadsrequestReturndo'
            );
        }
        // verify the required parameter 'returnReasonID' is set
        if ($returnReasonID === null || (is_array($returnReasonID) && count($returnReasonID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $returnReasonID when calling leadsrequestReturndo'
            );
        }

        $resourcePath = '/leads/requestReturn.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($contractID)) {
            $contractID = ObjectSerializer::serializeCollection($contractID, '', true);
        }
        if ($contractID !== null) {
            $queryParams['contractID'] = $contractID;
        }
        // query params
        if (is_array($returnReasonID)) {
            $returnReasonID = ObjectSerializer::serializeCollection($returnReasonID, '', true);
        }
        if ($returnReasonID !== null) {
            $queryParams['returnReasonID'] = $returnReasonID;
        }
        // query params
        if (is_array($returnNotes)) {
            $returnNotes = ObjectSerializer::serializeCollection($returnNotes, '', true);
        }
        if ($returnNotes !== null) {
            $queryParams['returnNotes'] = $returnNotes;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsreturnLeadFromAllContractsdo
     *
     * Return Lead From All Contracts
     *
     * @param  string $leadID leadID (required)
     * @param  int $returnReasonID returnReasonID (required)
     * @param  string $scrub scrub (optional)
     * @param  string $replaceReturns replaceReturns (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsreturnLeadFromAllContractsdo($leadID, $returnReasonID, $scrub = null, $replaceReturns = null): void
    {
        $this->leadsreturnLeadFromAllContractsdoWithHttpInfo($leadID, $returnReasonID, $scrub, $replaceReturns);
    }

    /**
     * Operation leadsreturnLeadFromAllContractsdoWithHttpInfo
     *
     * Return Lead From All Contracts
     *
     * @param  string $leadID (required)
     * @param  int $returnReasonID (required)
     * @param  string $scrub (optional)
     * @param  string $replaceReturns (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsreturnLeadFromAllContractsdoWithHttpInfo($leadID, $returnReasonID, $scrub = null, $replaceReturns = null)
    {
        $request = $this->leadsreturnLeadFromAllContractsdoRequest($leadID, $returnReasonID, $scrub, $replaceReturns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsreturnLeadFromAllContractsdoAsync
     *
     * Return Lead From All Contracts
     *
     * @param  string $leadID (required)
     * @param  int $returnReasonID (required)
     * @param  string $scrub (optional)
     * @param  string $replaceReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreturnLeadFromAllContractsdoAsync($leadID, $returnReasonID, $scrub = null, $replaceReturns = null)
    {
        return $this->leadsreturnLeadFromAllContractsdoAsyncWithHttpInfo($leadID, $returnReasonID, $scrub, $replaceReturns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsreturnLeadFromAllContractsdoAsyncWithHttpInfo
     *
     * Return Lead From All Contracts
     *
     * @param  string $leadID (required)
     * @param  int $returnReasonID (required)
     * @param  string $scrub (optional)
     * @param  string $replaceReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreturnLeadFromAllContractsdoAsyncWithHttpInfo($leadID, $returnReasonID, $scrub = null, $replaceReturns = null)
    {
        $returnType = '';
        $request    = $this->leadsreturnLeadFromAllContractsdoRequest($leadID, $returnReasonID, $scrub, $replaceReturns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsreturnLeadFromAllContractsdo'
     *
     * @param  string $leadID (required)
     * @param  int $returnReasonID (required)
     * @param  string $scrub (optional)
     * @param  string $replaceReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsreturnLeadFromAllContractsdoRequest($leadID, $returnReasonID, $scrub = null, $replaceReturns = null)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsreturnLeadFromAllContractsdo'
            );
        }
        // verify the required parameter 'returnReasonID' is set
        if ($returnReasonID === null || (is_array($returnReasonID) && count($returnReasonID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $returnReasonID when calling leadsreturnLeadFromAllContractsdo'
            );
        }

        $resourcePath = '/leads/returnLeadFromAllContracts.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($returnReasonID)) {
            $returnReasonID = ObjectSerializer::serializeCollection($returnReasonID, '', true);
        }
        if ($returnReasonID !== null) {
            $queryParams['returnReasonID'] = $returnReasonID;
        }
        // query params
        if (is_array($scrub)) {
            $scrub = ObjectSerializer::serializeCollection($scrub, '', true);
        }
        if ($scrub !== null) {
            $queryParams['scrub'] = $scrub;
        }
        // query params
        if (is_array($replaceReturns)) {
            $replaceReturns = ObjectSerializer::serializeCollection($replaceReturns, '', true);
        }
        if ($replaceReturns !== null) {
            $queryParams['replaceReturns'] = $replaceReturns;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsreturnLeaddo
     *
     * Return Lead
     *
     * @param  string $leadID leadID (required)
     * @param  int $contractID contractID (required)
     * @param  int $returnReasonID returnReasonID (required)
     * @param  string $scrub scrub (optional)
     * @param  string $replaceReturns replaceReturns (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsreturnLeaddo($leadID, $contractID, $returnReasonID, $scrub = null, $replaceReturns = null): void
    {
        $this->leadsreturnLeaddoWithHttpInfo($leadID, $contractID, $returnReasonID, $scrub, $replaceReturns);
    }

    /**
     * Operation leadsreturnLeaddoWithHttpInfo
     *
     * Return Lead
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $returnReasonID (required)
     * @param  string $scrub (optional)
     * @param  string $replaceReturns (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsreturnLeaddoWithHttpInfo($leadID, $contractID, $returnReasonID, $scrub = null, $replaceReturns = null)
    {
        $request = $this->leadsreturnLeaddoRequest($leadID, $contractID, $returnReasonID, $scrub, $replaceReturns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsreturnLeaddoAsync
     *
     * Return Lead
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $returnReasonID (required)
     * @param  string $scrub (optional)
     * @param  string $replaceReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreturnLeaddoAsync($leadID, $contractID, $returnReasonID, $scrub = null, $replaceReturns = null)
    {
        return $this->leadsreturnLeaddoAsyncWithHttpInfo($leadID, $contractID, $returnReasonID, $scrub, $replaceReturns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsreturnLeaddoAsyncWithHttpInfo
     *
     * Return Lead
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $returnReasonID (required)
     * @param  string $scrub (optional)
     * @param  string $replaceReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreturnLeaddoAsyncWithHttpInfo($leadID, $contractID, $returnReasonID, $scrub = null, $replaceReturns = null)
    {
        $returnType = '';
        $request    = $this->leadsreturnLeaddoRequest($leadID, $contractID, $returnReasonID, $scrub, $replaceReturns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsreturnLeaddo'
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $returnReasonID (required)
     * @param  string $scrub (optional)
     * @param  string $replaceReturns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsreturnLeaddoRequest($leadID, $contractID, $returnReasonID, $scrub = null, $replaceReturns = null)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsreturnLeaddo'
            );
        }
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadsreturnLeaddo'
            );
        }
        // verify the required parameter 'returnReasonID' is set
        if ($returnReasonID === null || (is_array($returnReasonID) && count($returnReasonID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $returnReasonID when calling leadsreturnLeaddo'
            );
        }

        $resourcePath = '/leads/returnLead.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($contractID)) {
            $contractID = ObjectSerializer::serializeCollection($contractID, '', true);
        }
        if ($contractID !== null) {
            $queryParams['contractID'] = $contractID;
        }
        // query params
        if (is_array($returnReasonID)) {
            $returnReasonID = ObjectSerializer::serializeCollection($returnReasonID, '', true);
        }
        if ($returnReasonID !== null) {
            $queryParams['returnReasonID'] = $returnReasonID;
        }
        // query params
        if (is_array($scrub)) {
            $scrub = ObjectSerializer::serializeCollection($scrub, '', true);
        }
        if ($scrub !== null) {
            $queryParams['scrub'] = $scrub;
        }
        // query params
        if (is_array($replaceReturns)) {
            $replaceReturns = ObjectSerializer::serializeCollection($replaceReturns, '', true);
        }
        if ($replaceReturns !== null) {
            $queryParams['replaceReturns'] = $replaceReturns;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsreviewApprovedo
     *
     * Review Approve
     *
     * @param  string $leadID leadID (required)
     * @param  int $leadAcceptReasonID leadAcceptReasonID (required)
     * @param  string $leadAcceptReason leadAcceptReason (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsreviewApprovedo($leadID, $leadAcceptReasonID, $leadAcceptReason = null): void
    {
        $this->leadsreviewApprovedoWithHttpInfo($leadID, $leadAcceptReasonID, $leadAcceptReason);
    }

    /**
     * Operation leadsreviewApprovedoWithHttpInfo
     *
     * Review Approve
     *
     * @param  string $leadID (required)
     * @param  int $leadAcceptReasonID (required)
     * @param  string $leadAcceptReason (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsreviewApprovedoWithHttpInfo($leadID, $leadAcceptReasonID, $leadAcceptReason = null)
    {
        $request = $this->leadsreviewApprovedoRequest($leadID, $leadAcceptReasonID, $leadAcceptReason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsreviewApprovedoAsync
     *
     * Review Approve
     *
     * @param  string $leadID (required)
     * @param  int $leadAcceptReasonID (required)
     * @param  string $leadAcceptReason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreviewApprovedoAsync($leadID, $leadAcceptReasonID, $leadAcceptReason = null)
    {
        return $this->leadsreviewApprovedoAsyncWithHttpInfo($leadID, $leadAcceptReasonID, $leadAcceptReason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsreviewApprovedoAsyncWithHttpInfo
     *
     * Review Approve
     *
     * @param  string $leadID (required)
     * @param  int $leadAcceptReasonID (required)
     * @param  string $leadAcceptReason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreviewApprovedoAsyncWithHttpInfo($leadID, $leadAcceptReasonID, $leadAcceptReason = null)
    {
        $returnType = '';
        $request    = $this->leadsreviewApprovedoRequest($leadID, $leadAcceptReasonID, $leadAcceptReason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsreviewApprovedo'
     *
     * @param  string $leadID (required)
     * @param  int $leadAcceptReasonID (required)
     * @param  string $leadAcceptReason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsreviewApprovedoRequest($leadID, $leadAcceptReasonID, $leadAcceptReason = null)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsreviewApprovedo'
            );
        }
        // verify the required parameter 'leadAcceptReasonID' is set
        if ($leadAcceptReasonID === null || (is_array($leadAcceptReasonID) && count($leadAcceptReasonID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadAcceptReasonID when calling leadsreviewApprovedo'
            );
        }

        $resourcePath = '/leads/reviewApprove.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($leadAcceptReasonID)) {
            $leadAcceptReasonID = ObjectSerializer::serializeCollection($leadAcceptReasonID, '', true);
        }
        if ($leadAcceptReasonID !== null) {
            $queryParams['leadAcceptReasonID'] = $leadAcceptReasonID;
        }
        // query params
        if (is_array($leadAcceptReason)) {
            $leadAcceptReason = ObjectSerializer::serializeCollection($leadAcceptReason, '', true);
        }
        if ($leadAcceptReason !== null) {
            $queryParams['leadAcceptReason'] = $leadAcceptReason;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsreviewRejectdo
     *
     * Review Reject
     *
     * @param  string $leadID leadID (required)
     * @param  int $leadRejectReasonID leadRejectReasonID (required)
     * @param  string $leadRejectReason leadRejectReason (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsreviewRejectdo($leadID, $leadRejectReasonID, $leadRejectReason = null): void
    {
        $this->leadsreviewRejectdoWithHttpInfo($leadID, $leadRejectReasonID, $leadRejectReason);
    }

    /**
     * Operation leadsreviewRejectdoWithHttpInfo
     *
     * Review Reject
     *
     * @param  string $leadID (required)
     * @param  int $leadRejectReasonID (required)
     * @param  string $leadRejectReason (optional)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsreviewRejectdoWithHttpInfo($leadID, $leadRejectReasonID, $leadRejectReason = null)
    {
        $request = $this->leadsreviewRejectdoRequest($leadID, $leadRejectReasonID, $leadRejectReason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsreviewRejectdoAsync
     *
     * Review Reject
     *
     * @param  string $leadID (required)
     * @param  int $leadRejectReasonID (required)
     * @param  string $leadRejectReason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreviewRejectdoAsync($leadID, $leadRejectReasonID, $leadRejectReason = null)
    {
        return $this->leadsreviewRejectdoAsyncWithHttpInfo($leadID, $leadRejectReasonID, $leadRejectReason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsreviewRejectdoAsyncWithHttpInfo
     *
     * Review Reject
     *
     * @param  string $leadID (required)
     * @param  int $leadRejectReasonID (required)
     * @param  string $leadRejectReason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsreviewRejectdoAsyncWithHttpInfo($leadID, $leadRejectReasonID, $leadRejectReason = null)
    {
        $returnType = '';
        $request    = $this->leadsreviewRejectdoRequest($leadID, $leadRejectReasonID, $leadRejectReason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsreviewRejectdo'
     *
     * @param  string $leadID (required)
     * @param  int $leadRejectReasonID (required)
     * @param  string $leadRejectReason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsreviewRejectdoRequest($leadID, $leadRejectReasonID, $leadRejectReason = null)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsreviewRejectdo'
            );
        }
        // verify the required parameter 'leadRejectReasonID' is set
        if ($leadRejectReasonID === null || (is_array($leadRejectReasonID) && count($leadRejectReasonID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadRejectReasonID when calling leadsreviewRejectdo'
            );
        }

        $resourcePath = '/leads/reviewReject.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($leadRejectReasonID)) {
            $leadRejectReasonID = ObjectSerializer::serializeCollection($leadRejectReasonID, '', true);
        }
        if ($leadRejectReasonID !== null) {
            $queryParams['leadRejectReasonID'] = $leadRejectReasonID;
        }
        // query params
        if (is_array($leadRejectReason)) {
            $leadRejectReason = ObjectSerializer::serializeCollection($leadRejectReason, '', true);
        }
        if ($leadRejectReason !== null) {
            $queryParams['leadRejectReason'] = $leadRejectReason;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsscrubLeaddo
     *
     * Scrub Lead
     *
     * @param  string $leadID leadID (required)
     * @param  int $scrubReasonID scrubReasonID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsscrubLeaddo($leadID, $scrubReasonID): void
    {
        $this->leadsscrubLeaddoWithHttpInfo($leadID, $scrubReasonID);
    }

    /**
     * Operation leadsscrubLeaddoWithHttpInfo
     *
     * Scrub Lead
     *
     * @param  string $leadID (required)
     * @param  int $scrubReasonID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsscrubLeaddoWithHttpInfo($leadID, $scrubReasonID)
    {
        $request = $this->leadsscrubLeaddoRequest($leadID, $scrubReasonID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsscrubLeaddoAsync
     *
     * Scrub Lead
     *
     * @param  string $leadID (required)
     * @param  int $scrubReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsscrubLeaddoAsync($leadID, $scrubReasonID)
    {
        return $this->leadsscrubLeaddoAsyncWithHttpInfo($leadID, $scrubReasonID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsscrubLeaddoAsyncWithHttpInfo
     *
     * Scrub Lead
     *
     * @param  string $leadID (required)
     * @param  int $scrubReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsscrubLeaddoAsyncWithHttpInfo($leadID, $scrubReasonID)
    {
        $returnType = '';
        $request    = $this->leadsscrubLeaddoRequest($leadID, $scrubReasonID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsscrubLeaddo'
     *
     * @param  string $leadID (required)
     * @param  int $scrubReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsscrubLeaddoRequest($leadID, $scrubReasonID)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsscrubLeaddo'
            );
        }
        // verify the required parameter 'scrubReasonID' is set
        if ($scrubReasonID === null || (is_array($scrubReasonID) && count($scrubReasonID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scrubReasonID when calling leadsscrubLeaddo'
            );
        }

        $resourcePath = '/leads/scrubLead.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($scrubReasonID)) {
            $scrubReasonID = ObjectSerializer::serializeCollection($scrubReasonID, '', true);
        }
        if ($scrubReasonID !== null) {
            $queryParams['scrubReasonID'] = $scrubReasonID;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsunreturnLeaddo
     *
     * Unreturn Lead
     *
     * @param  string $leadID leadID (required)
     * @param  int $contractID contractID (required)
     * @param  int $rejectReasonID rejectReasonID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsunreturnLeaddo($leadID, $contractID, $rejectReasonID): void
    {
        $this->leadsunreturnLeaddoWithHttpInfo($leadID, $contractID, $rejectReasonID);
    }

    /**
     * Operation leadsunreturnLeaddoWithHttpInfo
     *
     * Unreturn Lead
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $rejectReasonID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsunreturnLeaddoWithHttpInfo($leadID, $contractID, $rejectReasonID)
    {
        $request = $this->leadsunreturnLeaddoRequest($leadID, $contractID, $rejectReasonID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsunreturnLeaddoAsync
     *
     * Unreturn Lead
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $rejectReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsunreturnLeaddoAsync($leadID, $contractID, $rejectReasonID)
    {
        return $this->leadsunreturnLeaddoAsyncWithHttpInfo($leadID, $contractID, $rejectReasonID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsunreturnLeaddoAsyncWithHttpInfo
     *
     * Unreturn Lead
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $rejectReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsunreturnLeaddoAsyncWithHttpInfo($leadID, $contractID, $rejectReasonID)
    {
        $returnType = '';
        $request    = $this->leadsunreturnLeaddoRequest($leadID, $contractID, $rejectReasonID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsunreturnLeaddo'
     *
     * @param  string $leadID (required)
     * @param  int $contractID (required)
     * @param  int $rejectReasonID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsunreturnLeaddoRequest($leadID, $contractID, $rejectReasonID)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsunreturnLeaddo'
            );
        }
        // verify the required parameter 'contractID' is set
        if ($contractID === null || (is_array($contractID) && count($contractID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractID when calling leadsunreturnLeaddo'
            );
        }
        // verify the required parameter 'rejectReasonID' is set
        if ($rejectReasonID === null || (is_array($rejectReasonID) && count($rejectReasonID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rejectReasonID when calling leadsunreturnLeaddo'
            );
        }

        $resourcePath = '/leads/unreturnLead.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }
        // query params
        if (is_array($contractID)) {
            $contractID = ObjectSerializer::serializeCollection($contractID, '', true);
        }
        if ($contractID !== null) {
            $queryParams['contractID'] = $contractID;
        }
        // query params
        if (is_array($rejectReasonID)) {
            $rejectReasonID = ObjectSerializer::serializeCollection($rejectReasonID, '', true);
        }
        if ($rejectReasonID !== null) {
            $queryParams['rejectReasonID'] = $rejectReasonID;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadsupdateLeaddo
     *
     * Update Lead
     *
     * @param  string $leadID leadID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function leadsupdateLeaddo($leadID): void
    {
        $this->leadsupdateLeaddoWithHttpInfo($leadID);
    }

    /**
     * Operation leadsupdateLeaddoWithHttpInfo
     *
     * Update Lead
     *
     * @param  string $leadID (required)
     *
     * @throws \Leadspedia\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsupdateLeaddoWithHttpInfo($leadID)
    {
        $request = $this->leadsupdateLeaddoRequest($leadID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadsupdateLeaddoAsync
     *
     * Update Lead
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsupdateLeaddoAsync($leadID)
    {
        return $this->leadsupdateLeaddoAsyncWithHttpInfo($leadID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadsupdateLeaddoAsyncWithHttpInfo
     *
     * Update Lead
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadsupdateLeaddoAsyncWithHttpInfo($leadID)
    {
        $returnType = '';
        $request    = $this->leadsupdateLeaddoRequest($leadID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadsupdateLeaddo'
     *
     * @param  string $leadID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadsupdateLeaddoRequest($leadID)
    {
        // verify the required parameter 'leadID' is set
        if ($leadID === null || (is_array($leadID) && count($leadID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leadID when calling leadsupdateLeaddo'
            );
        }

        $resourcePath = '/leads/updateLead.do';
        $formParams   = [];
        $queryParams  = [];
        $headerParams = [];
        $httpBody     = '';
        $multipart    = false;

        // query params
        if (is_array($leadID)) {
            $leadID = ObjectSerializer::serializeCollection($leadID, '', true);
        }
        if ($leadID !== null) {
            $queryParams['leadID'] = $leadID;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
